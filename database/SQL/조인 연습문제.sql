/*
CREATE TABLE INFO 
(
  ID NUMBER NOT NULL 
, TITLE VARCHAR2(50) 
, CONTENT VARCHAR2(100) 
, REGDATE DATE DEFAULT SYSDATE 
, USER_ID VARCHAR2(50) 
, CONSTRAINT INFO_PK PRIMARY KEY 
  (
    ID 
  )
  ENABLE 
);

CREATE TABLE AUTH 
(
  USER_ID VARCHAR2(50) NOT NULL 
, JOB VARCHAR2(50) 
, NAME VARCHAR2(50) 
, CONSTRAINT AUTH_PK PRIMARY KEY 
  (
    USER_ID 
  )
  ENABLE 
);
*/

SELECT *
  FROM INFO;

SELECT *
  FROM AUTH;

-- INNER JOIN
SELECT *
  FROM INFO I
INNER JOIN AUTH A
ON I.USER_ID = A.USER_ID;

-- SELECT구문에 필요한 칼럼 지정
/* 양쪽 테이블에 동일한 이름으로 존재하는 칼럼을 적으면
 열의 정의가 모호하다는 에러를 출력한다.
 이런 경우 테이블_이름. 칼럼으로 정상적 조회가 가능하다.
 테이블에 별칭을 이용해서 JOIN을 할 수 있다.
*/
SELECT ID,
       TITLE,
       CONTENT,
       REGDATE,
       I.USER_ID,
       JOB,
       NAME
  FROM INFO I
INNER JOIN AUTH A
ON I.USER_ID = A.USER_ID
WHERE ID = 1;


SELECT *
  FROM INFO I
LEFT OUTER JOIN AUTH A
ON I.USER_ID = A.USER_ID;

SELECT *
  FROM INFO I
RIGHT OUTER JOIN AUTH A
ON I.USER_ID = A.USER_ID;

SELECT *
  FROM INFO I  
FULL OUTER JOIN AUTH A
ON I.USER_ID = A.USER_ID;

-- 잘못된 형태의 조인의 결과(Cartition Product)
SELECT *
  FROM INFO I
CROSS JOIN AUTH A;

-- 조인이 3개 테이블도 가능하다. 키 값만 찾아서 구문을 연결해서 쓰면 된다.

SELECT *
  FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
INNER JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID;

-- 테이블 AUTH와 INFO에서 엘리어스 A,I를 이용해서 LEFT JOIN
-- JOB칼럼이 DBA인 사람의 ID, TITLE, CONTENT, JOB만 출력
-- RIGHT JOIN도 결과 확인

SELECT ID, TITLE, CONTENT, JOB
  FROM AUTH A
LEFT OUTER JOIN INFO I
ON A.USER_ID = I.USER_ID
WHERE JOB = 'DBA';

SELECT ID, TITLE, CONTENT, JOB
  FROM AUTH A
RIGHT OUTER JOIN INFO I
ON A.USER_ID = I.USER_ID
WHERE JOB = 'DBA';

SELECT *
  FROM EMPLOYEES E1
LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.MANAGER_ID
ORDER BY E1.EMPLOYEE_ID;

/*문제 1.
-EMPLOYEES 테이블과, DEPARTMENTS 테이블은 DEPARTMENT_ID로 연결되어 있습니다.
-EMPLOYEES, DEPARTMENTS 테이블을 엘리어스를 이용해서
각각 INNER , LEFT OUTER, RIGHT OUTER, FULL OUTER 조인 하세요. 
(달라지는 행의 개수 확인)
*/
SELECT COUNT(*)
  FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT COUNT(*)
  FROM EMPLOYEES E
LEFT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT COUNT(*)
  FROM EMPLOYEES E
RIGHT OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT COUNT(*)
  FROM EMPLOYEES E
FULL OUTER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

/*문제 2.
-EMPLOYEES, DEPARTMENTS 테이블을 INNER JOIN하세요
조건)employee_id가 200인 사람의 이름, department_id를 출력하세요
조건)이름 컬럼은 first_name과 last_name을 합쳐서 출력합니다
*/
SELECT CONCAT(FIRST_NAME, LAST_NAME) AS NAME, E.DEPARTMENT_ID
  FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE EMPLOYEE_ID = 200;


/*문제 3.
-EMPLOYEES, JOBS테이블을 INNER JOIN하세요
조건) 모든 사원의 이름과 직무아이디, 직무 타이틀을 출력하고, 이름 기준으로 오름차순 정렬
HINT) 어떤 컬럼으로 서로 연결되 있는지 확인
*/
SELECT CONCAT(FIRST_NAME, LAST_NAME) AS NAME, EMPLOYEE_ID, E.JOB_ID
  FROM EMPLOYEES E
INNER JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
ORDER BY NAME;



/*문제 4.
--JOBS테이블과 JOB_HISTORY테이블을 LEFT_OUTER JOIN 하세요.
JOB_ID     NOT NULL VARCHAR2(10) 
JOB_TITLE  NOT NULL VARCHAR2(35) 
MIN_SALARY          NUMBER(6)    
MAX_SALARY          NUMBER(6)    

*/
SELECT *
  FROM JOBS J
LEFT OUTER JOIN JOB_HISTORY JH
ON J.JOB_ID = JH.JOB_ID;

/*문제 5.
--Steven King의 부서명을 출력하세요.
*/
DESC DEPARTMENTS;

SELECT DEPARTMENT_NAME
  FROM DEPARTMENTS D
INNER JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE UPPER(FIRST_NAME) = 'STEVEN'
  AND UPPER(LAST_NAME) = 'KING';


/*문제 6.
--EMPLOYEES 테이블과 DEPARTMENTS 테이블을 Cartesian Product(Cross join)처리하세요
*/
SELECT *
  FROM EMPLOYEES
CROSS JOIN DEPARTMENTS;

/*
문제 7.
--EMPLOYEES 테이블과 DEPARTMENTS 테이블의 부서번호를 조인하고 
SA_MAN 사원만의 사원번호, 이름,
급여, 부서명, 근무지를 출력하세요. (Alias를 사용)
*/
DESC EMPLOYEES;
DESC LOCATIONS;
DESC DEPARTMENTS;
DESC LOCATIONS;

SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, LAST_NAME) AS NAME, SALARY,
       DEPARTMENT_NAME, CITY
FROM EMPLOYEES E
INNER JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
INNER JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID
WHERE JOB_ID = 'SA_MAN';
/*
문제 8.
-- employees, jobs 테이블을 조인 지정하고 job_title이 'Stock Manager',
'Stock Clerk'인 직원 정보만
출력하세요.
*/
SELECT *
  FROM EMPLOYEES E
INNER JOIN JOBS J
ON E.JOB_ID = J.JOB_ID
WHERE JOB_TITLE IN ('Stock Manager', 'Stock Clerk');

/*
문제 9.
-- departments 테이블에서 직원이 없는 부서를 찾아 출력하세요. LEFT OUTER JOIN 사용
*/
SELECT *
  FROM DEPARTMENTS D
LEFT OUTER JOIN EMPLOYEES E
ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE EMPLOYEE_ID IS NULL;


/*문제 10.
-join을 이용해서 사원의 이름과 그 사원의 매니저 이름을 출력하세요
힌트) EMPLOYEES 테이블과 EMPLOYEES 테이블을 조인하세요.
*/
SELECT CONCAT(E.FIRST_NAME, E.LAST_NAME) AS NAME,
       CONCAT(E2.FIRST_NAME, E2.LAST_NAME) AS MANAGER_NAME
  FROM EMPLOYEES E
LEFT OUTER JOIN EMPLOYEES E2
ON E.MANAGER_ID = E2.EMPLOYEE_ID;

SELECT 1300 - '1500',
       '1300' - 1500,
       '1300' - '1500'
  FROM DUAL;


SELECT TO_NUMBER('1,300', '999,999') - TO_NUMBER('1,500', '999,999')
  FROM DUAL;
/*문제 11.
--6. EMPLOYEES 테이블에서 left join하여 관리자(매니저)와,
매니저의 이름, 매니저의 급여 까지 출력하세요
--매니저 아이디가 없는 사람은 배제하고 급여는 역순으로 출력하세요
*/
SELECT DISTINCT CONCAT(E2.FIRST_NAME, E2.LAST_NAME) AS NAME,
       E2.SALARY
  FROM EMPLOYEES E
INNER JOIN EMPLOYEES E2
ON E.MANAGER_ID = E2.EMPLOYEE_ID
ORDER BY E2.SALARY DESC; 

SELECT TO_DATE('2018-07-14', 'YYYY-MM-DD'),
       TO_DATE('20180714', 'YYYY-MM-DD')
  FROM DUAL;
  
  
SELECT SALARY + SALARY * NVL(COMMISSION_PCT, 0) AS REVISED_SALARY
  FROM EMPLOYEES;
  
SELECT 
  
  