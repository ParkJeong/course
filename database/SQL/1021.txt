PL/SQL
절차형 SQL


/*
절차형 SQL문
오라클에서 제공하는 프로그래밍 같은 기능
쿼리문을 순서대로 어떤 동작을 일괄처리하기 위해서 사용된다.

절차형 SQL문은 필요한 코드부분만 선택해서 F5로 컴파일시킨다.
*/

--오라클 접속시 출력구문을 사용할 수 있게 변경
SET SERVEROUTPUT ON;
DECLARE --변수를 선언하는 부분
    V_NUM NUMBER; -- 숫자는 크기가 지정되지 않아도 된다.
BEGIN
    V_NUM := 100;
    DBMS_OUTPUT.put_line(V_NUM);-- DBMS + CTRL+SPACE
    
END;

/*
일반 SQL문에서 사용하는 모든 연산자가 사용가능하다.
특별한 연산자 ** 제곱

*/

DECLARE
    A NUMBER := (1 + 2) ** 2;
BEGIN
    DBMS_OUTPUT.PUT_LINE('A는 ' || A);
    DBMS_OUTPUT.PUT_LINE(CONCAT('A는 ' ,A));
END;

/*
--DML문
DDL사용이 불가능, 
일반적인 SQL문의 SELECT 문을 사용한다.
SELECT절 아래에는 INTO절을 이용해서 변수를 할당.
*/

DECLARE
    V_EMP_NAME VARCHAR2(50); -- 문자열은 길이제약을 반드시 해야한다.
    V_DEP_NAME VARCHAR2(50);
BEGIN
    SELECT LAST_NAME, DEPARTMENT_NAME
      INTO V_EMP_NAME, V_DEP_NAME --INTO 절에서 변수에 할당
      FROM EMPLOYEES E
      LEFT OUTER JOIN DEPARTMENTS D
      ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
      WHERE EMPLOYEE_ID = 100;
      
    DBMS_OUTPUT.put_line(V_EMP_NAME);
    DBMS_OUTPUT.put_line(V_DEP_NAME);
END;

-- F5는 스크립트 전체를 실행한다.
-- 해당 SQL파일 전체 코드를 실행한다.

/*
TYPE 키워드
해당 테이블의 같은 타입의 칼럼을 변수타입으로 선언하려면
테이블.칼럼명%TYPE
*/

DECLARE
    V_EMP_NAME EMPLOYEES.LAST_NAME%TYPE;
    V_DEP_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE;
BEGIN
    SELECT E.LAST_NAME, D.DEPARTMENT_NAME
    INTO V_EMP_NAME, V_DEP_NAME
      FROM EMPLOYEES E
    LEFT OUTER JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
    WHERE EMPLOYEE_ID = 100;
    
    DBMS_OUTPUT.put_line(V_EMP_NAME);
    DBMS_OUTPUT.put_line(V_DEP_NAME);
    
    INSERT INTO EMP_TEST
    VALUES(V_EMP_NAME, V_DEP_NAME);
END;

SELECT *
  FROM EMP_TEST;
    
CREATE TABLE EMP_TEST(
    EMP_NAME VARCHAR2(50),
    DEP_NAME VARCHAR2(50)
);


-- 1. 단순 출력문으로 3 X 1 = 3 문자열을 출력하세요
BEGIN
    DBMS_OUTPUT.PUT_LINE('3 X 1 = 3');
END;

-- 2. 사원 테이블에서 201번의 사원의 이름과 
--이메일 주소를 출력하는 익명 블록을 생성하면 된다.
SELECT *
  FROM EMPLOYEES;

DECLARE
    EMP_NAME EMPLOYEES.LAST_NAME%TYPE;
    EMAIL EMPLOYEES.EMAIL%TYPE;
BEGIN
    SELECT LAST_NAME, EMAIL
    INTO EMP_NAME, EMAIL
      FROM EMPLOYEES
     WHERE EMPLOYEE_ID = 201;
     
    DBMS_OUTPUT.put_line(CONCAT('이름: ', EMP_NAME));
    DBMS_OUTPUT.put_line('이메일: ' || EMAIL);
END;

-- 3. 사원테이블에서 사원번호가 가장 큰 사원을 찾은 후에
-- 이 번호 +1번으로 아래 사원을 EMPS 테이블에 추가
-- 이름-STEVEN, 이메일-STEVENJOBS, 입사일-오늘날짜,
-- JOB_ID - CEO
DECLARE
    EMPNO EMPLOYEES.EMPLOYEE_ID%TYPE;
BEGIN
    SELECT MAX(EMPLOYEE_ID)
      INTO EMPNO
      FROM EMPLOYEES;
    
    INSERT INTO EMPS(EMPLOYEE_ID, LAST_NAME, EMAIL, HIRE_DATE, JOB_ID)
    VALUES(EMPNO + 1, 'steven', 'stevenjobs', SYSDATE, 'CEO');
END;

CREATE TABLE EMPS
    AS (SELECT *
          FROM EMPLOYEES
         WHERE 1 <> 1);


--랜덤수 뽑기

DECLARE
    --DBMS_RANDOM.VALUE()는 0~10미만 랜덤 실수
    V_NUM NUMBER := ROUND(DBMS_RANDOM.VALUE(0, 10));
    -- 0~10까지 랜덤수

BEGIN 
    DBMS_OUTPUT.PUT_LINE(V_NUM);
END;

/
--IF문
DECLARE
    V_NUM1 NUMBER := 1;
    V_NUM2 NUMBER := 2;
BEGIN
    IF V_NUM1 > V_NUM2 THEN -- IF구문의 시작
        DBMS_OUTPUT.PUT_LINE(V_NUM1 || '이 큰 수');
    ELSE
        DBMS_OUTPUT.PUT_LINE(V_NUM2 || '이 큰 수');
    END IF; -- IF구문의 끝
END;
/
-- ELS IF문
-- DEPARTMENT
DECLARE
    V_SALARY NUMBER := 0;
    V_DEPARTMENT_ID NUMBER := 0;
BEGIN
    --선언된 변수 값을 변경이 가능
    V_DEPARTMENT_ID := ROUND(DBMS_RANDOM.VALUE(10, 110), -1);

    SELECT SALARY
      INTO V_SALARY
      FROM EMPLOYEES
     WHERE DEPARTMENT_ID = V_DEPARTMENT_ID AND ROWNUM = 1;
     
     IF V_SALARY <= 5000 THEN
        DBMS_OUTPUT.PUT_LINE('낮음');
     ELSIF V_SALARY <= 9000 THEN
        DBMS_OUTPUT.PUT_LINE('중간');
     ELSE
        DBMS_OUTPUT.PUT_LINE('높음');
     END IF;
     
     -- CASE 구문
     CASE WHEN V_SALARY <= 5000  THEN
            DBMS_OUTPUT.PUT_LINE('낮음');
          WHEN V_SALARY <= 9000  THEN
            DBMS_OUTPUT.PUT_LINE('중간');
          ELSE -- DEFAULT문
            DBMS_OUTPUT.PUT_LINE('높음');
     END CASE;
END;


--WHILE문
/
DECLARE
    V_DAN NUMBER := 3;
    V_COUNT NUMBER := 1;
BEGIN
    WHILE V_COUNT <= 9
    LOOP
        DBMS_OUTPUT.PUT_LINE(V_DAN || ' X ' || V_COUNT || ' = ' || V_DAN * V_COUNT);
        V_COUNT := V_COUNT + 1;
    END LOOP;
END;
/
DECLARE
    V_COUNT NUMBER := 1;
BEGIN
    WHILE V_COUNT <= 10
    LOOP
        DBMS_OUTPUT.PUT_LINE(V_COUNT);
        
        EXIT WHEN V_COUNT = 5;
        
        V_COUNT := V_COUNT + 1;
    END LOOP;
END;
/
-- FOR문
BEGIN
    FOR I IN 1..9 -- 1~9까지
    LOOP
        DBMS_OUTPUT.PUT_LINE(I);
    END LOOP;
END;
/

-- CONTINUE문
-- EXIT문
BEGIN
    FOR I IN 1..9
    LOOP
        CONTINUE WHEN I = 5;
	EXIT WHEN I = 7;
        DBMS_OUTPUT.PUT_LINE(I);
    END LOOP;
END;
/
DECLARE
    I NUMBER;
BEGIN
    I := 1;
    WHILE I <= 9
    LOOP
        FOR J IN 1..9
        LOOP
            DBMS_OUTPUT.PUT_LINE(I || ' X ' || J || ' = ' || I * J);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('');
        I := I + 1;
    END LOOP;
END;
/

/*
프로시저 생성
IN 외부로부터 입력받는 파라미터

CREATE OR REPLACE PROCEDURE 프로시저이름(
    입력 파라미터
)
IS
-- 변수 선언 영역
BEGIN
END;

*/
CREATE OR REPLACE PROCEDURE NEW_JOB_PROC(
    P_JOB_ID IN JOBS.JOB_ID%TYPE,
    P_JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
    P_MIN_SALARY IN JOBS.MIN_SALARY%TYPE,
    P_MAX_SALARY IN JOBS.MAX_SALARY%TYPE
)
IS
BEGIN
    INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
    VALUES(P_JOB_ID, P_JOB_TITLE, P_MIN_SALARY, P_MAX_SALARY);
    
    COMMIT; -- 커밋
END;
/


--프로시저 실행

EXECUTE NEW_JOB_PROC('JOBS1', 'TEST...', 1000, 5000);
EXECUTE NEW_JOB_PROC('JOBS2', 'TEST2...', 3000, 10000);

/

-- 프로시저 수정은 동일한 이름으로 수정
CREATE OR REPLACE PROCEDURE NEW_JOB_PROC(
    P_JOB_ID IN JOBS.JOB_ID%TYPE,
    P_JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
    P_MIN_SALARY IN JOBS.MIN_SALARY%TYPE := 10, -- 기본값 지정
    P_MAX_SALARY IN JOBS.MAX_SALARY%TYPE DEFAULT 100 -- 기본값 지정
)
IS
    V_COUNT NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM JOBS
     WHERE JOB_ID = P_JOB_ID;
     
    IF V_COUNT = 0 THEN
        INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
        VALUES(P_JOB_ID, P_JOB_TITLE, P_MIN_SALARY, P_MAX_SALARY);
    ELSE
        UPDATE JOBS
           SET JOB_TITLE  = P_JOB_TITLE,
               MIN_SALARY = P_MIN_SALARY,
               MAX_SALARY = P_MAX_SALARY
         WHERE JOB_ID = P_JOB_ID;
    END IF;
END;
/




-- OUT 매개변수
-- OUT 변수를 사용하는 프로시저는 익명블록에서만 실행을 한다.
CREATE OR REPLACE PROCEDURE NEW_JOB_PROC02(
    P_JOB_ID IN JOBS.JOB_ID%TYPE,
    P_JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
    P_MIN_SALARY IN JOBS.MIN_SALARY%TYPE := 0,
    P_MAX_SALARY IN JOBS.MAX_sALARY%TYPE DEFAULT 100,
    P_RESULT OUT VARCHAR2 --출력을 위한 변수
)
IS
    V_COUNT NUMBER := 0;
    V_RESULT VARCHAR2(100) := '값이 없어서 INSERT처리 되었습니다.';
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM JOBS
     WHERE JOB_ID = P_JOB_ID;
     
    IF V_COUNT = 0 THEN
        INSERT INTO JOBS
        VALUES (P_JOB_ID, P_JOB_TITLE, P_MIN_SALARY, P_MAX_SALARY);
    ELSE -- 필요한 결과 추출
        SELECT P_JOB_ID || '의 최대연봉:' || MAX_SALARY || ', 최소연봉:' || MIN_SALARY
          INTO V_RESULT
          FROM JOBS
         WHERE JOB_ID = P_JOB_ID;
    END IF;
    
    P_RESULT := V_RESULT; -- OUT변수에 결과할당
END;
/

--OUT 프로시저의 실행
DECLARE
    STR VARCHAR2(100); -- 반드시 문자열 크기 지정 
BEGIN
    NEW_JOB_PROC02('SM_JOB1', 'SAMPLE JOB1', 2000, 6000, STR);
    DBMS_OUTPUT.put_line(STR);
    NEW_JOB_PROC02('CEO', 'SAMPLE CEO1', 10000, 90000, STR);
    DBMS_OUTPUT.put_line(STR);
END;
/

-- IN OUT 처리형태
CREATE OR REPLACE PROCEDURE TESTPROC(
    -- IN은 DEFAULT이지만 웬만하면 써주자
    P_VAR1 VARCHAR2,
    -- OUT변수는 프로시저가 끝나기 전까지 값의 할당이 안됨
    P_VAR2 OUT VARCHAR2,
    -- IN, OUT은 둘 다 사용이 가능
    P_VAR3 IN OUT VARCHAR2
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE(P_VAR1);
    DBMS_OUTPUT.PUT_LINE(P_VAR2);
    DBMS_OUTPUT.PUT_LINE(P_VAR3);
    
    --P_VAR1 := '결과1';
    P_VAR2 := '결과2';
    P_VAR3 := '결과3';
END;
/

DECLARE
    VAR1 VARCHAR2(50) := 'A';
    VAR2 VARCHAR2(50) := 'B';
    VAR3 VARCHAR2(50) := 'C';
BEGIN
    TESTPROC(VAR1, VAR2, VAR3);
    DBMS_OUTPUT.put_line('-------------');
    DBMS_OUTPUT.put_line(VAR1);
    DBMS_OUTPUT.put_line(VAR2);
    DBMS_OUTPUT.put_line(VAR3);
END;
/



--RETURN 구문
/*
1.EMPLOYEES에서 JOB_ID만 IN변수로 입력받아서,
해당 아이디가 있는지 확인, 없다면 
단순히 프로시저 안에서 출력만 해준다.

2. JOB_ID가 있다면, 동일한 JOB_ID를 가진 급여의 합계를출력
*/
CREATE OR REPLACE PROCEDURE TEST_PROC(
    P_JOB_ID IN EMPLOYEES.JOB_ID%TYPE,
    P_TOTAL_SAL OUT NUMBER
)
IS
    V_COUNT NUMBER := 0;
BEGIN
    SELECT COUNT(*)
      INTO V_COUNT
      FROM EMPLOYEES
     WHERE JOB_ID = P_JOB_ID;
     
    IF V_COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE(P_JOB_ID || '가 없습니다.');
    ELSE
        SELECT SUM(SALARY)
          INTO P_TOTAL_SAL
          FROM EMPLOYEES
         WHERE JOB_ID = P_JOB_ID;
    END IF;
    
END;
/

DECLARE
    SAL NUMBER;
BEGIN
    TEST_PROC('IT_PROG', SAL);
    DBMS_OUTPUT.put_line(SAL);
    TEST_PROC('IT_PROGDD', SAL);
    DBMS_OUTPUT.put_line(SAL);
END;
/









