DML
Data Manipulation Language

DML 문장은 다음의 경우에 실행된다.
테이블에 새로운 행을 추가할 때
테이블에 있는 기존의 행을 변경할 때
테이블로부터 기존의 행을 제거할 때


DML은 다음 3가지 구문을 포함한다.
새로운 행을 데이터베이스에 추가하는 INSERT 문
기존 행을 수정하기 위한 UPDATE문
기존 행을 삭제하기 위한 DELETE문


DML 구문의 실행을 완전히 보장해야 할 필요가 있다. 이를 위한 트랜잭션이 필요하다. 작업의 논리적인 단위 형태인 DML 문장의 모음을 트랜잭션이라고 한다.


INSERT 

INSERT문장을 실행하여 테이블에 새로운 행을 추가할 수 있다. VALUES 절을 가지는 이 문장은 테이블에 한번에 오직 하나의 행만을 추가한다.

INSERT INTO TABLE [COLUMN1[, COLUMN2, ...]]
VALUES 		   (VALUE1[, VALUE2, ...])

새로운 행을 삽입할 때 열을 지정하지 않을 경우 VALUES 절에는 테이블을 정의할 때의 순서와 타입에 맞게 모든 열들에 대한 입력정보가 포함되어 있어야 한다.

--1. INSERT 첫번째 방법(모든 칼럼 데이터를 한번에 지정)
INSERT INTO DEPARTMENTS
VALUES (280, 'Developer', NULL, 1700);

ROLLBACK; -- 실행지점을 뒤로 되돌림

--2. INSERT 두번째 방법(직접 칼럼을 지정하고 저장)
INSERT INTO DEPARTMENTS(DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID)
VALUES (280, '개발자', 1700);


--3. INSERT 세번째 방법(서브쿼리 이용)
VALUES 절을 사용하지 않는다.
서브쿼리의 열 수와 INSERT 절의 열 수는 일치해야 한다.
기존의 테이블로부터 값을 가져와 테이블에 추가하기 위해서 INSERT 문장을 사용할 수 있다. VALUES 절에서 서브쿼리를 사용할 수 있다.
여러 행을 한번에 추가할 수도 있다.

--3. 서브쿼리 구문으로 INSERT
--사본테이블 만들기
--WHERE 1=1 -> TRUE 데이터가 들어간다.
--WHERE 1=2 -> FALSE 데이터가 안들어간다. 테이블의 형식만 가져오기 위함인듯
CREATE TABLE MANAGERS AS
  SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, HIRE_dATE
    FROM EMPLOYEES
   WHERE 1=2;

INSERT INTO MANAGERS
  (EMPLOYEE_ID, FIRSt_NAME, JOB_ID, SALARY, HIRE_DATE)
  SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, HIRE_DATE
    FROM EMPLOYEES
   WHERE JOB_ID LIKE '%MAN';

INSERT INTO MANAGERS
  (EMPLOYEE_ID, FIRSt_NAME, JOB_ID, SALARY, HIRE_DATE)
  (SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, HIRE_DATE
    FROM EMPLOYEES
   WHERE JOB_ID LIKE '%MAN');




UPDATE
UPDATE 문장으로 기존의 행을 갱신한다.
필요하다면 하나 이상의 행을 갱신할 수 있다.

UPDATE 문장을 사용하여 기존의 행을 수정할 수 있다.

UPDATE TABLE
SET    COLUMN = VALUE[, COLUMN = VALUE, ...]
[WHERE CONDITION];

VALUE: 열에 대한 관련 값이나 서브쿼리이다.
CONDITION: 갱신할 행을 명시하고, 열 이름, 표현식, 상수, 서브쿼리 그리고 비교연산자로 구성된다.

UPDATE문의 WHERE조건에는 PK값을 주로 이용한다. 행을 확실히 구분해야 하기 때문이다.

UPDATE EMPS
SET    SALARY = 100000
WHERE EMPLOYEE_ID = 100;

UPDATE EMPS
   SET SALARY = SALARY * 1.1
 WHERE EMPLOYEE_ID = 100;

UPDATE EMPS
   SET PHONE_NUMBER = '031.123.1234',
       MANAGER_ID = 102
 WHERE EMPLOYEE_ID = 100;


UPDATE TABLE
   SET (COLUMN1, COLUMN2, ...) = 
       (SELECT COLUMN1, COLUMN2, ...
	  FROM TABLE
	 WHERE CONDITION)
 WHERE CONDITION;

UPDATE EMPS
   SET (SALARY, PHONE_NUMBER) =
       (SELECT SALARY, PHONE_NUMBER
          FROM EMPS
         WHERE EMPLOYEE_ID = 101)
 WHERE EMPLOYEE_ID = 100;



DELETE
DELETE 문장을 사용하여 테이블로부터 기존의 행을 제거할 수 있다.
참조 무결성 제약 조건에 주의해야 한다. 다른 테이블에서 참조되고 있는 레코드가 존재할 경우를 주의해야 한다.
삭제시에 반드시 조건절을 추가하도록하자.
다른 테이블에서 데이터를 참조하고 있으면 삭제가 불가능하다.

DELETE 문장을 사용하여 기존의 행을 제거한다.
DELETE [FROM] TABLE
[WHERE CONDITION];

행 삭제는 실행하기 전에 반드시 확인하는 습관을 가져라. 
ROLLBACK 명령으로 실행 취소가 가능하지만 그럴 경우 이전 트랜잭션 완료 이후 모든 변경 내용이 취소될 수 있다. 


+++ 외래키는 다른 테이블의 기본키 뿐만 아니라 자기 자신의 기본키도 참조할 수 있다.
ALTER TABLE EMPS
ADD (CONSTRAINT EMPS_EMP_ID_PK PRIMARY KEY(EMPLOYEE_ID),
     CONSTRAINT EMPS_MANAGER_FK FOREIGN KEY(MANAGER_ID)
                REFERENCES EMPS(EMPLOYEE_ID)
);


DELETE FROM DEPTS; -- 모든 행 삭제

DELETE FROM DEPTS
 WHERE DEPARTMENT_ID = 10;

--DELETE(서브쿼리)
DELETE FROM EMPS
 WHERE DEPARTMENT_ID = 
                     (SELECT DEPARTMENT_ID
                        FROM DEPTS
                       WHERE DEPARTMENT_NAME = 'Shipping');

모든 행을 삭제할 수 있는 것은 아니다. 무결성 제약조건을 위반하도록 레코드를 삭제하고자 한다면 에러가 발생하면서 삭제를 할 수 없다.

DELETE 하기 전에 SELECT문으로 확인하고 난 후에 DELETE해라.





MERGE

데이터베이스에 INSERT 또는 UPDATE 할 때에 데이터가 존재하는지 여부를 체크를 하고 존재하면 UPDATE를 하고, 존재하지 않으면 INSERT를 수행할 수 있게 한다.


/*
MERGE(테이블 수정 추가가 빈번한 경우에, 따로 저장할 테이블을 만들어 놓고,
        비교해서 추가, 수정 구문을 실행시켜주는 방식)
*/
MERGE INTO EMPS_IT A
  USING (SELECT *
           FROM EMPLOYEES
          WHERE JOB_ID = 'IT_PROG') B
  ON (A.EMPLOYEE_ID = B.EMPLOYEE_ID)
 WHEN MATCHED THEN
   UPDATE SET
    A.PHONE_NUMBER = B.PHONE_NUMBER,
    A.HIRE_DATE = B.HIRE_DATE,
    A.JOB_ID = B.JOB_ID,
    A.SALARY = B.SALARY,
    A.COMMISSION_PCT = B.COMMISSION_PCT,
    A.MANAGER_ID = B.MANAGER_ID,
    A.DEPARTMENT_ID = B.DEPARTMENT_ID
  --DELETE같은 구문도 넣을 수 있다.
 WHEN NOT MATCHED THEN
   INSERT VALUES
    (B.EMPLOYEE_ID, B.FIRST_NAME, B.LAST_NAME, B.EMAIL,
     B.PHONE_NUMBER, B.HIRE_DATE, B.JOB_ID, B.SALARY,
     B.COMMISSION_PCT, B.MANAGER_ID, B.DEPARTMENT_ID);




CTAS(사본테이블 Create Table As Select)
현재 있는 테이블과 같은 구조를 갖는 테이블을 생성할 수 있도록 한다. CTAS 구문을 이용한 테이블 복제 시 NOT NULL 제약조건을 제외한 다른 제약조건은 복사되지 않는다.
CREATE TABLE TABLE AS SELECT STATEMENT

AS SELECT STATEMENT
테이블이 만들어질 서브쿼리를 입력한다. SELECT 문장의 WHERE절이 항상 FALSE일 경우 데이터는 포함하지 않고 구조만 갖는 테이블을 생성한다.

다음 구문은 SELECT한 결과대로 테이블의 구조를 생성하고 데이터도 저장한다
CREATE TABLE EMP2 AS SELECT * FROM EMPLOYEES;

다음 구문은 데이터는 갖지 않고 구조만 갖는 테이블을 생성한다. 서브쿼리 WHERE 절 조건식의 결과는 항상 FALSE이다.
CREATE TABLE EMP3 AS SELECT * FROM EMPLOYEES WHERE 1=2;




