SET SERVEROUTPUT ON;
/

--예외처리 구문 EXCEPTION WHEN OTHERS THEN
DECLARE
    V_NUM NUMBER := 0;
BEGIN
    V_NUM := 10/0;
EXCEPTION WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('0으로 나눌 수 없다.');
END;
/

--TRIGGER

/*
TRIGGER는 테이블에 부착된 형태로서,
INSERT, UPDATE, DELETE 작업이 수행될 때
특정 코드가 동작되도록 하는 구문이다.
*/

CREATE TABLE TBL_TEST(
    ID NUMBER(10),
    TEXT VARCHAR2(50)
);
/
CREATE OR REPLACE TRIGGER TRG_TEST
    AFTER DELETE OR UPDATE -- 삭제, 수정 이후
    ON TBL_TEST -- 부착할 테이블
    FOR EACH ROW -- 각 행에 다 적용
BEGIN
    DBMS_OUTPUT.PUT_LINE('트리거 실행');
END;
/

INSERT INTO TBL_TEST
VALUES(20, '홍길동2');

SELECT *
  FROM TBL_TEST;

UPDATE TBL_TEST
SET TEXT = '이순신'
WHERE ID = 20;

DELETE TBL_TEST
WHERE ID = 20;


/*
TRIGGER 종류가 3가지가 있다.
BEFORE - DML(INSERT, UPDATE, DELETE) 실행 전에 동작하는 트리거

AFTER  - DML(INSERT, UPDATE, DELETE) 실행 후에 동작하는 트리거

INSTEAD OF - DML(INSERT, UPDATE, DELETE) 작업 이전에 VIEW에만 부착되서 실행되는 트리거

*/

-- 예를 들어 회원테이블에 UPDATE, DELETE작업이 수행되면, 이력을 남겨놓는다.
CREATE TABLE TBL_USER(
    ID VARCHAR2(50) PRIMARY KEY,
    NAME VARCHAR2(50),
    ADDRESS VARCHAR2(50)
);

CREATE TABLE TBL_USER_BACKUP (
    ID VARCHAR2(50),
    NAME VARCHAR2(50),
    ADDRESS VARCHAR2(50),
    UPDATE_DATE DATE DEFAULT SYSDATE,
    M_TYPE CHAR(1), --변경된 타입
    M_USER VARCHAR2(50) --변경한 사용자
);

-- AFTER 트리거
/*
UPDATING  - UPDATE여부를 확인하는 시스템 변수
DELETING  - DELETE여부를 확인하는 시스템 변수
INSERTING - INSERT여부를 확인하는 시스템 변수
:OLD      - DML이 실행되기 전 데이터
:NEW      - DML이 실행된 후 데이터
USER()    - 현재 접속되어 있는 유저정보, 시스템 변수 
*/
CREATE OR REPLACE TRIGGER TRG_USER_BACKUP
    AFTER UPDATE OR DELETE
    ON TBL_USER
    FOR EACH ROW
DECLARE
    V_TYPE CHAR(1);
BEGIN
    IF UPDATING THEN 
        V_TYPE := 'U';
    ELSIF DELETING THEN
        V_TYPE := 'D';
    END IF;
    
    INSERT INTO TBL_USER_BACKUP
    VALUES(:OLD.ID, :OLD.NAME, :OLD.ADDRESS, SYSDATE, V_TYPE, USER());
END;
/

--확인
INSERT INTO TBL_USER
VALUES('TEST01', '홍길동', '서울');
INSERT INTO TBL_USER
VALUES('TEST02', '홍길자', '부산');
INSERT INTO TBL_USER
VALUES('TEST03', '이순신', '경기');

SELECT *
  FROM TBL_USER;
SELECT *
  FROM TBL_USER_BACKUP;

UPDATE TBL_USER
   SET ADDRESS = '제주'
 WHERE ID = 'TEST01';
 
DELETE TBL_USER
 WHERE ID = 'TEST02';
 
--BEFORE 트리거 - 테이블에 DML구문 실행 전
/
CREATE OR REPLACE TRIGGER TRG_USER_INSERT
  BEFORE INSERT
  ON TBL_USER
  FOR EACH ROW
DECLARE
    V_LENGTH NUMBER := LENGTH(:NEW.NAME);
BEGIN
       :NEW.NAME := RPAD(SUBSTR(:NEW.NAME, 1, 1), 5, '*');
END;
/

INSERT INTO TBL_USER
VALUES('TEST04', '이방원', '부산');

INSERT INTO TBL_USER
VALUES('TEST05', '이성계', '경기');

DELETE TBL_USER
WHERE ID = 'TEST05';

SELECT *
  FROM TBL_USER;

--트리거 활용
-- 주문상세 테이블에 INSERT(주문 상세 AFTER TRIGGER) -> 물품테이블 UPDATE 시킴

-- 주문 상세 테이블
CREATE TABLE ORDER_HISTORY(
    HISTORY_NO NUMBER(5) PRIMARY KEY,
    ORDER_NO NUMBER(5),
    PRODUCT_NO NUMBER(5),
    TOTAL NUMBER(10),
    PRICE NUMBER(10)
);

CREATE SEQUENCE ORDER_HISTORY_SEQ
    INCREMENT BY 1
    START WITH 1
    NOCYCLE
    NOCACHE;

CREATE SEQUENCE PRODUCT_SEQ NOCACHE;
CREATE TABLE PRODUCT(
    PRODUCT_NO NUMBER(5) PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(30),
    TOTAL NUMBER(10),
    PRICE NUMBER(10)
);

INSERT INTO PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '피자', 100, 10000);

INSERT INTO PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '치킨', 100, 15000);

INSERT INTO PRODUCT
VALUES(PRODUCT_SEQ.NEXTVAL, '햄버거', 100, 5000);

SELECT *
  FROM PRODUCT;
/  
CREATE OR REPLACE TRIGGER TRG_ORDER_HISTORY_INSERT
    AFTER INSERT
    ON ORDER_HISTORY
    FOR EACH ROW
DECLARE
    V_TOTAL NUMBER;
    V_PRODUCT_NO NUMBER;
BEGIN
    SELECT :NEW.TOTAL, :NEW.PRODUCT_NO
      INTO V_TOTAL, V_PRODUCT_NO
      FROM DUAL;
      
    UPDATE PRODUCT
       SET TOTAL = TOTAL - V_TOTAL
     WHERE PRODUCT_NO = V_PRODUCT_NO;
END;
/

INSERT INTO ORDER_HISTORY
VALUES(ORDER_HISTORY_SEQ.NEXTVAL, 50000, 1, 10, 10000);

INSERT INTO ORDER_HISTORY
VALUES(ORDER_HISTORY_SEQ.NEXTVAL, 50000, 2, 5, 15000);

INSERT INTO ORDER_HISTORY
VALUES(ORDER_HISTORY_SEQ.NEXTVAL, 50000, 3, 1, 5000);

SELECT * 
  FROM PRODUCT;
--프로시저 삭제
DROP PROCEDURE NEW_JOB_PROC;

;
SELECT JOB_ID, 
       COUNT(*) AS 직무별사원수, 
       SUM(SALARY) AS 직무별급여함, 
       AVG(SALARY) AS 직무별급여평균
  FROM EMPLOYEES
GROUP BY JOB_ID;

SELECT *
  FROM EMPLOYEES
GROUP BY JOB_ID;

CREATE TABLE EMP_CP AS SELECT * FROM EMPLOYEES;

UPDATE EMP_CP
   SET SALARY = 1000,
       JOB_ID = 'ABCDE',
       HIRE_DATE = SYSDATE
 WHERE JOB_ID = 'IT_PROG';
 
SELECT *
  FROM EMP_CP;


--프로시저 삭제
DROP PROCEDURE NEW_JOB_PROC;



