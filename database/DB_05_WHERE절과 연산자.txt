
DBA
DataBase Administrator
데이터베이스 관리자

ALTER USER SCOTT -- 1
IDENTIFIED BY tiger -- 2
ACCOUNT UNLOCK; -- 3

1. SCOTT 계정을 변경하겠다는 의미
2. 접속 비밀번호를 소문자 tiger로 지정한다는 의미
3. 계정을 사용 가능 상태(잠기지 않은 상태로) 전환한다는 의미

SQL*PLUS에 정상 접속해 있는 상태에서 CONN 명령어를 사용하여 다른 계정으로 재접속할 수 있다.

DESC
describe의 둘임말이다. 특정 테이블이 어떤 열로 구성되어 있는지 확인하는 데 사용한다. 
desc대신 describe 명령어도 사용할 수 있으며 이 둘은 같은 기능을 수행한다.

EXIT 명령어를 사용하면 오라클 데이터베이스 연결이 종료된다.

명령프롬프트에서 아래의 명령어 입력
SQLPLUS SCOTT/tiger
SQLPLUS에 SCOTT계정을 tiger라는 비밀번호로 로그인

셰어웨어는 샘플 프로그램이라고 생각하면 된다. 제품을 판매하기 전에 일부 기능을 일정 기간 동안 사용할 수 있도록 배포하는 것을 의미한다.
프리웨어 소프트웨어는 사용 및 복사 등의 제한이 없는 무료 소프트웨어를 의미한다.


WHERE절은 많은 데이터 중에서 어떤 조건에 일치하는 행만을 골라내어 조회하는데 사용한다.


 SELECT *
  FROM EMP
 WHERE DEPTNO = 30
  AND JOB = 'SALESMAN';


조건식에도 산술 연산자를 쓸 수 있다.
SELECT *
  FROM EMP
 WHERE SAL * 12 = 36000;


문자열을 비교할 때 영어 사전처럼 알파벳 순서로 문자열의 '대소'를 비교한다. 
조건식 ENAME >= 'F'는 ENAME 열 값의 첫 문자와 대문자 F를 비교했을 때 알파벳 순서상 F와 같거나 F보다 뒤에 있는 문자열을 출력하라는 의미이다.

SELECT *
  FROM EMP
 WHERE ENAME <= 'FORZ';

예를 들어 ENAME에 FIND 문자열이 있따고 가정하자.
FIND의 첫 문자는 F로 FORZ와 같지만, 두 번째 문자 I가 FORZ의 O보다 알파벳 순서상 빠르므로 WHERE절의 조건식에 해당하는 값이 된다.


 
SELECT *
  FROM EMP
 WHERE SAL != 3000;
 
SELECT *
  FROM EMP
 WHERE SAL <> 3000;
 
SELECT *
  FROM EMP
 WHERE SAL ^= 3000;
 
SELECT *
  FROM EMP
 WHERE NOT SAL = 3000;
 
실무에서는 <>를 많이 사용한다.

복잡한 조건식에서 정반대의 최종 결과를 원할 때, 조건 식을 일일이 수정하여 작성하는 것보다 NOT 연산자로 한 번에 뒤집어서 사용하는 것이 간편하고 SQL문 작성 시간도 줄일 수 있기 때문이다.

IN 연산자를 사용하면 특정 열에 해당하는 조건을 여러 개 지정할 수 있다.

SELECT * 
  FROM EMP
 WHERE JOB IN ('MANAGER', 'SALESMAN', 'CLERK');


SELECT *
  FROM EMP
 WHERE JOB != 'MANAGER'
   AND JOB <> 'SALESMAN'
   AND JOB ^= 'CLERK';
 
SELECT *
  FROM EMP
 WHERE JOB NOT IN ('MANAGER', 'SALESMAN', 'CLERK');


특정 열 값의 최소, 최고 범위를 지정하여 해당 범위 내의 데이터만 조회할 경우에 대소 비교 연산자 대신 BETWEEN A AND B 연산자를 사용하면 더 간단하게 표현할 수 있다.


SELECT *
  FROM EMP
 WHERE SAL >= 2000
   AND SAL <= 3000;
   
SELECT *
  FROM EMP
 WHERE SAL BETWEEN 2000 AND 3000;
 
SELECT *
  FROM EMP
 WHERE SAL NOT BETWEEN 2000 AND 3000;



LIKE 연산자는 일부 문자열이 포함된 데이터를 조회할 때 사용한다.
조건식에서 사용하는 %기호를 와일드 카드(wild card)라고 한다.
와일드 카드는 특정 문자 또는 문자열을 대체하거나 문자열 데이터의 패턴을 표기하는 특수문자이다.
LIKE 연산자와 함께 사용할 수 있는 와일드 카드는 _와 %이다.
_: 어떤 값이든 상관 없이 한 개의 문자 데이터를 의미
%: 길이와 상관없이(문자가 없는 경우도 포함) 모든 문자 데이터를 의미

_: 1개의 문자데이터
%:0개 이상의 문자데이터


-- 사원 이름에 AM이 포함되어 있는 사원 데이터 출력
SELECT *
  FROM EMP
 WHERE ENAME LIKE '%AM%';
 
-- 사원 이름에 AM이 포함되어 있지 않은 사원 데이터 출력
SELECT *
  FROM EMP
 WHERE ENAME NOT LIKE '%AM%';



와일드 카드 문자가 데이터 일부일 경우
데이터에 와일드 카드 기호로 사용되는 _나 % 문자가 데이터로 포함된 경우가 간혹 있다. ESCAPE절을 사용하면 _, %를 와일드 카드 기호가 아닌 데이터로서의 문자로 다루는 것이 가능하다.

SELECT *
  FROM SOME_TABLE
 WHERE SOME_COLUMN LIKE 'A\_A%' ESCAPE '\';

A\_A%에서 \ 문자 바로 뒤에 있는 _는 와일드 카드 기호로서가 아닌 데이터에 포함된 문자로 인식하라는 의미이다. ESCAPE문자 \는 ESCAPE절에서 지정할 수 있다. 그리고 \외 다른 문자도 지정하여 사용할 수 있다.
실무에서는 잘 안쓴다. 참고만하자


IS NULL 연산자
NULL은 데이터 값이 완전히 비어 있는 상태를 말한다. 숫자 0은 값 0이 존재한다는 뜻이다.
NULL은 '현재 무슨 값인지 확정되지 않은 상태'이거나 '값 자체가 존재하지 않는 상태'를 나타내는 데이터에 사용한다.

NULL + 100 -> NULL
NULL > 100 -> NULL
NULL = NULL -> NULL

WHERE 절은 조건식의 결과 값이 TRUE인 행만 출력하는데 연산 결과 값이 NULL이면 TRUE도 FALSE도 아니므로 출력하지 않는다.

IS NOT NULL
IS NULL


집합 연산자
SELECT문을 통해 데이터를 조회한 결과를 하나의 집합과 같이 다룰 수 있는 집합 연산자를 사용할 수 있다. 그리고 두 개 이상의 SELECT문의 결과 값을 연결할 때 사용한다.

주의할 점은 집합 연산자로 두 개의 SELECT문의 결과 값을 연결할 때 각 SELECT문이 출력하려는 열 개수와 각 열의 자료형이 순서별로 일치해야 한다는 것이다.

만약 연결하려는 두 SELECT문의 열 개수와 자료형이 같다면 서로 다른 테이블에서 조회하거나 조회하는 열 이름이 다른 것은 문제가 되지 않는다.
다만 최종 출력되는 열 이름은 먼저 작성한 SELECT문의 열 이름으로 표기된다.

UNION: 연결된 SELECT문의 결과 값을 합집합으로 묶어 준다. 중복을 허용하지 않는다.

UNION ALL: 연결된 SELECT문의 결과 값을 합집합으로 묶어 준다. 중복을 허용한다.

MINUS: 먼저 작성한 SELECT문의 결과 값에서 다음 SELECT문의 결과 값을 차집합 처리한다. 먼저 작성한 SELECT문의 결과 값 중 다음 SELECT문에 존재하지 않는 데이터만 출력된다.

INTERSECT: 먼저 작성한 SELECT 문과 다음 SELECT문의 결과 값이 같은 데이터만 출력된다. 교집합과 같은 의미다.

/* WHERE에서는 별칭을 통한 접근이 불가능하다.
-- 새로운 테이블을 만들어서 가져와야 한다.
-- WHERE에서의 조건식은 가능하면 연산식이 아닌 값을 넣도록 하자.
-- EX WHERE (GRADE * 10 - 4) > 5는 WHERE GRADE > 0.9로 고쳐쓰자

SELECT  - (2)
FROM    - (0)
WHERE   - (1)
GROUP BY- (3)
HAVING  - (4)
ORDER BY- (5)
WHERE절은 ALIAS로 변경된 별칭을 인지하지 못한다.
별칭의 인식은 GROUP BY절 이후부터 가능하다.
*/

