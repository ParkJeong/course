하나의 열에 출력 결과를 담는 다중행 함수
여러 행이 입력되어 하나의 행으로 결과가 출력되는 특징을 가지고 있다.
다중행 함수를 사용한 SELECT절에는 기본적으로 여러 행이 결과로 나올 수 있는 열을 함께 사용할 수 없다.

SUM: 지정한 데이터의 합 반환
SUM([DISTINCT, ALL 중하나를 선택하거나 아무 값도 지정하지 않음]
    (합계를 구할 열이나 연산자, 함수를 사용한 데이터))

SELECT SUM(DISTINCT SALARY),
       SUM(ALL SALARY),
       SUM(SALARY)
  FROM EMPLOYEES;


COUNT: 지정한 데이터의 개수 반환
COUNT 함수에 *을 사용하면 SELECT문의 결과 값으로 나온 행 데이터의 개수를 반환해준다.

COUNT([DISTINCT, ALL 중하나를 선택하거나 아무 값도 지정하지 않음]
    (개수를 구할 열이나 연산자, 함수를 사용한 데이터))
NULL 데이터는 반한 개수에서 제외된다.

SELECT COUNT(DISTINCT SALARY),
       COUNT(ALL SALARY),
       COUNT(SALARY)
  FROM EMPLOYEES;


MAX: 지정한 데이터 중 최댓값 반환
MAX([DISTINCT, ALL 중하나를 선택하거나 아무 값도 지정하지 않음]
    (최댓값을 구할 열이나 연산자, 함수를 사용한 데이터))

MIN: 지정한 데이터 중 최솟값 반환
MIN([DISTINCT, ALL 중하나를 선택하거나 아무 값도 지정하지 않음]
    (최솟값을 구할 열이나 연산자, 함수를 사용한 데이터))

AVG: 지정한 데이터의 평균값 반환
AVG([DISTINCT, ALL 중하나를 선택하거나 아무 값도 지정하지 않음]
    (평균 값을 구할 열이나 연산자, 함수를 사용한 데이터))

연산식의 경우 NULL을 무시하고 계산한다.




결과 값을 원하는 열로 묶어 출력하는 GROUP BY 절

GROUP BY절에 명시하는 열은 여러 개 지정할 수 있다. 먼저 지정한 열로 대그룹을 나누고 그 다음 지정한 열로 소그룹을 나눈다.
GROUP BY절에는 별칭 인식이 안된다.

SELECT DEPARTMENT_ID, JOB_ID, TRUNC(AVG(SALARY))
  FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
ORDER BY DEPARTMENT_ID, JOB_ID;


GROUP BY절을 사용하여 출력 데이터를 그룹화할 경우 유의해야 할점
다중행 함수를 사용하지 않은 일반 열은 GROUP BY절에 명시하지 않으면 SELECT 절에서 사용할 수 없다.


GROUP BY절에 조건을 줄 때 사용하는 HAVING절

GROUP BY절을 통해 그룹화된 결과 값의 범위를 제한하는 데 사용한다.

SELECT DEPARTMENT_ID, JOB_ID, AVG(SALARY)
  FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, JOB_ID
  HAVING AVG(SALARY) >= 2000
ORDER BY DEPARTMENT_ID, JOB_ID;


SELECT		5
FROM		1
WHERE		2
GROUP BY	3
HAVING		4
ORDER BY	6

FROM(ON, JOIN) -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY 순으로 실행된다.



그룹화와 관련된 여러 함수

ROLLUP, CUBE, GROUPING SETS 함수

GROUP BY절에 지정할 수 있는 특수 함수이다. 

GROUP BY ROLLUP [그룹화 열 지정(여러 개 지정 가능)]


SELECT DEPARTMENT_ID, JOB_ID, COUNT(*), MAX(SALARY), SUM(SALARY), AVG(SALARY)
  FROM EMPLOYEES
GROUP BY ROLLUP(DEPARTMENT_ID, JOB_ID);

각 부서의 직책별 데이터-> 각 부서별 데이터 -> 테이블 전체 데이터 순으로 데이터를 출력
N개의 열을 지정하면 N+1개의 조합이 출력된다.

ROLLUP(A, B, C)
1. A 그룹별 B 그룹별 C 그룹에 해당하는 결과 출력
2. A 그룹별 B 그룹에 해당하는 결과 출력
3. A 그룹에 해당하는 결과 출력
4. 전체 데이터 결과 출력

A>B>C에서 끝에서부터 1개씩 열을 없애나가면서 결과 출력


GROUP BY CUBE [그룹화 열 지정(여러 개 지정 가능)]


SELECT DEPARTMENT_ID, JOB_ID, COUNT(*), MAX(SALARY), SUM(SALARY), AVG(SALARY)
  FROM EMPLOYEES
GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)
ORDER BY DEPARTMENT_ID, JOB_ID;

지정한 모든 열에서 가능한 조합의 결과를 모두 출력


CUBE(A, B, C)
1. A 그룹별 B 그룹별 C 그룹에 해당하는 결과 출력
2. A 그룹별 B 그룹의 결과 출력
3. B 그룹별 C 그룹의 결과 출력
4. A 그룹별 C 그룹의 결과 출력
5. A 그룹 결과
6. B 그룹
7. C 그룹
8. 전체 데이터 결과

A>B>C 순서는 정해져 있고 여기서 각 열을 선택하는지 안하는지를 통해서 결정
2*2*2
N개 열을 지정하면 2^N개 조합이 출력 된다.

/*
부서별 직무
부서별
*/
SELECT DEPARTMENT_ID, JOB_ID, COUNT(*)
  FROM EMPLOYEES
GROUP BY DEPARTMENT_ID, ROLLUP(JOB_ID);

/*
직무별 부서
직무별
*/
SELECT DEPARTMENT_ID, JOB_ID, COUNT(*)
  FROM EMPLOYEES
GROUP BY JOB_ID, ROLLUP(DEPARTMENT_ID);


GROUPING SETS 함수

같은 수준의 그룹화 열이 여러 개일 때 각 열별 그룹화를 통해 결과 값을 출력하는 데 사용한다.

GROUP BY GROUPING SETS [그룹화 열 지정(여러 개 지정 가능)]

지정한 모든 열을 각각 대그룹으로 처리하여 출력한다.
그룹화를 위해 지정한 열이 계층적으로 분류되지 않고 각가 따로 그룹화한 후 연산을 수행

/*
부서별
직업별
2가지로 각각 그룹화 한 것이 나온다.
*/

SELECT DEPARTMENT_ID, JOB_ID, COUNT(*)
  FROM EMPLOYEES
GROUP BY GROUPING SETS(DEPARTMENT_ID, JOB_ID)
ORDER BY DEPARTMENT_ID, JOB_ID;



그룹화 함수
그룹화 데이터의 식별이 쉽고 가독성을 높이기 위한 목적으로 사용한다.

GROUPING 함수
GROUPING 함수는 ROLLUP 또는 CUBE함수를 사용한 GROUP BY절에 그룹화 대상으로 지정한 열이 그룹화된 상태로 결과가 집계되었는지 확인하는 데 사용한다.

0은 GROUPING 함수에 지정한 열이 그룹화되었음을 의미하고 1은 그룹화되지 않은 데이터를 의미한다.
맨 마지막 행의 데이터는 모든 열을 그룹화하지 않은 상태 이므로 모두 1이 나온다.


SELECT DECODE(GROUPING(DEPARTMENT_ID), 1, 'ALL_DEPARTMENT', DEPARTMENT_ID) AS DEPARTMENT_ID,
       DECODE(GROUPING(JOB_ID), 1, 'ALL_JOB', JOB_ID) AS JOB_ID,
       COUNT(*), MAX(SALARY), SUM(SALARY), AVG(SALARY)
  FROM EMPLOYEES
GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)
ORDER BY DEPARTMENT_ID, JOB_ID;


GROUPING_ID 함수

GROUPING 함수와 마찬가지로 ROLLUP 또는 CUBE 함수로 연산할 때 특정 열이 그룹화되었는지를 출력하는 함수이다.
그룹화 여부를 검사할 열을 하나씩 지정하는 GROUPING 함수와 달리 GROUPING_ID 함수는 한 번에 여러열을 지정할 수 있다.
GROUPING_ID 함수를 사용한 결과는 그룹화 비트 벡터 값으로 나타낸다.
그룹화 된 열	그룹화 비트 벡터	최종 결과
   A,B 		     0 0		   0
    A 		     0 1		   1
    B 		     1 0		   2
   없음 	     1 1		   3


LISTAGG 함수
그룹에 속해 있는 데이터를 가로로 나열할 때 사용한다.
가로로 나열할 열을 지정하고 필요하다면 각 데이터 사이에 넣을 구분자를 지정할 수 있다.그리고 가로로 출력할 데이터를 정렬할 수도 있다. 정렬은 기존 ORDER BY절과 사용법이 같다. 왼쪽부터 오른쪽 방향으로 지정한 정렬 옵션에 따라 데이터가 가지런히 나열된다.

LISTAGG(나열할 열[, 각 데이터를 구분하는 구분자])
[WITHIN GROUP(ORDER BY 나열할 열의 정렬 기준 열)]

SELECT DEPARTMENT_ID,
       LISTAGG(FIRST_NAME, ', ')
       WITHIN GROUP(ORDER BY SALARY DESC) AS ENAMES
  FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;


PIVOT, UNPIVOT 함수

PIVOT함수는 기존 테이블 행을 열로 바꾸고 UNPIVOT 함수는 기존 테이블 열을 행으로 바꿔서 출력한다.

PIVOT 함수 내에서 실제 출력 데이터를 먼저 명시한다. 가로줄로 표기할 열을 FOR로 명시한 후에 IN 안에 출력하려는 열 데이터를 지정한다. 출력하려는 열 데이터의 이름에 별칭을 설정할 수도 있다.

SELECT *
  FROM(SELECT JOB_ID, DEPARTMENT_ID, SALARY
         FROM EMPLOYEES)
  PIVOT(MAX(SALARY)
        FOR JOB_ID IN ('CLERK' AS CLERK,
                       'SA_MAN' AS SALESMAN)
        )
ORDER BY DEPARTMENT_ID;


SELECT DEPARTMENT_ID,
       MAX(DECODE(JOB_ID, 'CLERK', SALARY)) AS CLERK,
       MAX(DECODE(JOB_ID, 'SA_MAN', SALARY)) AS SALESMAN
  FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID;

나중에 추가로 필요한 함수 및 여러 문법은 그때그때 오라클에서 제공하는 공식 문서나 관련 자료 등을 활용하여 익히자.









