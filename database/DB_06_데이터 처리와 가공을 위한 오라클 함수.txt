오라클 함수는 함수를 제공한 주체를 기준으로 오라클에서 기본으로 제공하고 있는 내장 함수(built-in function)와 사용자가 필요에 의해 직접 정의한 사용자 정의 함수(user-defined function)로 나뉜다.



내장 함수는 입력 방식에 따라 데이터 처리에 사용하는 행이 나뉜다. 데이터가 한 행씩 입력되고 입력된 한 행당 결과가 하나씩 나오는 함수를 단일행 함수(single-row function)라고 한다. 반면에 여러 행이 입력되어 하나의 행으로 결과가 반환되는 함수를 다중행 함수(multi-row function)라고 한다. 




문자 데이터를 가공하는 문자 함수

UPPER: 괄호 안 문자 데이터를 모두 대문자로 변환하여 반환
LOWER: 괄호 안 문자 데이터를 모두 소문자로 변환하여 반환
INITCAP: 괄호 안 문자 데이터 중 첫 글자는 대문자로, 나머지 문자를 소문자로 변환 후 반환

SELECT UPPER('HeLLo'), LOWER('HeLLo'), INITCAP('HeLLo')
  FROM DUAL;
// HELLO	hello	Hello

대,소문자 상관없이 문자열을 찾을 때 쓰면 좋다.
 
SELECT *
  FROM EMPLOYEES
 WHERE UPPER(FIRST_NAME) LIKE UPPER('%st%');

실무에서는 일반적으로 대,소문자가 다른 문자열 데이터를 검색할 때 INITCAP함수보다 UPPER나 LOWER함수를 많이 쓴다.



문자열 길이를 구하는 LENGTH함수

SELECT FIRST_NAME, LENGTH(FIRST_NAME)
  FROM EMPLOYEES
WHERE LENGTH(FIRST_NAME) >= 6;


문자열 데이터 바이트 수를 구하는 LENGTHB함수
SELECT LENGTH('컴퓨터'), LENGTHB('컴퓨터')
  FROM DUAL;
// 3, 9 한글을 정렬하려면 한글의 1글자를 3바이트씩 저장해야한다

DUAL 테이블은 오라클의 최고 권한 관리자 계정인 SYS소유의 테이블이다.
더미테이블이다.
임시 연산이나 함수의 결과 값 확인 용도로 종종 사용된다.



문자열 일부를 추출하는 SUBSTR함수

SUBSTR(문자열 데이터, 시작 위치, 추출 위치)
문자열 데이터의 시작 위치부터 추출 길이만큼 추출한다. 시작위치가 음수일 경우에는 마지막 위치부터 거슬러 올라간 위치에서 시작한다.


SUBSTR(문자열 데이터, 시작 위치)
문자열 데이터의 시작 위치부터 문자열 데이터 끝까지 추출한다. 시작 위치가 음수일 경우에는 마지막 위치부터 거슬러 올라간 위치에서 끝까지 추출한다.

1 2 3 4 5
C L E R K


SELECT SUBSTR(JOB_ID, 1, 2), -- 첫 번째 글자부터 두 글자 출력 // CL
       SUBSTR(JOB_ID, 3, 1), -- 세 번째 글자부터 한 글자 출력 // E
       SUBSTR(JOB_ID, 5),    -- 다섯 번째 글자부터 끝까지 출력 // K
       JOB_ID
  FROM EMPLOYEES;

다른 함수의 결과 값을 SUBSTR 함수의 입력 값으로 사용할 수도 있다. SUBSTR 함수 안에 다음과 같이 LENGTH 함수를 사용하는 경우도 종종 있다.

-5 -4 -3 -2 -1
C  L  E  R  K

SELECT JOB_ID,
       SUBSTR(JOB_ID, -LENGTH(JOB_ID)), -- -5자리(CLERK의 -LENGTH(JOB_ID))부터 끝까지 출력 // CLERK
       SUBSTR(JOB_ID, -LENGTH(JOB_ID), 2), -- -5자리(CLERK의 -LENGTH(JOB_ID))부터 두 글자 출력 // CL
       SUBSTR(JOB_ID, -3) -- -3자리부터 끝까지 출력 // ERK
  FROM EMPLOYEES;



문자열 데이터 안에서 특정 문자 위치를 찾는 INSTR 함수

문자열 데이터 안에 특정 문자나 문자열이 어디에 포함되어 있는지를 알고자 할 때 사용. 없으면 0을 반환

INSTR(대상 문자열 데이터,
      위치를 찾으려는 부분 문자,
      [위치 찾기를 시작할 대상 문자열 데이터 위치, 기본값은 1],
      [시작 위치에서 찾으려는 문자가 몇 번째인지 지정, 기본값은 1])

1 2 3 4 5 6 7 8 9 10 11 12 13 14
H E L L O ,   0 R  A  C  L  E  !

SELECT INSTR('HELLO, ORACLE!', 'L'), -- 처음 글자부터 L을 찾음 // 3
       INSTR('HELLO, ORACLE!', 'L', 5), -- 5번째 글자부터 L을 찾음 // 12
       INSTR('HELLO, ORACLE!', 'L', 1, 2) -- 1번째 글자부터 2번째로 나타나는 L을 찾음 // 4
  FROM DUAL;

만약 찾으려는 문자가 문자열 데이터에 포함되어 있지 않다면 위치 값이 없으므로 0을 반환한다. 따라서 INSTR 함수를 LIKE와 비슷한 용도로 사용할 수도 있다. 예를 들어 S가 포함된 사원을 출력하고 싶다면 LIKE 연산자나 INSTR 함수를 WHERE절에 다음과 같이 적용하기도 한다.


SELECT *
  FROM EMPLOYEES
 WHERE INSTR(UPPER(FIRST_NAME), 'K') > 0;
 
SELECT *
  FROM EMPLOYEES
 WHERE UPPER(FIRST_NAME) LIKE '%K%';

INSTR 함수를 LIKE 연산자처럼 사용하는 방식은 자주 사용하는 표현은 아니다.



특정 문자를 다른 문자로 바꾸는 REPLACE 함수

REPLACE(문자열 데이터 또는 열이름, 찾는 문자, [대체할 문자])

만약 대체할 문자를 입려하지 않는다면 찾는 문자로 지정한 문자는 문자열 데이터에서 삭제된다.


SELECT '010-1234-5678',
       REPLACE('010-1234-5678', '-',' '), // 010 1234 5678
       REPLACE('010-1234-5678', '-') // 01012345678
  FROM DUAL;


데이터의 빈 공간을 특정 문자로 채우는 LPAD, RPAD 함수

Left Padding, Right Padding
데이터와 자릿수를 지정한 후 데이터 길이가 지정한 자릿수보다 작을 경우에 나머지 공간을 특정 문자로 채우는 함수이다.
빈 공간에 채울 문자를 지정하지 않으면 LPAD와 RPAD 함수는 빈 공간의 자릿수만큼 공백 문자로 띄운다.

LPAD(문자열 데이터 또는 열이름, 데이터의 자릿수, [빈 공간에 채울 문자])
RPAD(문자열 데이터 또는 열이름, 데이터의 자릿수, [빈 공간에 채울 문자])


SELECT 'Oracle',
       LPAD('Oracle', 10, '#'), // ####Oracle
       RPAD('Oracle', 10, '*'), // Oracle****
       LPAD('Oracle', 10),	//     Oracle
       RPAD('Oracle', 10)	// Oracle    
  FROM DUAL;

문자열 데이터의 특정 문자로의 채움, 즉 패딩 처리는 데이터의 일부만 노출해야 하는 개인정보를 출력할 때 사용하기도 한다.

SELECT RPAD('971225-', 14, '*'), // 971225-*******
       RPAD('010-1234-', 13, '*')// 010-1234-****
  FROM DUAL;


두 문자열 데이터를 합치는 CONCAT 함수

SELECT CONCAT('HELLO', ' WORLD!') // HELLO WORLD!
  FROM DUAL;


||연산자로 문자열을 연결할 수도 있다.



특정 문자를 지우는 TRIM, LTRIM, RTRIM 함수

삭제할 문자를 지정하지 않으면 공백이 제거된다.

TRIM([삭제 옵션] [삭제할 문자] [FROM] 원본 문자열 데이터)

삭제 옵션
LEADING 왼쪽
TRAILING 오른쪽
BOTH 양쪽

TRIM의 삭제할 수 있는 문자는 문자 1개다.


LTRIM(원본 문자열 데이터, [삭제할 문자 집합])
RTRIM(원본 문자열 데이터, [삭제할 문자 집합])


SELECT LTRIM('ROOORACLE', 'ROC') // ACLE
  FROM DUAL;

삭제할 문자 집합에 속한 문자로의 조합으로 만들 수 있는 문자들은 다 지워진다.

TRIM의 삭제 옵션까지 암기할 필요없다.
TRIM은 실무에서 검색 기준이 되는 데이터에 혹시나 들어 있을지도 모르는 양쪽 끝의 공백을 제거할 때 많이 사용한다.




숫자 데이터를 연산하고 수치를 조정하는 숫자 함수


ROUND: 지정된 숫자의 특정 위치에서 반올림한 값을 반환
TRUNC: 지정된 숫자의 특정 위치에서 버림한 값을 반환
CEIL: 지정된 숫자보다 큰 정수 중 가장 작은 정수를 반환
FLOOR: 지정된 숫자보다 작은 정수 중 가장 큰 정수를 반환
MOD: 지정된 숫자를 나눈 나머지 값을 반환


SELECT ROUND(1234.5678),	// 1235
       ROUND(1234.5678, 0),	// 1235
       ROUND(1234.5678, 1),	// 1234.6
       ROUND(1234.5678, -1)	// 1230
  FROM DUAL;

SELECT TRUNC(1234.5678),	// 1234
       TRUNC(1234.5678, 0),	// 1234
       TRUNC(1234.5678, 1),	// 1234.5
       TRUNC(1234.5678, -1)	// 1230
  FROM DUAL;

SELECT CEIL(3.14),	// 4
       CEIL(-3.14),	// -3
       FLOOR(3.14),	// 3
       FLOOR(-3.14)	// -4
  FROM DUAL;

SELECT MOD(15, 6),	// 3
       MOD(10, 2),	// 0
       MOD(11, 2)	// 1
  FROM DUAL;



날짜 데이터를 다루는 날짜 함수

날짜 데이터끼리의 더하기는 안된다라는 것 기억

날짜 데이터 + 숫자: 날짜 데이터보다 숫자만큼 일수 이후의 날짜
날짜 데이터 - 숫자: 날짜 데이터보다 숫자만큼 일수 이전의 날짜
날짜 데이터 - 날짜 데이터: 두 날짜 데이터 간의 일수 차이


오늘은 2020년 10월 13일이다.
SELECT SYSDATE,		// 20/10/13
       SYSDATE - 1,	// 20/10/12
       SYSDATE + 1	// 20/10/14
  FROM DUAL;

오라클에서 제공하는 날짜 함수 중 가장 대표 함수는 SYSDATE함수이다. 오라클 데이터베이스 서버가 놓인 OS(Operating System)의 현재 날짜와 시간을 보여준다.


몇 개월 이후 날짜를 구하는 ADD_MONTHS 함수

ADD_MONTHS(날짜 데이터, 더할 개월 수(정수))


오늘은 2020년 10월 13일이다.
SELECT SYSDATE,			// 20/10/13
       ADD_MONTHS(SYSDATE, 3)	// 21/01/13
  FROM DUAL;

입사 10주년이 되는 날 구하기
SELECT FIRST_NAME, HIRE_DATE, ADD_MONTHS(HIRE_DATE, 120)
  FROM EMPLOYEES;


두 날짜 간의 개월 수 차이를 구하는 MONTHS_BETWEEN 함수
MONTHS_BETWEEN(날짜 데이터1, 날짜 데이터2)

음수가 나올 수도 있다. 개월 수 차이는 소수점 단위까지 결과가 나온다. TRUNC함수를 조합하면 개월 수 차이를 정수로 알 수 있다.



돌아오는 요일, 달의 마지막 날짜를 구하는 NEXT_DAY, LAST_DAY 함수

NEXT_DAY(날짜 데이터, 요일 문자)
LAST_DAY(날짜 데이터)


오늘은 2020년 10월 13일 화요일이다.
SELECT SYSDATE,				// 20/10/13
       NEXT_DAY(SYSDATE, '월요일'),	// 20/10/19
       LAST_DAY(SYSDATE)		// 20/10/31
  FROM DUAL;


ROUND함수를 이용한 반올림과 TRUNC 함수를 이용한 버림이 날짜 데이터에도 적용 가능하다는 것을 꼭 기억하자.




자료형을 변환하는 형 변환 함수
숫자형식의 문자형 데이터는 연산식에서 암시적 형 변환(implicit type conversion)이 발생해서 숫자 데이터로 바뀐다.
사용자가 직접 자료형을 정해 주는 방식을 명시적 형 변환(explcit type conversion)이라고 한다.

TO_CHAR: 숫자 또는 날자 데이터를 문자 데이터로 변환
TO_NUMBER: 문자 데이터를 숫자 데이터로 변환
TO_DATE: 문자 데이터를 날짜 데이터로 변환

문자를 중심으로 숫자 또는 날짜 데이터의 변환이 가능하다


TO_CHAR(날짜 데이터, 출력되길 원하는 문자 형태, ['NLS_DATE_LANGUAGE = LANGUAGE'])
LANGUAGE = [KOREAN, JAPANESE, ENGLISH, ...]

지금은 2020년 10월 13일 화요일 3시 52분 16초이다.
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') // 2020/10/13 15:52:16
  FROM DUAL;

SELECT SYSDATE,
       TO_CHAR(SYSDATE, 'MM'),		// 10
       TO_CHAR(SYSDATE, 'MON'),		// 10월
       TO_CHAR(SYSDATE, 'MONTH'),	// 10월
       TO_CHAR(SYSDATE, 'DD'),		// 13
       TO_CHAR(SYSDATE, 'DY'),		// 화
       TO_CHAR(SYSDATE, 'DAY', 'NLS_DATE_LANGUAGE = KOREAN') // 화요일
  FROM DUAL;


SELECT SYSDATE,
       TO_CHAR(SYSDATE, 'HH24:MI:SS'),		-- 16:06:00
       TO_CHAR(SYSDATE, 'HH12:MI:SS AM'),	-- 04:06:00 오후
       TO_CHAR(SYSDATE, 'HH:MI:SS P.M.')	-- 04:06:00 오후
  FROM DUAL;


SELECT SALARY,
       TO_CHAR(24000, '$999,999'),       -- $24,000
       TO_CHAR(24000, 'L999,999'),       -- ￦24,000
       TO_CHAR(24000, '999,999.00'),     -- 24,000.00
       TO_CHAR(24000, '000,999,999.00'), -- 000,024,000.00
       TO_CHAR(24000, '000999999.99'),   -- 000024000.00
       TO_CHAR(24000, '999,999,00')      -- 240,00
  FROM EMPLOYEES;


문자 데이터를 숫자 데이터로 변환하는 TO_NUMBER 함수

암시적 형 변환
SELECT 1300 - '1500',	-- -200
       '1300' - 1500,	-- -200
       '1300' - '1500'	-- -200
  FROM DUAL;

'1.300'은 에러가 난다. ,때문에 숫자로 암시적 형 변환이 일어나지 않기 때문이다.

TO_NUMBER(문자열 데이터, 인식될 숫자형태)

SELECT TO_NUMBER('1,300', '999,999') - TO_NUMBER('1,500', '999,999') -- -200
  FROM DUAL;


문자 데이터를 날짜 데이터로 변환하는 TO_DATE 함수

TO_DATE(문자열 데이터, 인식될 날짜형태)

SELECT TO_DATE('2018-07-14', 'YYYY-MM-DD'), -- 18/07/14
       TO_DATE('20180714', 'YYYY-MM-DD')    -- 18/07/14
  FROM DUAL;



NULL 처리 함수

NVL(NULL인지 여부를 검사할 데이터 또는 열, 앞의 데이터가 NULL일 경우 반환할 데이터)

SELECT (SALARY + SALARY * NVL(COMMISSION_PCT, 0)) AS REVISED_SALARY
  FROM EMPLOYEES;

NVL2(NULL인지 여부를 검사할 데이터 또는 열,
	앞 데이터가 NULL이 아닐 경우 반환할 데이터 또는 계산식,
	앞 데이터가 NULL일 경우 반환할 데이터 또는 계산식)

SELECT NVL2(COMMISSION_PCT, '0', 'X')
  FROM EMPLOYEES;

실무에서는 NVL을 더 많이 쓴다.




상황에 따라 다른 데이터를 반환하는 DECODE 함수와 CASE문


DECODE 함수
기준이 되는 데이터를 먼저 지정한 후 해당 데이터 값에 따라 다른 결과 값을 내보내는 함수이다.

DECODE(검사 대상이 될 열 또는 데이터 연산이나 함수의 결과,
	조건1, 데이터가 조건1과 일치할 때 반환할 결과,
	[조건2], [데이터가 조건2와 일치할 때 반환할 결과],
	...
	[조건N], [데이터가 조건N과 일치할 때 반환할 결과],
	[조건1~조건N과 일치한 경우가 없을 때 반환할 결과])


