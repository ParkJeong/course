데이터베이스를 위한 데이터를 저장한 데이터 사전

오라클 데이터베이스 테이블은 사용자 테이블과 데이터 사전으로 나뉜다. 사용자 테이블은 데이터베이스를 통해 관리할 데이터를 저장하는 테이블을 뜻한다. 데이터 사전은 데이터베이스를 구성하고 운영하는 데 필요한 모든 정보를 저장하는 특수한 테이블로 데이터베이스가 생성되는 시점에 자동으로 만들어진다.
사용자 테이블은 Normal Table, 데이터 사전은 Base Table이라고 부르기도 한다.

데이터 사전에는 데이터베이스 메모리, 성능, 사용자, 권한, 객체 등 오라클 데이터베이스 운영에 중요한 데이터가 보관되어 있다.

따라서 오라클 데이터베이스는 사용자가 데이터 사전 정보에 직접 접근하거나 작업하는 것을 허용하지 않는다. 그 대신 데이터 사전 뷰를 제공하여 SELECT문으로 정보 열람을 할 수 있게 해 두었다.

+ 뷰는 어떤 목적을 위해 테이블 일부 또는 전체 데이터 열람을 주 목적으로 사용하는 객체를 뜻한다.

데이터 사전 뷰는 용도에 따라 이름 앞에 다음과 같은 접두어를 지정하여 분류한다.
USER_XXXX: 현재 데이터베이스에 접속한 사용자가 소유한 객체정보
ALL_XXXX: 현재 데이터베이스에 접속한 사용자가 소유한 객체 또는 다른 사용자가 소유한 객체 중 사용 허가를 받은 객체, 즉 사용 가능한 모든 객체 정보
DBA_XXXX: 데이터베이스 관리를 위한 정보(데이터베이스 관리 권한을 가진 SYSTEM, SYS사용자만 열람 가능)
V$_XXXX: 데이터베이스 성능 관련 정보(X$_XXXX 테이블의 뷰)

사용 가능한 데이터 사전을 알고 싶다면 DICTIONARY 또는 DICT를 조회한다.
SELECT *
  FROM DICT;

SELECT *
  FROM DICTIONARY;



USER_접두어를 가진 데이터 사전

USER_접두어로 시작하는 이름의 데이터 사전에는 현재 오라클에 접속해 있는 사용자가 소유한 객체 정보가 보관되어 있다. 

SELECT TABLE_NAME
  FROM USER_TABLES;



ALL_접두어를 가진 데이터 사전

ALL_접두어를 가진 데이터 사전은 오라클 데이터베이스에 접속해 있는 사용자가 소유한 객체 및 다른 사용자가 소유한 객체 중 사용이 허락되어 있는 객체 정보를 가지고 있다.

SELECT OWNER, TABLE_NAME
  FROM ALL_TABLES;



DBA_접두어를 가진 데이터 사전

DBA_접두어를 가진 데이터 사전은 데이터베이스 관리 권한을 가진 사용자만 조회할 수 있는 테이블이다.

DBA_TABLES는 오라클 데이터베이스에 존재하지만 사용 권한이 없는 계정으로 조회하면 테이블이 존재하지 않는다는 오류 메시지가 나온다. 이는 사용 권한이 없는 사용자는 해당 개체의 존재 여부조차 확인할 수 없음을 의미한다. '존재는 하지만 너에겐 권한이 없어'라는 식의 문구는 보안 문제를 일으킬 수 있다.

EX
우리가 자주 사용하는 여러 웹 서비스의 로그인을 생각해 보자. 만약 어떤 사람이 악의적인 의도로 우리가 사용하는 다른 웹 서비스의 아이디를 알아냈다고 가정해보자. 그리고 그 웹 서비스에서 해당 아이디로 로그인을 시도했을 때 '비밀번호가 틀렸다'라는 메시지가 나오면 이 웹 서비스에 '해당 아이디의 존재'를 인정하는 것이 되므로 추가 위험을 초래할 수 있다. 따라서 웹 서비스의 로그인 실패 메시지는 아이디, 비밀번호 둘 중 하나의 오류임을 알려 주지 않고 '아이디나 비밀번호가 틀렸다'라는 식으로 둘 중 하나가 틀린 것 같다고 제시하는 것이 일바적이다. 즉 아이디 존재 여부를 알려 주지 않는 것이다.
이와 마찬가지로 오라클 데이터베이스에서 어떤 사용자가 사용 권한이 없는 정보 열람을 시도할 경우에 오라클 데이터베이스는 해당 개체가 존재하지 않는다고 알려준다.

데이터 사전은 오라클 데이커베이스를 구성하고 운영하는 데이터를 저장하는 특수한 테이블로서 오라클 사용자가 직접 접근할 수 없다. 하지만 SELECT문으로 데이터를 열람할 수 있도록 데이터 사전 뷰를 제공한다.
대표적인 데이터 사전 뷰 중 현재 접속한 사용자가 소유하는 테이블 목록을 보기 위해서는 USER_TABLES를 사용한다. 또한 사용자가 소유하는 테이블을 포함해 다른 사용자가 소유한 테이블 중 현재 사용자에게 사용 허가가 되어 있는 테이블을 보기위해서는 ALL_TABLES를 사용한다.




더 빠른 검색을 위한 인덱스

책에서 특정 단어 또는 내용이 있는 페이지를 찾으려면 두 가지 방법을 생각할 수 있다. 책을 처음부터 끝까지 읽어 보며 찾을 수도 있고, 책의 목차나 색인을 통해 찾으려는 단어가 있는 페이지를 바로 찾아볼 수도 있다. 찾는 속도를 생각한다면 책의 모든 페이지를 읽어서 찾는 것보다 목록이나 색인을 활용하여 찾는 것이 빠르다. 그리고 책 내용이 많아질수록 속도 차이는 더욱 커진다.

색인이라는 뜻의 인덱스는 책 내용을 찾는 것과 마찬가지로 오라클 데이터베이스에서 데이터 검색 성능의 향상을 위해 테이블 열에 사용하는 객체를 뜻한다. 테이블에 보관된 특정 열 데이터의 주소, 즉 위치 정보를 책 페이지처럼 목록으로 만들어 놓은 것이다.
인덱스 사용 여부에 따라 데이터 검색 방식을 Table Full Scan, Index Scan으로 구분한다. 테이블 데이터를 처음부터 끝까지 검색하여 원하는 데이터를 찾는 방식은 Table Full Scan, 인덱스를 통해 데이터를 찾는 방식은 Index Scan이라고 한다. 

인덱스도 오라클 데이터베이스 객체이므로 소유사용자와 사용 권한이 존재한다. USER_INDEXES, USER_IND_COLUMNS와 같은 데이터 사전을 사용할 수 있다.

인덱스는 사용자가 직접 특정 테이블의 열에 지정할 수도 있지만 열이 기본키(Primary Key) 또는 고유키(Unique Key)일 경우에 자동으로 생성된다.


인덱스 생성
오라클 데이터베이스에서 자동으로 생성해 주는 인덱스 외에 사용자가 직접 인덱스를 만들 때는 CREATE문을 사용한다. CREATE문에서는 인덱스를 생성할 테이블 및 열을 지정하며 열은 하나이상 지정할 수 있다. 지정한 각 열별로 인덱스 정렬 순서(오름차순, 내림차순)를 정할 수도 있다.

CREATE INDEX 인덱스이름
    ON 테이블이름(열 이름1 ASC or DESC,
		  열 이름2 ASC or DESC,
		  ...			);
CREATE INDEX IDX_EMP_SAL
    ON EMP(SAL);

인덱스를 지정할 열의 선정은 데이터의 구조 및 데이터의 분포도 등 여러 조건을 고려해서 이루어져야 한다. 인덱스를 지정하면 데이터 조회를 반드시 빠르게 한다고 보장하기는 어렵다. 


인덱스 삭제
인덱스 삭제는 DROP 명령어를 사용한다.
DROP INDEX 인덱스이름;

DROP INDEX IDX_EMP_SAL;


인덱스는 데이터 접근 및 검색 속도 향상을 위해 사용하는 객체이지만 인덱스 생성이 항상 좋은 결과로 이어지지는 않는다. 정확한 데이터 분석에 기반을 두지 않은 인덱스의 무분별한 생성은 오히려 성능을 떨어뜨리는 원인이 되기도 한다. 인덱스는 데이터 종류, 분포도, 조회하는 SQL의 구성, 데이터 조작 관련 SQL문의 작업 빈도, 검색 결과가 전체 데이터에서 차지하는 비중 등 많은 요소를 고려하여 생성한다.
인덱스 사용 및 생성과 관련하여 더 자세한 내용은 SQL 튜닝관련 내용을 찾아볼 것




테이블처럼 사용하는 뷰

흔히 가상 테이블로 부르는 뷰는 하나 이상의 테이블을 조회하는 SELECT문을 저장한 객체를 뜻한다. SELECT문을 저장하기 때문에 물리적 데이터를 따로 저장하지는 않는다. 따라서 뷰를 SELECT문의 FROM절에 사용하면 특정 테이블을 조회하는 것과 같은 효과를 얻을 수 있다. 서브쿼리를 사용한 것과 같은 효과를 얻을 수 있다.


뷰는 크게 두 가지 목적을 위해 주로 사용한다.
편리성: SELECT문의 복잡도를 완화하기 위해
보안성: 테이블의 특정 열을 노출하고 싶지 않을 경우

뷰의 사용 목적(편리성)
여러 SQL문에서 자주 활용하는 SELECT문을 뷰로 저장해 놓은 후 다른 SQL문에서 활용하면 전체 SQL문의 복잡도를 완화하고 본래 목적의 메인 쿼리에 집중할 수 있어 편리하다.


뷰의 사용 목적(보안성)
담당자 이외에 노출이 허용되지 않는 중요한 개인 정보 데이터가 존재할 수도 있다. 이럴 때 해당 사용자에게 특정 테이블의 전체 조회 권한을 부여하는 것은 데이터 보안에 위협이 될 수 있으므로 주의해야 한다. 테이블의 일부 데이터 또는 조인이나 여러 함수등으로 가공을 거친 데이터만 SELECT하는 뷰 열람 권한을 제공하는 것이 불필요한 데이터 노출을 막을 수 있기 때문에 더 안전한 방법이다.


뷰 생성

CREATE OR REPLACE [FORCE | NOFORCE] VIEW 뷰이름(열이름1, 열이름2, ...)
    AS (저장할 SELECT문)
[WITH CHECK OPTION [CONSTRAINT 제약조건]]
[WITH READ ONLY [CONSTRAINT 제약조건]]

CREATE OR REPLACE: 같은 이름의 뷰가 이미 존재할 경우에 현재 생성할 뷰로 대체하여 생성
FORCE: 뷰가 저장할 SELECT문의 기반 테이블이 존재하지 않아도 강제로 생성
NOFORCE: 뷰가 저장할 SELECT문의 기반 테이블이 존재할 경우에만 생성
WITH CHECK OPTION: 지정한 제약 조건을 만족하는 데이터에 한해 DML 작업이 가능하도록 뷰 생성


뷰는 뷰가 만들어질때의 데이터를 유지하는 것이 아니다. 원본테이블이 바뀌면 뷰또한 바뀐다.


뷰 삭제
뷰를 삭제할 때 DROP문을 사용한다.
DROP VIEW VW_EMP20;

뷰는 실제 데이터가 아닌 SELECT문만 저장하므로 뷰를 삭제해도 테이블이나 데이터가 삭제되는 것은 아니다.

뷰에다가 데이터 조작어를 직접 사용할 수는 있지만 자주 사용하는 편은 아니다.
뷰의 주 목적은 물리적 데이터를 저장하지 않고 SELECT문만 저장함으로써 테이블의 데이터를 열람하는 것이다.
데이터를 따로 저장하는 것이 허용되는 구체화 뷰도 존재한다.


인라인 뷰를 사용한 TOP-N SQL문
CREATE문을 통해 객체로 만들어지는 뷰 외에 SQL문에서 일회성으로 만들어서 사용하는 뷰를 인라인 뷰라고 한다.

ROWNUM은 의사 열(pseudo column)이라고 하는 특수 열이다. 의사 열은 데이터가 저장되는 실제 테이블에 존재하지는 않지만 특정 목적을 위해 테이블에 저장되어 있는 열처럼 사용 가능한 열을 듯한다.




규칙에 따라 순번을 생성하는 시퀀스

시퀀스는 오라클 데이터베이스에서 특정 규칙에 맞는 연속 숫자를 생성하는 객체이다.



