가변형 문자열이란 여러 문자가 모여 있는 문자열이다. 만약 출력하려는 문자열이 가변형 문자열이라면, 문자열 데이터가 10byte보다 작은 공간을 차지할 경우에 데이터가 차지하는 공간만큼만 저장 공간을 할당한다.
가변형 문자열과 반대로 저장 공간을 무조건 할당하는 방식인 고정형 저장 방식도 있다.

DESC 명령어로 테이블의 구성을 살펴볼 수 있다.

DESC DEPT; -- DEPT 테이블의 구성 보기
DESC EMP; -- EMP 테이블의 구성 보기

VARCHAR2(14Byte): 14Byte 크기의 가변형 문자열
VARCHAR2(13Byte): 13Byte 크기의 가변형 문자열
NUMBER(2): 두 자리 숫자
NUMBER(7, 2): 두 자리 소수점을 포함하는 일곱자리 숫자
DATE: 날자 데이터


*****SQL문을 작성할 때 테이블 이름과 열 이름은 대문자로 쓰기를 권장한다.***** 
SQL문은 대,소문자를 구분하지 않는다. 그래서 대,소문자가 섞여 있는 프로그래밍 언어와 SQL문을 구분하고 가독성을 높이기 위해 실무에서는 SQL문 전체를 대문자로 사용하는 경우를 흔하게 볼 수 있다.



데이터베이스에 보관되어 있는 데이터를 조회하는 데 사용하는 SELECT 문은 출력 데이터를 선정하는 방식에 따라 크게 세 가지 방식으로 나뉜다.

1. 행 단위로 조회하는 셀렉션
셀렉션(selection)은 행 단위로 원하는 데이터를 조회하는 방식이다. 테이블 전체 데이터 중 몇몇 가로줄의 데이터만 선택할 때 사용한다.

2. 열 단위로 조회하는 프로젝션
프로젝션(projection)은 열 단위로 원하는 데이터를 조회하는 방식이다.

3. 셀렉션과 프로젝션 함께 사용하기
특정 테이블에서 조회하려는 행과 열을 모두 선별할 때 셀렉션과 프로젝션을 함께 사용할 수 있다.

4. 두 개 이상의 테이블을 사용하여 조회하는 조인
조인(join)은 두 개 이상의 테이블을 양옆에 연결하여 마치 하나의 테이블인 것처럼 데이터를 조회하는 방식이다.


FROM 절은 조회할 데이터가 저장된 테이블 이름을 명시한다. 그리고 SELECT 절은 FROM 절에 명시한 테이블에서 조회할 열이나 여러 열에 저장된 데이터의 조합 또는 연산식을 지정할 수 있다.

SELECT [조회할 열1 이름], [열2 이름], ..., [열N 이름]
FROM [조회할 테이블 이름];


에스터리스크(*)로 전체 열을 지정할 수 있다.


+데이터가 아닌 SQL문의 띄어쓰기와 줄 바꿈은 명령 수행에 영향을 주지 않는다. 실무에서 사용하는 SQL문은 훨씬 복잡하고 길어서 A4용지 한 장을 빼곡하게 가득 채우는 경우를 흔하게 볼 수 있다. 따라서 가독성을 높이기 위해 띄어쓰기와 줄 바꿈을 활용해라.




중복 데이터를 삭제하는 DISTINCT

SELECT문으로 데이터를 조회한 후 DISTINCT를 사용하여 중복을 제거한다. DISTINCT는 SELECT절에 열 이름을 명시하기 전에 선택적으로 사용할 수 있다.

SELECT DISTINCT DEPTNO
FROM EMP;

SELECT DISTINCT JOB, DEPTNO
FROM EMP;
JOB과 DEPTNO가 모두 중복된 데이터는 한 번만 출력된다. 둘 중 하나만 중복인것은 상관없다.


ALL로 중복되는 열 제거 없이 그대로 출력하기
ALL은 DISTINCT와 반대로 데이터 중복을 제거하지 않고 그대로 출력한다. SELECT절에서 중복 설정이 없을 경우에 ALL을 기본으로 사용한다.

즉 SELECT문의 옵션으로 ALL과 DISTINCT를 선택할 수 있는데 기본 값은 ALL이다.




별칭 설정하기
본래 열 이름 대신 붙이는 이름을 별칭(alias)이라고 한다. 현재 데이터가 나오기까지의 진행과정을 숨기는 용도로 별칭을 사용할 수 있다.

열과 연산식

SELECT ENAM, SAL, SAL*12+COMM, COMM
FROM EMP;

연산식에 NULL값이 들어간다면 연산식의 결과는 NULL이다.

별칭을 지정하는 방식
1. SAL*12+COMM ANNSAL
2. SAL*12+COMM "ANNSAL"
3. SAL*12+COMM AS ANNSAL
4. SAL*12+COMM AS "ANNSAL"

실무에서는 3번째 방식을 선호하는 경향이 있다. AS가 붙는 형식을 선호하는 이유는 조회해야 할 일이 수십, 수백 개일 경우에 어떤 단어가 별칭인지 알아보기 편하기 때문이다.
그리고 큰따옴표를 사용하지 않으려는 프로그래머들 습관 때문이다.SELECT문을 비롯한 여러 SQL문은 프로그래밍 코드에서 그대로 사용하는 경우가 많다. 그런데 대부분 프로그래밍 언어에서 큰따옴표는 문자열 데이터의 시작과 끝을 알리는 기호로 이미 사용되고 있다.
따라서 코드에서 사용한 큰따옴표가 SQL문에 사용한 건지 아니면 기존 프로그래밍 코드에서 문법으로 사용한 건지를 구별하는 추가 작업이 필요하다. 추가 작업을 해야하므로 작업 효율이 떨어진다.
따라서 3번째 방법을 쓰도록 하자. 별칭을 쓸 때는 AS를 쓰고 ""는 쓰지말자.


ORDER BY
데이터를 정렬된 상태로 출력하기 위해 사용한다.
SELECT 문을 작성할 때 사용할 수 있는 여러 절 중 가장 마지막 부분에 쓴다.
여러 열 지정 가능
먼저 지정한 열을 우선으로 정렬한다.
ASC이 기본 값이고 ASC과 DESC을 지정할 수 있다.

EX
부서 번호를 오름차순으로 정렬하고, 부서 번호가 같은 사원일 경우 급여를 기준으로 내림차순으로 정렬할 수도 있다.
SELECT *
  FROM EMP
ORDER BY DEPTNO ASC, SAL DESC;

ORDER BY절을 사용한 정렬은 꼭 필요한 경우가 아니라면 사용하지 않는 것이 좋다.
흩어져 있는 데이터를 특정 기준에 따라 가지런히 순서를 맞추는 것은 많은 자원, 즉 비용을 소모하기 때문이다.
ORDER BY절이 존재할 경우 SELECT문을 통해 조회할 데이터를 모두 확정한 상태에서 ORDER BY 절의 명시된 기준에 따라 정렬한다. 이때 데이터의 양 또는 정렬 방식에 따라 출력 데이터를 선정하는 시간보다 정렬하는 데 시간이 더 걸릴 수도 있다. 즉 정렬을 하지 않으면 결과를 더 빨리 출력할 수도 있다는 뜻이다.
SQL문의 효율이 낮아지는 것은 서비스 응답 시간이 느려진다는 뜻이다. 따라서 정렬이 꼭 필요한 경우가 아니라면 쓰지말자.

ORDER BY 절에서 정렬을 할 때 정렬하려는 열의 별칭을 정한 경우 열의 원래이름을 써도 되고 별칭을 써도 된다.

+ SELECT문에서 여러 절을 구하려는 경우 한 줄에 하나의 열을 쓰자.
SELECT EMPNO AS EMPLOYEE_NO,
      ENAME AS EMPLOYEE_NAME,
      MGR AS MANAGER, 
      SAL AS SALARY, 
      COMM AS COMMISSION,
      DEPTNO AS DEPARTMENT_NO
  FROM EMP
ORDER BY DEPTNO DESC, ENAME;
