내부 클래스(inner class)
클래스 내부에 선언한 클래스이다.

내부에 클래스를 선언하는 이유는 대개 이 클래스와 외부 클래스가 밀접한 관련이 있기 때문이다. 또한 그 밖의 다른 클래스와 협력할 일이 없는 경우에 내부 클래스로 선언해서 사용한다.

class Out{
	...
	class In{
		...
	}
}

내부 클래스는 선언하는 위치나 예약어에 따라 크게 네 가지 유형으로 나누어 생각할 수 있다.
1.인스턴스 내부 클래스
2.정적 내부 클래스
3.지역 내부 클래스
4.익명 내부 클래스
이것은 클래스 내부에 선언하는 변수의 유형(인스턴스 변수, 정적 변수, 지역 변수)과 유사하다. 익명 내부 클래스는 클래스 이름 없이 선언하고 바로 생성하여 사용할 수 있다.

class ABC {// 외부 클래스
	class In{ // 인스턴스 내부 클래스
		static class SIn{// 정적 내부 클래스
		}
	}
	public void abc() {
		class Local{// 지역 내부 클래스
		}
	}
}
내부에 선언한 클래스를 내부 클래스 또는 중첩된 클래스라고 한다.
또 내부 클래스는 멤버변수처럼 클래스 내부에 정의하는 인스턴스 내부 클래스, static 키워드를 사용하는 정적 내부 클래스, 그리고 메서드 내부에 정의하는 지역 내부 클래스로 나눌 수 있다.


인스턴스 내부 클래스(instance inner class)
인스턴스 변수를 선언할 때와 같은 위치에 선언하며, 외부 클래스 내부에서만 생성하여 사용하는 객체를 선언할 때 쓴다. 예를 들어 어떤 클래스 내에 여러 변수가 있고 이들 변수 중 일부를 모아 클래스로 표현할 수 있다. 이 클래스를 다른 외부 클래스에서 사용할 일이 없는 경우 내부 인스턴스 클래스로 정의한다. 인스턴스 내부 클래스는 외부 클래스 생성 후 생성된다. 따라서 외부 클래스를 먼저 생성하지 않고 인스턴스 내부 클래스를 사용할 수는 없다.
인스턴스 내부 클래스에 정적 변수, 메서드 선언 불가능
인스턴스 내부 클래스는 외부 클래스의 인스턴스가 먼저 생성되어야 사용할 수 있다. 그리고 인스턴스 내부 클래스의 메서드는 외부 클래스의 메서드가 호출될 때 사용할 수 있다.

일반적인 인스턴스 내부 클래스 사용 방법
OutClas 클래스를 생성하고 인스턴스 변수를 이용하여 
outClass.usingClass(); 
위 코드로 내부 클래스 기능을 호출하는 것이다.

만약 내부 클래스를 private으로 선언하지 않았다면 외부 클래스가 아닌 다른 클래스에서도 다음처럼 내부 클래스를 생성할 수 있다. 먼저 OutClass를 만들고, 생성한 참조 변수를 사용하여 내부 클래스를 생성한다.
OutClass outClass = new OutClass();
OutClass.InClass inClass = outClass.new InClass();
내부 클래스를 private으로 선언했다면 다른 클래스에서 InClass를 사용할 수 없다.


정적 내부 클래스
인스턴스 내부 클래스는 외부 클래스가 먼저 생성되어야 생성할 수 있기 때문에 정적 변수나 정적 메서드를 사용할 수 없다고 했다.
내부 클래스가 외부 클래스 생성과 무관하게 사용할 수 있어야 하고 정적 변수도 사용할 수 있어야 한다면 정적 내부 클래스를 사용하면 된다.
정적 내부 클래스는 인스턴스 내부 클래스처럼 외부 클래스의 멤버 변수와 같은 위치에 정의하며 static 예약어를 함께 사용한다.







메서드나 변수가 무엇인지 궁금할 때???
ctrl을 누른 상태에서 클릭하면 된다.



