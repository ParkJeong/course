인터페이스(interface)는 클래스 혹은 프로그램이 제공하는 기능을 명시적으로 선언하는 역할을 한다. 인터페이스는 추상 매서드와 상수로만 이루어져 있다. 구현된 코드가 없기 때문에 당연히 인터페이스로 인스턴스를 생성할 수도 없다.

public interface Calc {
	double PI = 3.14;		// 인터페이스에서 선언한 변수는
	int ERROR = -999999999;	// 컴파일 과정에서 상수로 변환됨
	
	int add(int num1, int num2);		// 인터페이스 에서 선언한 메서드는
	int substract(int num1, int num2);	// 컴파일 과정에서 추상 메서드로 변환됨
	int times(int num1, int num2);
	int divide(int num1, int num2);
}

인터페이스에서 선언한 메서드는 모두 구현 코드가 없는 추상 메서드이다. 이들 메서드는 public abstract 예약어를 명시적으로 쓰지 않아도 컴파일 과정에서 자동으로 추상 메서드로 변환된다. 그리고 인터페이스에서 선언한 변수는 모두 컴파일 가정에서 값이 변하지 않는 상수로 자동 변환된다. public static final 예약어를 쓰지 않아도 무조건 상수로 인식한다.

인터페이스를 클래스가 사용하는 것을 '클래스에서 인터페이스를 구현한다(implements)'라고 표현한다.
인터페이스에 선언한 기능을 클래스가 구현한다는 의미로 implements 예약어를 사용한다.
Calc 인터페이스를 Calculator 클래스에서 구현하는 방법은 다음과 같다.

public class Calculator implements Calc {
}

그런데 이렇게 코드를 작성하면 오류가 발생한다. 이 오류는 Calc 인터페이스에 포함된 추상 메서드를 구현하거나 Calculator 클래스를 추상 클래스로 만들라는 의미다.