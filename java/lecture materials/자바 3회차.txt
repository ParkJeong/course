
자바에서 제공하는 자료형은 기본 자료형과 참조 자료형이 있다.
기본 자료형은 자바 라이브러리에서 기본으로 제공하고, 얼마만큼의 메모리를 어떻게 사용할 것인지가 이미 정해져있다.



* 형 변환(type casting)

- 데이터의 크기

# byte(1) < short(2) < int(4) < long(8) < float(4) < double(8)

- float은 4바이트인데 long보다 큰 타입인 이유는 표현할 수 있는 값의 경우의 수가 float이 더 크기 때문입니다.

- 크기가 작은 데이터 타입을 크기가 큰 데이터 타입으로 변환할 때는 캐스트 연산자를 사용하지 않아도 컴파일러에 의해 자동으로 형 변환이 일어납니다.(자동 형 변환: Promotion)

- 크기가 큰 데이터 타입을 크기가 작은 데이터 타입으로 변환할 때는 반드시 캐스트 연산자를 사용하여 변환할 데이터 타입을 명시해야 합니다.(강제 형 변환: Type Casting). 그렇지 않으면 컴파일시 오류가 발생합니다.



- 서로 다른 타입의 데이터의 연산을 진행할 경우 두 데이터 중 큰 데이터 타입을 가진 쪽에 맞추어 자동 형 변환된 후 연산을 진행합니다.

- int형보다 작은 데이터타입의 연산을 진행할 경우 자동으로 int형으로 형 변환이 이루어집니다.










* 연산자(Operator)

- 연산자는 변수의 값을 변경하거나 대입하는데 사용됩니다.

- 자바에서는 연산자에 따라 연산 대상이 될 수 있는 데이터 타입이 정해져 있습니다.

- 오버플로(overflow) 또는 언더플로(underflow) 등 범위를 벗어나는 연산들에 대해서는 연산 결과에 불필요한 값이 저장됩니다.

- 0으로 나눌 경우는 오류가 발생합니다.


연산에 사용하는 값을 항(operand)이라고 한다.



* 단항 연산자(Unary Operator)

- 단항 연산자는 피 연산자가 하나인 연산자를 말합니다.

- 단항 연산자의 종류
1. 변수의 앞이나 뒤에 붙어서 변수 값을 하나 증가시키거나, 감소시키는 증/감 연산자(++, --)
2. 양수와 음수를 나타내는 부호 연산자(+, -)
3. 비트의 값을 바꿔주는 비트 반전 연산자(~)
4. 논리대수의 값을 반전시켜주는 논리 반전 연산자(!)
5. 데이터 타입을 바꿔주는 캐스트연산자 ( (type) )






* 2항 연산자(Binary Operator)

- 2항 연산자는 피 연산자(Operand)가 두 개인 연산자를 의미합니다.
- 연산자가 int형(4byte)보다 작은 크기의 데이터 타입인 경우에 boolean형을 제외하고 모두 int형으로 자동 형 변환되어 연산을 수행합니다.

- 2항 연산자의 종류

1. 산술 연산자 ( +, -, *, /, % )
- 나머지 연산은 결과가 항상 정수입니다.




2. 비교 연산자 ( <, <=, >, >=, ==, != )

- 비교 연산자의 결과 값은 크기 값을 비교하여 조건을 만족하면 true 그렇지 않으면 false를 반환합니다.

- 만약 비교되는 숫자의 데이터 타입이 다를 경우 기본적으로 크기가 큰 데이터 타입에 맞추어 비교 연산을 실행합니다.







3. 비트 연산자 ( &, |, ^ )

- 비트 연산자는 두 수를 각각 2진수로 변환하여 두 수의 각 비트 연산을 수행합니다.

a. & (비트곱): 두 비트가 1일 때 1, 나머지는 0.
b. | (비트합): 두 비트 중 하나 이상이 1이면 1, 두 비트 모두 0이면 0.
c. ^ (xor 배타적 논리합): 두 비트가 다르면 1, 같으면 0.

4. 비트 이동 연산자 ( <<, >> )

- 왼쪽 항의 값을 2진수로 변환하여 오른쪽 항의 값만큼 비트를 왼쪽(<<), 오른쪽(>>)으로 이동시키는 연산을 수행한다.

ex) int a = 192;
00000000 00000000 00000000 11000000

    a << 3
00000000 00000000 00000110 00000000 //1536

암호화작업처럼 임의의 숫자를 만들거나, 어떤 변수의 특정 비트를 꺼내보는(마스킹: masking) 경우에 사용한다.





5. 논리 연산자 ( &, |, &&, || )

a. &(and) : 연산을 수행하여 양쪽 항이 모두 true일 때만 true를 반환합니다.

b. |(or) : 연산을 수행하여 양쪽 항 중 한쪽만 true를 만족해도 true를 반환합니다.

c. &&(논리 곱) : 만일 왼쪽 항이 false일 경우에는 오른쪽 항을 수행하지 않고 무조건 false를 반환합니다.

d. ||(논리 합) : 만일 왼쪽 항이 true일 경우에는 오른쪽 항을 수행하지 않고 무조건 true를 반환합니다.

- &&, ||을 short circuit operator라고 부릅니다.

논리 곱 연산과 논리 합 연산을 할 때 두항을 모두 실행하지 않더라도 결과 값을 알 수 있는 경우에, 나머지 항은 실행되지 않는 것을 단락 회로 평가(Short Circuit Evaluation: SCE)라 한다.



* 대입 연산자(Assignment Operator)

- 대입 연산자의 기본형은 '=' 이고, 추가로 발전된 형태의 대입 연산자들이 있습니다.

- +=, -=, *=, /=, %=  

a = a + 1은 2번 연산한다.
a += 1은 1번 연산한다.
가능하면 대입 연산자 이용


자바10부터 지원
자료형 없이 변수 선언
변수에 대입되는 자료를 보고 컴파일러가 추측하여 알 수 있다.
변수 자료형 추론(local variable type inference)
var num = 10;
var dNum = 10.0;
var str = "hello";

>> int num = 10;
>> double dNum = 10.0;
>> String str = "hello";
한번 선언한 자료형 변수를 다른 자료형으로 사용할 수 없다.
var로 자료형 없이 변수를 선언하는 방법은 지역 변수만 가능하다.

상수(constant)
항상 변하지 않는 수
final 예약어를 사용해 선언한다.
상수 이름은 대문자를 사용한다.
여러 단어를 연결하는 경우에 _기호를 사용한다.
상수는 선언과 동시에 초기화하는 것이 좋다. 가끔은 선언만 먼저하고 사용하기 전에 값을 초기화하기도 한다.
초기화한 이후에는 값을 변경할 수 없다.

프로그램 내부에서 반복적으로 사용하고, 변하지 않아야 하는 값을 상수로 선언하여 사용하면 좋다.

final double PI = 3.14;
final int MAX_NUM = 100;


리터럴(literal)
프로그램에서 사용하는 모든 숫자, 문자, 논리값을 일컫는 말이다.
'A', 10, 3.14와 같은 문자와 숫자를 '리터럴' 혹은 '리터럴 상수'라고 한다.
리터럴은 변수나 상수 값으로 대입할 수 있다. 리터럴은 프로그램이 시작할 때 시스템에 같이 로딩되어
특정 메모리 공간인 상수 풀(constant pool)에 놓인다.
예를 들어 int num = 3; 문장에서 값 3이 메모리 공간 어딘가에 존재해야 num 변수에 그 값을 복사할 수 있다.
즉 숫자가 변수에 대입되는 과정은 일단 숫자 값이 어딘가 메모리에 쓰여 있고, 이 값이 다시 변수 메모리에 복사되는 것이다.


* 3항 연산자

- 피 연산자가 3개인 연산자를 말합니다.

- ( 조건식 ? 연산식1 : 연산식2 )

: 조건식의 결과값이 참이면 연산식1, 거짓이면 연산식2를 실행하라.
- 조건식에는 boolean형 조건식이 들어갑니다.




★★★★★★★★계산순서★★★★★★★★
- 소괄호 > 단항 > 이항 > 삼항 >대입

단항 연산자 ++, -- , (캐스팅)


프로그래밍 언어에서는 한 문장을 sentence or statement라고 부른다.

boolean value = myAge > 25; 보다
boolean value = (myAge > 25);가 더 가독성이 좋다.


