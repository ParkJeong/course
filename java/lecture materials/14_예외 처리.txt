프로그램에서 오류가 발생하는 상황은 두 가지이다. 하나는 프로그램 코드 작성 중 실수로 발생하는 컴파일 오류(compile error)이고, 다른 하나는 실행 중인 프로그램이 의도하지 않은 동작을 하거나 프로그램이 중지되는 실행 오류(runtiome error)이다.
컴파일 오류는 개발 환경에서 대부분 원인을 알 수 있다. 하지만 실행 오류는 예측하기 어렵다.

실제 서비스를 제공하고 있는 프로그램의 경우 오류가 생기면 서비스가 중지되므로 문제가 심각해진다. 또한 실행 중에 오류가 발생하면 그 상황을 재현하여 테스트해야 하는데, 실제 시스템이나 서비스가 운영 중인 경우에는 쉽지 않다. 따라서 로그 (log)분석을 통해 원인을 찾을 수 있도록 프로그램을 개발할 때 로그를 정확하게 남기는 것이 중요하다.

로그란 소프트웨어 실행 중에 발생하는 여러 상황을 기록한 내용으로서 주로 파일에 기록한다. 이 파일을 로그 파일(log file)이라고한다.


예외 처리를 하는 목적은 일단 프로그램이 비정상 종료되는 것을 방지하기 위한 것이다. 그리고 예외가 발생했을 때 로그를 남겨 두면 예외 상황을 파악하고 버그를 수정하는 데 도움을 받을 수 있다.


실행 오류는 크게 두 가지가 있다.
하나는 자바 가상 머신에서 발생하는 시스템 오류(error)이고 다른 하나는 예외(exception)다. 시스템 오류의 예로는 사용 가능한 동적 메모리가 없는 경우나 스택 메모리의 오버플로가 발생한 경우 등을 들 수 있다. 이러한 시스템 오류는 프로그램에서 제어할 수 없다. 반면 예외는 프로그램에서 제어할 수 있다. 예를 들어 프로그램에서 파일을 읽어 사용하려는데 파일이 없는 경우, 네트워크로 데이터를 전송하려는데 연결이 안된 경우, 배열 값을 출력하려는데 배열 요소가 없는 경우 등이다.

오류 클래스는 모두 Throwable 클래스에서 상속받는다. Error 클래스의 하위 클래스는 시스템에서 발생하는 오류를 다루며 프로그램에서 제어하지 않는다. 프로그램에서 제어하는 부분은 Exception 클래스와 그 하위에 있는 예외 클래스이다.


프로그램에서 처리하는 예외 클래스의 최상위 클래스는 Exception 클래스이다.
Throwable <- Error, Exception
Exception <- IOException, RuntimeExcepton
IOException <- FileNotFoundException, SocketException
RuntimeException <- ArithmeticException, IndexOutofBoundsException

IOException 클래스는 입출력에 대한 예외를 처리한다.
RuntimeException는 프로그램 실행 중 발생할 수 있는 오류에 대한 예외를 처리한다.

예외가 발생하면 대부분 처리하라는 컴파일 오류 메시지가 나타난다. 그런데 Exception 하위 클래스 중 RuntimeException은 예외 처리를 하지 않아도 컴파일 오류가 나지 않는다. 예를 들어 RuntimeException 하위 클래스 중 ArithmeticException은 산술 연산 중 발생할 수 있는 예외, 즉 '0으로 숫자 나누기'와 같은 경우에 발생하는 예외가 있다. 이러한 컴파일러에 의해 체크되지 않는 예외는 프로그래머가 알아서 처리해야 하므로 주의해야 한다.




예외 처리하기
try-catch문

try {
	예외가 발생할 수 있는 코드 부분
} catch(처리할 예외 타입 e) {
	try 블록 안에서 예외가 발생했을 때 예외를 처리하는 부분
}

try 블록에는 예외가 발생할 가능성이 있는 코드를 작성한다. 만약 try 블록 안에서 예외가 발생하면 바로 catch 블록이 수행된다. catch문의 괄호 ()안에 쓰는 예외 타입은 예외 상황에 따라 달라진다.









