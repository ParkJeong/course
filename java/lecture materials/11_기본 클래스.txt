String, Integer와 같은 클래스는 java.lang 패키지에 속해 잇따.
String 클래스의 전체이름은 java.lang.String이고 Integer 클래스의 전체 이름은 java.lang.Integer이다.
java.lang 패키지는 컴파일할 때 import java.lang.*; 문장이 자동으로 추가되어 java.lang 패키지 하위 클래스를 모두 사용할 수 있으므로 프로그래머가 직접 써 줄 필요가 없다.

java.lang.Object
모든 클래스의 최상위 클래스 Object
Object 클래스는 모든 자바 클래스의 최상위 클래스이다. 다시 말하면 모든 클래스는 Object 클래스로부터 상속을 받는다.
컴파일 과정에서 extends Object가 자동으로 쓰인다.
ex
class Student() {
	...
}

컴파일러가 자동으로 Object 클래스를 상속하게 코드를 변환
class Student() extends Object {
	...
}

우리가 직접 만드는 클래스뿐 아니라 기존 JDK에서 제공하는 클래스도 모두 Object 클래스에게서 상속을 받는다.
모든 클래스가 Object 클래스를 상속받았으므로 Object의 메서드를 사용할 수 있고, 재정의할 수도 있고, Object형으로 변환할 수도 있다. 자바로 프로그래밍을 하다보면 Object형으로 변환되는 경우도 있고, Object에서 원래 클래스형으로 다운 캐스팅되는 경우도 있다.

주로 사용되는 Object 메서드
String toString() : 객체를 문자열로 표현하여 반환한다. 재정의하여 객체에 대한 설명이나 특정 멤버 변수 값을 반환한다.
boolean equals(Object obj) : 두 인스턴스가 동일한지 여부를 반환한ㄷ, 재정의하여 논리적으로 동일한 인스턴스임을 정의할 수 있다.
int hashCode() : 객체의 해시 코드 값을 반환한다.
Object clone() : 객체를 복제하여 동일한 멤버 변수 값을 가진 새로운 인스턴스를 생성한다.
Class getClass() : 객체의 Class 클래스를 반환한다.
void finalize() : 인스턴스가 힙 메모리에서 제거될 때 가비지 컬렉터에 의해 호출되는 메서드이다. 네트워크 연결 해제, 열려 있는 파일 스트림 해제 등을 구현한다.
void wait() : 멀티스레드 프로그램에서 사용하는 메서드이다. 스레드를 기다리는 상태(non runnable)로 만든다.
void notify() : wait() 메서드에 의해 기다리고 있는 스레드를 실행 가능한 상태(runnable)로 가져온다.


Object 메서드 중에는 재정의할 수 있는 메서드도 있고, 그렇지 않은 메서드도 있다.



toString() 메서드
Object 클래스에서 기본으로 제공하는 toString() 메서드는 이름처럼 객체 정보를 문자열(String)로 바꾸어 준다. Object 클래스를 상속받은 모든 클래스는 toString()을 재정의할 수 있다.
Object 클래스의 toString() 메서드
toString() 메서드는 인스턴스 정보를 문자열로 반환하는 메서드이다. toString() 메서드의 원형은 생성된 인스턴스의 클래스 이름과 주소 값을 보여준다.

System.out.println() 출력문에 참조 변수를 넣으면 인스턴스 정보가 출력되는데, 이때 자동으로 호출되는 메서드가 toString()이다.


Object 클래스의 toString() 메서드 원형
getClass().getName() + '@' + Integer.toHexString(hashCode())
클래스이름@해쉬코드값

String 클래스나 Integer 클래스는 toString() 메서드를 미리 재정의 해두었다. JDK에서 제공하는 클래스 중에는 toString() 메서드를 미리 재정의한 클래스가 많다.

toString()재정의하기
@Override
public String toString() {
	return bookTitle + "," + bookNumber;
}
toString() 메서드를 직접 재정의하면 객체의 참조 변수를 이용해 원하는 문자열을 표현할 수 있다.	


equals() 메서드
두 인스턴스의 주소 값을 비교하여 boolean값을 반환해 준다. 주소 값이 같다면 당연히 같은 인스턴스이다. 그런데 서로 다른 주소 값을 가질 때도 같은 인스턴스라고 정의할 수 있는 경우가 있다. 따라서 물리적 동일성(인스턴스의 메모리 주소가 같음)뿐만 아니라 논리적 동일성(논리적으로 두 인스턴스가 같음)을 구현할 때도 equals() 메서드를 재정의하여 사용한다.

Object 클래스의 equals()메서드
인스턴스를 가리키는 참조 변수가 두 개 있을 때 이 두 인스턴스가 물리적으로 같다는 것은, 두 인스턴스의 주소 값이 같은 경우를 말한다. 다시 말해 두 변수가 같은 메모리 주소를 가리키고 있다는 뜻이다.
Object의 equals() 메서드의 원래 기능은 두 인스턴스의 주소를 비교하는 것이다.
두 인스턴스가 있을 때 ==는 단순히 물리적으로 같은 메모리 주소인지 여부를 확인할 수 있고, Object의 equals() 메서드는 재정의를 하여 논리적으로 같은 인스턴스인지(메모리주소가 다르더라도 같은 학생인지)확인하도록 구현할 수 있다.

equals()메서드 직접 재정의하기
@Override
public boolean equals(Object obj){
	if(obj instanceof Student){
		student std = (Student)obj;
		if(this.studentId == std.studentId) return true;
		else return false;
	}
	return false;
}


hashCode() 메서드
해시(hash)는 정보를 저장하거나 검색할 때 사용하는 자료 구조이다. 정보를 어디에 저장할 것인지, 어디서 가져올 것인지 해시 함수를 사용하여 구현한다. 해시 함수는 객체의 특정 정보(키 값)를 매개변수 값으로 넣으면 그 객체가 저장되어야 할 위치나 저장된 해시 테이블 주소를 반환한다. 따라서 객체 정보를 알면 해당 객체의 위치를 빠르게 검색할 수 있다.
index = hash(key)
자바에서는 인스턴스를 힙 메모리에 생성하여 관리할 때 해시 알고리즘을 사용한다.
hashCode = hash(key)

Object 클래스의 toString() 메서드 원형을 다시 살펴보면 getClass().getName()+'@'+Integer.toHexString(hashCode())이다. 즉 참조 변수를 출력할 때 본 16진수 숫자값이 '해시 코드 값'이고, 이 값은 자바 가상 머신이 힙 메모리에 저장한 '인스턴스의 주소 값'이다. 즉 자바에서는 두 인스턴스가 같다면 hashCode() 메서드에서 반환하는 해시 코드 값이 같아야 한다.따라서 논리적으로 같은 두 객체도 같은 해시 코드 값을 반환하도록 hashCode() 메서드를 재정의해야 한다. 다시 말해, equals()메서드를 재정의했다면 hashCode() 메서드도 재정의해야 한다.

Student 클래스에서 hashCode()를 재정의할 때 어떤 값을 반환하도록 만드는 것이 가장 합리적일까?
일반적으로 hashCode()메서드를 재정의할 때는 equals()메서드에서 논리적으로 같다는 것을 구현할 때 사용한 멤버 변수를 활용하는 것이 좋다. 따라서 Student 클래스에서는 hashCode() 메서드가 학번을 반환하는 것이 가장 합리적이다.

@Override
public int hashCode(){
	return studentId;
}
studentLee와 studentSang은 논리적으로는 같지만, 실제로는 다른 인스턴스이다.

hashCode() 메서드를 재정의했을 때 실제 인스턴스의 주소 값은 System.identityHashCode()메서드를 사용하면 알 수 있다.


clone()메서드
객체 원본을 유지해 놓고 복사본을 사용한다거나, 기본 틀(prototype)의 복사본을 사용해 동일한 인스턴스를 만들어 복잡한 생성 과정을 간단히 하려는 경우에 clone()메서드를 사용할 수 있다. clone()메서드는 Object에 아래코드와 같이 선언되어 있으며, 객체를 복제해 또 다른 객체를 반환해 주는 메서드이다.
protected Object clone();


clone() 메서드를 사용하려면 객체를 복제해도 된다는 의미로 클래스에 Cloneable 인터페이스를 구현해야 한다. 만약 clone()메서드만 재정의하고 Cloneable 인터페이스를 명시하지 않으면 clone() 메서드를 호출할 때 CloneNotSupportedException이 발생한다. Object의 clone() 메서드는 클래스의 인스턴스를 새로 복제하여 생성해 준다. 멤버 변수가 동일한 인스턴스가 다른 메모리에 새로 생성되는 것이다.

Cloneable 인터페이스를 선언해도 별도로 구현해야하는 메서드는 없다. 이렇게 구현할 메서드가 없는 인터페이스를 마커 인터페이스(marker interface)라고 한다.

객체를 복제해도 된다는 의미로 Cloneable 인터페이스를 함께 선언
class Circle implements Cloneable{
	...
}

clone()메서드를 사용할 때 발생할 수 있는 오류를 예외 처리함
@Override
	public Object clone() throws CloneNotSupportedException{
		return super.clone();
	}





String을 선언하는 두 가지 방법
String을 사용할 때 문자열을 생성자의 매개변수로 하여 생성하는 방식과 이미 생성된 문자열 상수를 가리키는 방식이 있다.
String str1 = new String("abc");
String str2 = "test";
내부적으로 두 가지 방식은 큰 차이가 있다.
new 예약어를 사용하여 객체를 생성하는 경우는 "abc"문자열을 위한 메모리가 할당되고 새로운 객체가 생성된다. 하지만 str2 = "test"와 같이 생성자를 이용하지 않고 바로 문자열 상수를 가리키는 경우에는 str2가 기존에 만들어져 있던 "test"라는 문자열 상수의 메모리 주소를 가리키게 된다. 따라서 String str3 = "test"코드를 작성하면 str2와 str3는 주소 값이 같게 된다.
"abc"는 힙 메모리에 있다. str1변수가 "abc"의 주소를 참조한다.
"test"는 상수 풀(constant pool)에 올라가 있다. str1변수와 str2의 변수는 "test"의 주소를 참조한다.
프로그램에서 사용되는 상수 값을 저장하는 공간을 상수 풀(constant pool)이라고 한다.

리터럴(literal)혹은 리터럴 상수란 프로그램에서 사용하는 모든 숫자, 문자, 논리값(true, false)을 일컫는 말이다. 리터럴은 프로그램이 시작할 때 시스템에 같이 로딩되어 특정 메모리 공간인 상수 풀에 놓인다. 예를 들어 int num = 3; 문장에서 값 3이 메모리 공간 어딘가에 존제해야 num 변수에 그 값을 복사할 수 있다. 즉 숫자가 변수에 대입되는 과정은 일단 숫자 값이 어딘가 메모리에 쓰여 있고, 이 값이 다시 변수 메모리에 복사되는 것이다.

	public static void main(String[] args) {
		String str1 = new String("abc");
		String str2 = new String("abc");
// 인스턴스가 매번 새로 생성되므로 str1과 str2의 주소값은 다르다.	
	
		System.out.println(str1 == str2);
		System.out.println(str1.equals(str2));
// 문자열 값은 같으므로 true 반환	
	
		String str3 = "abc";
		String str4 = "abc";
// 문자열 abc는 상수 풀에 저장되어 있으므로 str3과 str4가 가리키는 주소 값이 같다.	
		System.out.println(str3 == str4);
		System.out.println(str3.equals(str4));
// 문자열 값도 같으므로 true 반환
	}



