DBMS는 DataBase Management System의 약자로 데이터베이스 관리 시스템을 의미한다. 

데이터를 원석, 정보를 보석으로 비유한다.

즉 데이터는 어떤 필요에 의해 수집했지만 아직 특정 목적을 위해 평가하거나 정제하지 않은 값이나 사실 또는 자료 자체를 의미한다. 그리고 정보는 수집한 데이터를 어떠한 목적을 위해 분석하거나 가공하여 가치를 추가하거나 새로운 의미를 이끌어 낼 수 있는 결과로 볼 수 있다.
-> 잘 수집된 데이터를 분석하고 가공하면 새로운 가치를 만들어 낼 수 있는 정보를 얻을 수 있다.


효율적인 데이터 관리를 위한 조건
1. 데이터를 통합하여 관리
2. 일관된 방법으로 관리
3. 데이터 누락 및 중복 제거
4. 여러 사용자(응용 프로그램 포함)가 공동으로 실시간 사용 가능

위 조건을 만족하면서 특정 목적을 위해 여러 사람이 공유하여 사용할 수 있으며, 효율적인 관리와 검색을 위해 구조화한 데이터 집합을 데이터베이스라고 한다.



파일 시스템을 통한 데이터 관리
파일 시스템은 서로 다른 여러 응용 프로그램이 제공하는 기능에 맞게 필요한 데이터를 각각 저장하고 관리한다. 따라서 각 파일에 저장한 데이터는 서로 연관이 없고 중복 또는 누락이 발생할 수 있다.
파일 시스템을 단층 파일 구조(flat file structure)라고 한다.

여러 응용 프로그램이 사용할 데이터를 한곳에서 관리하기 위해 데이터베이스를 활용한다.이렇게 한곳에 모아둔 데이터를 각각의 응용프로그램이 함께 사용하면 응용 프로그램별로 데이터를 직접 관리할 때 발생할 수 있는 데이터의 오류, 누락, 중복 등의 문제를 해결할 수 있다.


+ 서비스의 역할 분담
많은양의 요구를 처리하기 위해서는 각각의 역할을 분리하여 담당하는 것이 효율적이다. 즉 서비스 요청을 받는 영역, 서비스 처리에 필요한 데이터를 다루는 영역, 처리한 데이터를 제공하는 영역으로 나누는 것이다.


DBMS를 통한 데이터 관리
데이터베이스 관리 시스템은 DBMS(DataBase Management System)라고 많이 부르며, 실무에서는 데이터베이스와 데이터베이스 관리 시스템을 따로 구별하지않고 DB또는 데이터베이스라고 부른다.

데이터베이스를 통한 데이터 관리란 여러 목적으로 사용할 데이터의 접근, 관리 등의 업무를 DBMS가 전담하는 방식을 말한다. 다시 말해 응용 프로그램이 필요한 데이터 작업을 DBMS에 요청하면, DBMS는 자신이 관리하는 데이터베이스로 관련 작업을 수행하고 결과 값을 제공한다.


DBMS의 역할

응용         ------>         DBMS                -------->    데이터베이스
프로그램     <------  DataBaseManagement System  <--------

이러한 작업 영역의 분리는 응용 프로그램의 서비스 제공과 데이터 관련 작업 효율을 높인다. 또한 여러 응용 프로그램이 하나의 통합된 데이터를 같은 방식으로 사용, 관리할 수 있으므로 데이터 누락이나 중복을 방지할 수 있다.


파일 시스템 방식의 문제 -> DBMS를 통한 데이터 관리
1. 데이터 중복 -> 하나의 소프트웨어가 데이터를 관리하므로 데이터 중복을 피할 수 있음

2. 응용 프로그램이  개별 데이터를 직접 관리 -> 여러 응용 프로그램이 하나의 DBMS를 통해 데이터를 사용하므로 데이터를 동시에 공유할 수 있음

3. 응용프로그램이 데이터를 쓰는 방식이 각각 다름 -> 하나의 DBMS를 통해 데이터를 관리하기 때문에 각각의 응용 프로그램이 데이터를 관리하는 방식이 통합됨

4. 데이터가 특정 응용 프로그램에 종속되어 있으므로 응용 프로그램을 변경하면 기존 데이터를 사용할 수 없음 -> 응용 프로그램과는 별도로 데이터가 DBMS에 의해 관리, 보관되기 때문에 응용 프로그램의 업데이트 또는 변경과 관계없이 데이터를 사용할 수 있음




데이터 모델


데이터 모델이란 컴퓨터에 데이터를 저장하는 방식을 정의해 놓은 개념 모형이다. 대표 데이터 모델에는 계층형, 네트워크형, 관계형, 객체 지향형 등이 있다.

계층형 데이터 모델
계층형 데이터 모델은 나뭇가지 형태의 트리 구조를 활용하여 데이터 관련성을 계층별로 나누어 부모 자식 같은 관계를 정의하고 데이터를 관리한다.
이 모델에서 데이터가 저장된 파일은 상위 개념에 하위 개념이 포함되어 있는 특징이 있다. 기본적으로 하나의 부모 개체가 여러 자식을 가질 수 있는 반면에 자식 개체는 여러 부모 개체를 가질 수 없다는 제약이 있다. 따라서 일대다 구조의 데이터를 표현하기에는 알맞지만 자식 개체가 여러 부모를 가진 관계는 표현할 수 없다.

생물->동물, 식물, 미생물
동물->포유류, 파충류, 양서류
포유류->호랑이, 돼지, 말

네트워크형 데이터 모델
네트워크형 데이터 모델은 망형 데이터 모델이라고도 하며 그래프 구조를 기반으로 한다. 다시 말해 개체 간 관계를 그래프 구조로 연결하므로 자식 개체가 여러 부모 개체를 가질 수 있다는 점에서 계층형 데이터 모델과 차이가 있다.

객체 지향형 데이터 모델
객체 지향 프로그래밍에서 사용하는 객체 개념을 기반으로 한 데이터 모델이다. 객체 지향 프로그래밍처럼 데이터를 독립된 객체로 구성하고 관리하며 상속, 오버라이드 등 객체 지향 프로그래밍에 사용되는 강력한 기능을 활용할 수 있다.
하지만 이러한 객체 지향형 모델 개념을 완전히 데이터베이스에 적용하는 것은 쉽지 않기 때문에 이를 적용한 상용 DBMS는 많지 않다.

관계형 데이터 모델 Relational Data Model
관계형 데이터 모델은 다른 모델과 달리 데이터 간 관계에 초점을 둔다.

데이터 묶음은 개체 집합(entity set)을 의미하며 관계형 데이터베이스에서 테이블(table), 릴레이션(relation)으로 표기한다. 데이터 묶음 간의 관계는 관계(relationship)라고 한다.

개체(entity): 데이터베이스에서 데이터화하려는 사물, 개념의 정보 단위이다. 관계형 데이터베이스의 테이블(table) 개념과 대응되며 테이블은 릴레이션(relation)으로 표기하기도 한다.

속성(attribute): 개체를 구성하는 데이터의 가장 작은 논리적 단위로서 데이터의 종류, 특성, 상태 등을 저으이한다. 관계형 데이터베이스의 열(column)개념과 대응된다.

관계(relationship): 개체와 개체 또는 속성 간의 연관성을 나타내기 위해 사용한다. 관계형 데이터베이스에서는 테이블 간의 관계를 외래키(foreign key)등으로 구현하여 사용한다.

여러 관계형 테이터베이스가 관계형 데이터 모델을 바탕으로 하고 있다는 정도만 기억


CDB
Container DataBase, 원본 데이터베이스?

PDB
가상 데이터베이스



관계형 데이터베이스란
관계형 데이터베이스는 관계형 데이터 모델 개념을 바탕으로 데이터를 저장, 관리하는 데이터베이스를 의미한다. 관계형 데이터베이스를 관리하는 시스템은 RDBS(Relational DataBase System), 관계형 데이터베이스 관리 시스템이라고 부른다.


SQL
Structured Query Language의 약자로 에스큐엘 또는 시퀄이라고 부른다.
SQL은 RDBMS에서 데이터를 다루고 관리하는 데 사용하는 데이터베이스 질의 언어이다. 

SQL은 사용 목적에 따라서 다음과 같이 나뉜다.
DQL(Data Query Language): RDBMS에 저장한 데이터를 원하는 방식으로 조회하는 명령어
DML(Data Manipulation Language): RDBMS 내 테이블의 데이터를 저장, 수정, 삭제하는 명령어
DDL(Data Definition Language): RDBMS 내 데이터 관리를 위해 테이블을 포함한 여러 객체를 생성, 수정, 삭제하는 명령어
TCL(Transaction Control Language): 트랜잭션 데이터의 영구 저장, 취소 등과 관련된 명령어
DCL(Data Control Language): 데이터 사용 권한과 관련된 명령어