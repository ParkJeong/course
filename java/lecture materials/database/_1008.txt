SELECT: 하나 이상의 열을 나열
DISTINCT: 중복을 제거한다.
*: 모든 열을 선택한다.
COLUMN: 명명된 열을 선택한다.
AS: 열 별칭을 지정한다.
ALIAS: 선택된 열을 다른 이름으로 변경한다.
FROM table: 열을 포함하는 테이블을 명시한다.


SQL문장은 대/소문자를 구별하지 않는다.
SQL문장은 한 줄 이상일 수 있다.
키워드는 단축하거나 줄을 나누어 쓸 수 없다.
탭과 들여쓰기는 읽기 쉽게 하기 위해 사용한다.

데이터베이스의 대표적인 타입
숫자, 문자, 날짜
숫자 데이터는 오른쪽으로 정렬된다.
날짜와 문자 데이터는 왼쪽 정렬된다.

null은 이용할 수 없거나, 지정되지 않았거나, 알 수없거나 또는 적용할 수 없는 값이다.
null은 숫자 0이나 공백과는 다르다.


-- 오라클 주석입니다.
-- 실행은 ctrl + enter

select * from employees;


-- 칼럼을 조회하는 위치에서 + - * / 연산이 가능하다.

select salary * 1.1 from employees;

--열의 이름을 바꿀 때
as는 생략가능하고, 열의 이름에는 ""를 붙여도 되고 안붙여도 된다.''은 안된다. 하지만 "이름"과 이름은 다른 것이다.

select first_name as 이름 from employees;
select first_name as "이름" from employees;
select first_name 이름 from employees;
select first_name "이름" from employees;


||을 이용해서 값을 연결할 수 있다.
날짜와 문자 리터럴 값은 단일 인용부호('')안에 있어야 한다.
'을 쓰고 싶으면 2번 써야 한다.
/*
 오라클 홑따옴표가 문자를 표현하기 때문에,
 문자열안에 '를 표현하고 싶다면 '' 두번 쓰면 된다.
*/
select first_name || ' ' || last_name || '''s salary is $' || salary as "Employee Details"
from employees;


중복되는 행을 제거
SELECT DISTINCT department_id 
FROM employees;



ROWID: 데이터베이스에서 행의 주소를 반환한다.
ROWNUM: 쿼리에 의해 반환되는 행의 번호를 출력한다.

SELECT ROWID, ROWNUM, employee_id, first_name
FROM employees;



WHERE: 조건을 만족하는 행으로 질의를 제한한다.
WHERE 절을 사용하여 리턴되는 행을 제한한다.
WHERE 절은 FROM 절 다음에 온다.
WHERE 절은 열 이름, 비교 연산자, 그리고 비교할 열 이름 또는 값의 목록으로 구성된다.

--행 제한 WHERE 절 BETWEEN, IN, LIKE
SELECT first_name, last_name, job_id 
FROM employees
WHERE job_id = 'IT_PROG';

SELECT *
FROM employees
WHERE last_name = 'King';

SELECT *
FROM employees
WHERE department_id = 90;

SELECT *
FROM employees
WHERE salary >= 15000; -- salary가 15000이상인

SELECT *
FROM employees
WHERE salary <> 15000; -- salary가 15000이 아닌 


SELECT *
FROM employees
WHERE salary = 10000; -- salary가 1000인

SELECT *
FROM employees
WHERE hire_date = '06/03/07';

문자 스트링과 날자 값은 단일 인용부호('')로 둘러싸여 있다.
문자 값은 대/소문자를 구분하고, 날짜 값은 날짜 형식을 구분한다.
디폴트 날짜 형식은 'DD-MON-YY'이다.
SQL Developer의 환경설정에 데이터베이스-> NLS -> 날짜 형식을 바꿀 수 있다.

+ 오라클에서 새로운 페이지를 만들고 SQL파일을 드래그하면 바로 파일이 열린다.


값의 범위에 해당하는 행을 출력하기 위해 BETWEEN 연산자를 사용한다.
하한 값을 먼저 명시해야 한다.
하한 값과 상한 값을 모두 포함한다.


SELECT *
FROM employees
WHERE salary BETWEEN 10000 AND 12000;


SELECT *
FROM employees
WHERE salary >= 10000 AND salary <= 12000;


SELECT *
FROM employees
WHERE hire_date between '03/01/01' AND '03/12/31';

SELECT *
FROM employees
WHERE hire_date >= '03/01/01' AND hire_date <= '03/12/31';;


-- 목록에 있는 값들에 해당하면 가져온다.
-- 목록에 있는 값들과 비교하기 위해서 IN 연산자를 사용한다.

SELECT employee_id, first_name, manager_id
FROM employees
WHERE manager_id IN(101, 102, 103);

SELECT employee_id, first_name, manager_id
FROM employees
WHERE manager_id = 101 OR manager_id = 102 OR manager_id = 103;

SELECT *
FROM employees
WHERE job_id IN('AD_VP', 'FI_MGR', 'IT_PROG');


/*
검색 스트링 값에 대한 와일드카드 검색을 위해서 LIKE 연산자를 사용한다.
검색 조건은 리터럴 문자나 숫자를 포함할 수 있다.
%는 문자가 없거나 또는 하나 이상을 나타낸다.
_는 하나의 문자를 나타낸다.
*/

SELECT *
FROM employees
WHERE job_id LIKE 'IT%';

SELECT hire_date
FROM employees
WHERE hire_date LIKE '03%';

SELECT email
FROM employees
WHERE email LIKE '_A%';


SELECT first_name || ' ' || last_name AS "NAME", hire_date
FROM employees
WHERE hire_date LIKE '03%';

SELECT first_name || ' ' || last_name AS "NAME", hire_date
FROM employees
WHERE hire_date LIKE '%15';

SELECT first_name || ' ' || last_name AS "NAME", hire_date
FROM employees
WHERE hire_date LIKE '%/05/%';


-- NULL값은 오직 IS NULL 또는 IS NOT NULL로만 테스트할 수 있다.
-- =으로는 할 수 없다.


SELECT commission_pct
FROM employees
WHERE commission_pct IS NULL;

SELECT *
FROM employees
WHERE manager_id IS NOT NULL;


연산자 우선순위
모든 비교 연산자 > NOT > AND > OR
헷갈리면 ()쓰면 된다.

SELECT first_name, job_id, salary
FROM employees
WHERE job_id = 'IT_PROG'
OR job_id = 'FI_MGR'
AND salary >= 6000;
위 쿼리문은 두 개의 조건을 검색한다.
1. job_id가 IT_PROG인가
2. job_id가 FI_MGR이고 급여가 6000 이상인가?


SELECT first_name, job_id, salary
FROM employees
WHERE (job_id = 'IT_PROG'OR job_id = 'FI_MGR')
AND salary >= 6000;
위 쿼리문은 두 개의 조건을 검색한다.
1. job_id가 IT_PROG 또는 FI_MGR인가?
2. 급여가 6000 이상인가?


정렬 구문은 SQL문의 마지막에 나온다.
질의에 의해 검색되는 행을 정렬할 수 있다.
ORDER BY 절은 SELECT 문장의 가장 뒤에 온다.
ORDER BY 절에서 열 이름 뒤에 DESC 키워드를 명시한다.(ASC는 기본 값이므로 명시할 필요없다.)
ASC: 오름차순으로 정렬한다. 기본값이다.
DESC: 내림차순으로 정렬한다.


SELECT first_name, hire_date
FROM employees
ORDERBY hire_date;

SELECT first_name, hire_date
FROM employees
ORDER BY hire_date DESC;

ORDER BY 절에 열 별칭을 사용할 수 있다.

SELECT first_name, salary * 12 AS annsal
FROM employees
ORDER BY annsal;




