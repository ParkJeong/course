내부 클래스(inner class)
클래스 내부에 선언한 클래스이다.

내부에 클래스를 선언하는 이유는 대개 이 클래스와 외부 클래스가 밀접한 관련이 있기 때문이다. 또한 그 밖의 다른 클래스와 협력할 일이 없는 경우에 내부 클래스로 선언해서 사용한다.

class Out{
	...
	class In{
		...
	}
}

내부 클래스는 선언하는 위치나 예약어에 따라 크게 네 가지 유형으로 나누어 생각할 수 있다.
1.인스턴스 내부 클래스
2.정적 내부 클래스
3.지역 내부 클래스
4.익명 내부 클래스
이것은 클래스 내부에 선언하는 변수의 유형(인스턴스 변수, 정적 변수, 지역 변수)과 유사하다. 익명 내부 클래스는 클래스 이름 없이 선언하고 바로 생성하여 사용할 수 있다.

class ABC {// 외부 클래스
	class In{ // 인스턴스 내부 클래스
		static class SIn{// 정적 내부 클래스
		}
	}
	public void abc() {
		class Local{// 지역 내부 클래스
		}
	}
}
내부에 선언한 클래스를 내부 클래스 또는 중첩된 클래스라고 한다.
또 내부 클래스는 멤버변수처럼 클래스 내부에 정의하는 인스턴스 내부 클래스, static 키워드를 사용하는 정적 내부 클래스, 그리고 메서드 내부에 정의하는 지역 내부 클래스로 나눌 수 있다.


인스턴스 내부 클래스(instance inner class)
인스턴스 변수를 선언할 때와 같은 위치에 선언하며, 외부 클래스 내부에서만 생성하여 사용하는 객체를 선언할 때 쓴다. 
예를 들어 어떤 클래스 내에 여러 변수가 있고 이들 변수 중 일부를 모아 클래스로 표현할 수 있다. 이 클래스를 다른 외부 클래스에서 사용할 일이 없는 경우 내부 인스턴스 클래스로 정의한다. 인스턴스 내부 클래스는 외부 클래스 생성 후 생성된다. 따라서 외부 클래스를 먼저 생성하지 않고 인스턴스 내부 클래스를 사용할 수는 없다.
인스턴스 내부 클래스에 정적 변수, 메서드 선언 불가능
인스턴스 내부 클래스는 외부 클래스의 인스턴스가 먼저 생성되어야 사용할 수 있다. 그리고 인스턴스 내부 클래스의 메서드는 외부 클래스의 메서드가 호출될 때 사용할 수 있다.

class OutClass {
	private int num = 10;
	private static int sNum = 20;
	
	private InClass inClass; // 내부 클래스 자료형 변수를 먼저 선언
	
	public OutClass() { // 외부 클래스가 생성된 후에 내부 클래스 생성 가능
		inClass = new InClass();
	}
	
	private class InClass{
		int inNum = 100;
		//static int sInNum = 200;	// 인스턴스 내부 클래스에 정적 변수 선언 불가능
		
		void inTest() {
			System.out.println("OutClass num = " + num + "(외부 클래스의 인스턴스 변수)");
			System.out.println("OutClass sNum = " + sNum + "(외부 클래스의 정적 변수)");
		}
		
	}
	public void usingClass() {
		inClass.inTest();
	}
}


일반적인 인스턴스 내부 클래스 사용 방법
OutClas 클래스를 생성하고 인스턴스 변수를 이용하여 
outClass.usingClass(); 
위 코드로 내부 클래스 기능을 호출하는 것이다.

만약 내부 클래스를 private으로 선언하지 않았다면 외부 클래스가 아닌 다른 클래스에서도 다음처럼 내부 클래스를 생성할 수 있다. 먼저 OutClass를 만들고, 생성한 참조 변수를 사용하여 내부 클래스를 생성한다.
OutClass outClass = new OutClass();
OutClass.InClass inClass = outClass.new InClass();
내부 클래스를 private으로 선언했다면 다른 클래스에서 InClass를 사용할 수 없다.
따라서 어떤 클래스의 내부에서만 사용할 목적이라면 내부 클래스를 private으로 선언한다.




정적 내부 클래스
인스턴스 내부 클래스는 외부 클래스가 먼저 생성되어야 생성할 수 있기 때문에 정적 변수나 정적 메서드를 사용할 수 없다고 했다.
내부 클래스가 외부 클래스 생성과 무관하게 사용할 수 있어야 하고 정적 변수도 사용할 수 있어야 한다면 정적 내부 클래스를 사용하면 된다.
정적 내부 클래스는 인스턴스 내부 클래스처럼 외부 클래스의 멤버 변수와 같은 위치에 정의하며 static 예약어를 함께 사용한다.

내부 클래스에 static 키워드를 붙이면, 외부 인스턴스 없이 내부 클래스의 인스턴스를 바로 생성할 수 있다는 차이점만 존재할 뿐 기능적 차이는 없다.

다른 클래스에서 정적 내부 클래스 사용하기

정적 내부 클래스는 외부 클래스를 생성하지 않고도 내부 클래스 자료형으로 바로 선언하여 생성할 수 있다.
OutClass.InStaticClass sInClass = new OutClass.InStaticClass();

또 정적 내부 클래스에 선언한 메서드나 변수는 private이 아닌 경우에 다른 클래스에서도 바로 사용할 수 있다.
OutClass.InStaticClass.sTest();

따라서 내부 클래스를 만들고 외부 클래스와 무관하게 다른 클래스에서도 사용하려면 정적 내부 클래스로 생성하면 된다. 하지만 정적 내부 클래스를 private으로 선언했다면 이것 역시 다른 클래스에서 사용할 수 없다.


지역 내부 클래스
지역 내부 클래스는 지역 변수처럼 메서드 내부에 클래스를 정의하여 사용하는 것을 말한다.

Runnable 인터페이스는 자바에서 스레드를 만들 때 사용하는 인터페이스로 java.lang 패키지에 선언되어 있으며 반드시 run() 메서드를 구현해야 한다.
class Outer {
	int outNum = 100;
	static int sNum = 200;
	
	Runnable getRunnable(int i) {
		int num = 100;
		
		class MyRunnable implements Runnable {
			int localNum = 10;
			
			@Override
			public void run() {
				System.out.println("i = " + i);
				System.out.println("num = " + num);
				System.out.println("localNum = " + localNum);
				System.out.println("outNum = " + outNum + "(외부 클래스 인스턴스 변수)");
				System.out.println("Outer.sNum = " + Outer.sNum + "(외부 클래스 정적 변수)");
			}
		}
		return new MyRunnable();
	}
}






지역 내부 클래스에서 지역 변수의 유효성
지역 변수는 메서드가 호출될 때 스택 메모리에 생성되고 메서드의 수행이 끝나면 메모리에서 사라진다. 그런데 지역 내부 클래스에 포함된 getRunnable() 메서드의 매개변수 i와 메서드 내부에 선언한 변수 num은 지역 변수이다. 이 두 변수를 사용하는 부분의 코드를 다시 살펴 보자.
Outer = out = new Outer();
Runnable runner = out.getRunnable(10); // getRunnable() 메서드의 호출이 끝남
runner.run(); // run()이 실행되면서 getRunnable() 메서드의 지역변수가 사용됨

run() 메서드는 getRunnable() 메서드의 지역 변수 i와 num을 사용한다. 그런데 지역 내부 클래스를 가지고 있는 getRunnable() 메서드 호출이 끝난 후에도 run() 메서드가 정상적으로 호출된다. 이는 getRunnable() 메서드 호출이 끝나고 스택 메모리에서 지워진 변수를 이후에 또 참조할 수 있다는 것이다.(int num = 100;) 즉 지역 내부 클래스에서 사용하는 지역 변수는 상수로 처리된다.
지역 내부 클래스에서 사용하는 메서드의 지역 변수는 모두 상수로 바뀐다.
상수를 처리하기 위해 자바 7까지는 final 예약어를 꼭 함께 써 주어야 했지만, 자바 8부터는 직접 써 주지 않아도 코드를 컴파일하면 final 예약어가 자동으로 추가된다. 그러므로 num과 i 변수의 값을 다른 값으로 바꾸려고 하면 오류가 발생한다. 지역 내부 클래스에서 사용하는 메서드의 지역변수는 모두 상수로 바뀐다.






익명 내부 클래스
클래스 이름을 사용하지 않는 클래스

class Outer2 {
	Runnable getRunnable(int i) {
		int num = 100;
		
		return new Runnable() {
			@Override
			public void run() {
				System.out.println(i);
				System.out.println(num);
			}
		};
	}
	
	Runnable runner = new Runnable() {
		@Override
		public void run() {
			System.out.println("Runnable이 구현된 익명 클래스 변수");
		}
	};
}


익명 내부 클래스는 단 하나의 인터페이스 또는 단 하나의 추상 클래스를 바로 생성할 수 있다. 그런데 인터페이스는 인스턴스로 생성할 수 없다. 인터페이스를 생성하려면 인터페이스 몸체가 필요하다. 그래서 반드시 구현해야하는 메서드를 구현해주면 된다. 마지막에 세미콜론을 사용해서 익명 내부 클래스가 끝났다는 것을 알려 준다.


익명 내부 클래스는 예전에 자바 UI에서 이벤트를 처리하는 데 많이 사용했다. 현재는 안드로이드 프로그래밍에서 위젯의 이벤트를 처리하는 핸들러를 구현할 때 사용한다. 안드로이드에서 사용하는 버튼, 텍스트 상자 등을 위젯(widget)이라고 한다. 위젯은 사용자가 터치하거나 키 값을 입력하면 이벤트를 일으킨다. 발생한 이벤트를 처리해 주는 코드를 이벤트 핸들러라고 한다.  안드로이드 이벤트 핸들러는 대부분 익명 내부 클래스로 구현한다.


인스턴스 내부 클래스
구현 위치: 외부 클래스 멤버 변수와 동일
사용할 수 있는 외부 클래스 변수: 외부 인스턴스 변수, 외부 전역 변수
생성 방법: 외부 클래스를 먼저 만든 후 내부 클래스 생성

정적 내부 클래스
구현위치:외부 클래스 멤버 변수와 동일
사용할 수 있는 외부 클래스 변수: 외부 전역 변수
생성 방법: 외부 클래스와 무관하게 생성

지역 내부 클래스
구현위치: 메서드 내부에 구현
사용할 수 있는 외부 클래스 변수: 외부 인스턴스 변수, 외부 전역 변수
생성 방법: 메서드를 호출할 때 생성

익명 내부 클래스
구현위치: 메서드 내부에 구현, 변수에 대입하여 직접 구현
사용할 수 있는 외부 클래스 변수: 외부 인스턴스 변수, 외부 전역 변수
생성 방법: 메서드를 호출할 때 생성되거나, 인터페이스 타입 변수에 대입할 때 new 예약어를 사용하여 생성



람다식
자바는 객체를 기반으로 프로그램을 구현한다. 만약 어떤 기능이 필요하다면 클래스를 먼저 만들고, 클래스 안에 기능을 구현한 메서드를 만든 후 그 메서드를 호출해야 한다.

함수형 프로그래밍(Functional Programming, FP)
함수의 구현과 호출만으로 프로그램을 만드는 프로그래밍 방식

자바에서 제공하는 함수형 프로그래밍 방식을 람다식(Lamda expression)이라고 한다.


람다식(lambda expression) 구현하기
람다식은 간단히 설명하면 함수 이름이 없는 익명 함수를 만드는 것이다. 람다식 문법은 아래와 같다.
(매개변수) -> {실행문;}
메서드에서 사용하는 매개변수가 있고, 이 메서드가 매개변수를 사용하여 실행할 구현 내용, 즉 메서드의 구현부를 {} 내부에 쓴다. 예를 들어 두 수를 입력받아 그 합을 반환하는 add()함수가 있을 대 이를 람다식으로 변환해 보자.
int add(int x, int y){
	return x + y;
}
위의 코드를 람다식으로 변환해보면 아래 코드와 같다.
(int x, int y) -> {return x + y;}

메서드 이름 add와 반환형 int를 없애고 -> 기호를 사용하여 구현한다.


람다식 문법 살펴보기

1.매개변수 자료형과 괄호 생략하기
람다식 문법에서는 매개변수 자료형을 생략할 수 있다. 또 매개변수가 하나인 경우에는 괄호도 생략할 수 있다.
str -> {System.out.println(str);}
하지만 매개변수가 두 개인 경우는 괄호를 생략할 수 없다.
x, y -> {System.out.println(x + y);}(안된다, x)

2.중괄호 생략하기
중괄호 안의 구현 부분이 한 문장인 경우 중괄호를 생략할 수 있다.
str -> System.out.println(str);
하지만 중괄호 안의 구현 부분이 한 문장이더라도 return문은 중괄호를 생략할 수 없다.
str -> return str.length(); (안된다, x)

3.return 생략하기
중괄호 안의 구현 부분이 return문 하나라면 중괄호와 return을 모두 생략하고 식만 쓴다.
(x, y) -> x + y // 두 값을 더하여 반환함
str -> str.length() // 문자열의 길이를 반환함

람다식 사용하기
람다식을 구현하기 위해서는 먼저 인터페이스를 만들고, 인터페이스에 람다식으로 구현할 메서드를 선언한다. 이를 함수형 인터페이스라고 한다.

1. 함수형 인터페이스 선언하기
@FunctionalInterface
public interface MyNumber {
	int getMax(int num1, int num2);
}

2. 람다식 구현과 호출
public class TestMyNumber {
	public static void main(String[] args) {
		MyNumber max = (x, y) -> x >= y ? x : y;
		System.out.println(max.getMax(10, 2));
	}
}

(x, y) -> {
if(x >= y)return x;
else return y;
}
위의 코드를 더 간단히 하면 아래와 같이 코드를 쓸 수 있다.
(x, y) -> x >= y ? x : y



함수형 프로그래밍은 순수 함수(pure function)를 구현하고 호출함으로써 외부 자료에 부수적 영향(side effect)을 주지 않도록 구현하는 방식이다. 순수 함수란 매개변수만을 사용하여 만드는 함수이다. 즉 함수 내부에서 함수 외부에 있는 변수를 사용하지 않아 함수가 수행되더라도 외부에 영향을 주지 않는다.

객체 지향 언어가 객체를 기반으로 구현하는 방식이라면 함수형 프로그램은 함수를 기반으로 하고, 자료를 입력받아 구현하는 방식이다. 함수가 입력받은 자료 이외에 외부 자료에 영향을 미치지 않기 때문에 여러 자료를 동시에 처리하는 병렬 처리에 적합하며, 안정되고 확장성 있는 프로그램을 개발할 수 있는 장점이 있다. 또 순수 함수로 구현된 함수형 프로그램은 함수 기능이 자료에 독립적일 수 있도록 보장한다. 즉 동일한 입력에 대해서는 동일한 출력을 보장하고, 다양한 자료에 같은 기능을 수행할 수 있다.


함수형 인터페이스
람다식은 메서드 이름이 없고 메서드를 실행하는 데 필요한 매개변수와 매개변수를 활용한 실행 코드를 구현하는 것이다. 
함수형 언어에서는 함수만 따로 호출할 수 있지만, 자바에서는 참조 변수 없이 메서드를 호출할 수 없다. 그러므로 람다식을 구현하기 위해 함수형 인터페이스를 만들고, 인터페이스에 람다식으로 구현할 메서드를 선언하는 것이다. 
람다식은 하나의 메서드를 구현하여 인터페이스 형 변수에 대입하므로 인터페이스가 두 개 이상의 메서드를 가져서는 안된다.
람다식은 이름이 없는 익명 함수로 구현하기 때문에 인터페이스에 메서드가 여러 개 있다면 어떤 메서드를 구현한 것인지 모호해진다. 따라서 람다식은 오직 하나의 메서드만 선언한 인터페이스를 구현할 수 있다.

@FunctionalInterface 애노테이션
프로그래밍을 하다보면 람다식으로 구현한 인터페이스에 실수로 다른 메서드를 추가할 수도 있다. 이러한 실수를 막기 위해 @FunctionalInterface 애노테이션을 사용한다. @FunctionalInterface를 사용하면 함수형 인터페이스라는 의미이고, 메서드를 두개 이상 선언하면 오류가 난다.
람다식으로 구현하려면 메서드를 하나만 포함하는 함수형 인터페이스만 가능하다


객체 지향 프로그래밍 방식과 람다식 비교
람다식을 사용하면 기존보다 간결한 코드를 구현할 수 있다. 메서드의 구현부를 클래스에 만들고, 이를 다시 인스턴스로 생성하고 호출하는 코드가 줄어들기 때문이다.


인터페이스 구현하기
@FunctionalInterface
public interface StringConcat {
	public void makeString(String s1, String s2);
}

인터페이스를 클래스와 람다식 두 가지 방식으로 구현이 가능하다.

1. 클래스에서 인터페이스 구현하기 <- 객체지향 프로그래밍 방식
makeString() 메서드를 수행하려면 StringConcat 인터페이스를 구현한 StringConCatImpl 클래스를 인스턴스로 생성해야 한다.
인스턴스 생성 후 참조 변수 concat1을 사용해 makeString() 메서드를 호출한다.

public class StringConcatImpl implements StringConcat{

	@Override
	public void makeString(String s1, String s2) {
		// TODO Auto-generated method stub
		System.out.println(s1 + "," + s2);
	}
	
}

public class TestStringConcat {
	public static void main(String[] args) {
		String s1 = "Hello";
		String s2 = "World";
		StringConcatImpl concat1 = new StringConcatImpl();
		concat1.makeString(s1, s2);
	}
}



2. 람다식으로 인터페이스 구현하기
람다식으로 인터페이스를 구현할 때 클래스를 따로 생성할 필요 없이 바로 메서드를 구현한다.
StringConcat 인터페이스 자료형인 concat2 변수에 대입하고, 이 변수를 사용하여 makeString() 메서드를 호출한다.

public class TestStringConcat {
	public static void main(String[] args) {
		String s1 = "Hello";
		String s2 = "World";
		StringConcat concat2 = (s, v) -> System.out.println(s + "," + v);
		concat2.makeString(s1, s2);
	}
}

위의 두 구현 방법을 비교해 보면, 람다식으로 구현하는 경우에 코드가 더 간결해지는 것을 알 수 있다. 람다식으로 구현하려면 메서드를 하나만 포함하는 함수형 인터페이스만 가능하다는 것을 기억하자.



익명 객체를 생성하는 람다식

자바는 객체 지향 언어다. 람다식은 객체 없이 인터페이스의 구현만으로 메서드를 호출할 수 있다. 어떻게 호출되는 것일까?

익명 내부 클래스는 클래스 이름 없이 인터페이스 자료형 변수에 바로 메서드 구현부를 생성하여 대입할 수 있다. 
즉 람다식으로 메서드를 구현해서 호출하면 컴퓨터 내부에서는 다음처럼 익명 클래스가 생성되고 이를 통해 익명 객체가 생성되는 것이다.
StringConcat concat3 = new StringConcat() {
	@Override
	public void makeString(String s1, String s2){
		System.out.println(s1 + "," + s2);
	}
}

람다식에서 사용하는 지역 변수
람다식은 익명 내부 클래스가 생성되므로 외부 메서드의 지역 변수를 사용하면 변수는 final 변수, 즉 상수가 된다.
클래스를 넘어가면 변수는 상수가 된다. <- 내부클래스


함수를 변수처럼 사용하는 람다식
프로그램에서 변수를 사용하는 경우는 크게 세 가지이다.
1. 특정 자료형으로 선언 후 값 대입하여 사용하기
int a = 10;
2. 매개변수로 전달하기
int add(int x, int y);
3. 메서드의 반환 값으로 반환하기
return num;

람다식으로 구현된 메서드도 변수에 대입하여 사용할 수 있고, 매개변수로 전달하고 반환할 수 있다.


인터페이스 변수에 람다식 대입하기
@FunctionalInterface
Interface PrintString {
	void showString(String str);
}
s -> System.out.println(s)

PrintString lambdaStr = s -> System.out.println(s);
lambdaStr.showString("hello lamda_1);



매개변수로 전달하는 람다식
람다식을 변수에 대입하면 이를 매개변수로 전달할 수 있다. 이때 전달되는 매개변수의 자료형은 인터페이스형이다.

@FunctionalInterface
interface PrintString {
	void showString(String str);
}

public class TestLambda {
	public static void main(String[] args) {
		PrintString lambdaStr = s -> System.out.println(s);
		lambdaStr.showString("hello lambda_1");
		showMyString(lambdaStr);
		
	}
	
	public static void showMyString(PrintString p) {
		p.showString("hello lambda_2");
	}

}



반환 값으로 쓰이는 람다식
다음과 같이 메서드의 반환형을 람다식의 인터페이스형으로 선언하면 구현한 람다식을 반환할 수 있다.
public static PrintString returnString() {
	PrintString str = s -> System.out.println(s + "world");
	return str;
}
public static PrintString returnString() {
	return s -> System.out.println(s + "world");
}

@FunctionalInterface
interface PrintString {
	void showString(String str);
}

public class TestLambda {
	public static void main(String[] args) {
		PrintString reStr = returnString();
		reStr.showString("hello ");
	}
	
	
	public static PrintString returnString() {
		return s -> System.out.println(s + "world");
	}

}

람다식은 함수의 구현부를 변수에 대입하고, 매개변수로 전달하고, 함수의 반환 값으로 사용할 수 있다. 마치 변수처럼 사용할 수 있는 것이다. 이는 함수형 프로그래밍의 특징 중 하나이다.




스트림
자료가 모여 있는 배열이나 컬렉션 또는 특정 범위 안에 있는 일련의 숫자를 처리하는 기능이 미리 구현되어 있다면 프로그램의 코드가 훨씬 간결해지고 일관성 있게 다룰 수 있을 것이다.
예를 들어 배열 요소를 특정 기준에 따라 정렬하거나, 요소 중 특정 값은 제외하고 출력하는 기능이다.
이렇게 여러 자료의 처리에 대한 기능을 구현해 놓은 클래스가 스트림이다. 스트림을 활용하면 배열, 컬렉션 등의 자료를 일관성 있게 처리할 수 있다. 자료에 따라 기능을 각각 새로 구현하는 것이 아니라 처리해야 하는 자료가 무엇인지와 상관없이 같은 방식으로 메서드를 호출할 수 있기 때문이다. 다른 말로는 자료를 추상화했다고 표현한다.
입출력을 위한 I/O스트림과 여기서 다루는 스트림은 전혀 다른 개념이다.









EX
int[] arr = {1, 2, 3, 4, 5};
for(int i = 0; i < arr.length; i++) {
	System.out.println(arr[i]);
}

int[] arr = {1, 2, 3, 4, 5};
Arrays.stream(arr).forEach(n -> System.out.println(n));
Arrays.stream(arr) : 스트림 생성부분
forEach(n -> System.out.println(n)) : 요소를 하나씩 꺼내어 출력하는 기능


스트림 연산
스트림 연산의 종류에는 크게 중간 연산과 최종 연산 두 가지가 있다. 중간 연산은 자료를 거르거나 변경하여 또 다른 자료를 내부적으로 생성한다. 최종 연산은 생성된 내부 자료를 소모해 가면서 연산을 수행한다. 따라서 최종 연산은 마지막에 한 번만 호출된다. 그리고 최종 연산이 호출되어야 중간 연산의 결과가 만들어 진다.

중간 연산 - filter(), map()
1.filter()는 조건을 넣고 그 조건이 참이 되는 경우만 추출하는 경우에 사용한다. 문자열 배열이 있을 때 문자열의 길이가 5이상인 경우만 출력하는 코드는 다음과 같다.
sList.stream().filter(s -> s.length() >= 5).forEach(s -> System.out.println(s));
sList.stream() : 스트림 생성
filter(s -> s.length() >= 5) : 중간 연산
forEach(s -> System.out.println(s)) : 최종 연산

map()은 클래스가 가진 자료 중 이름만 출력하는 경우에 사용한다. 예를 들어 고객 클래스가 있다면 고객 이름만 가져와서 출력할 수 있다. map()은 요소들을 순회하여 다른 형식으로 변환하기도 한다. 
customerList.stream().map(c -> c.getName()).forEach(s -> System.out.println(s));
customerList.stream() : 스트림 생성
map(c -> c.getName()) : 중간 연산
forEach(s -> System.out.println(s)) 최종 연산

filter()와 map() 둘 다 함수를 수행하면서 해당 조건이나 함수에 맞는 결과를 추출해 내는 중간 역할을 한다. 그리고 최종 연산으로 중간 연산 결과를 출력한다.


최종 연산 - forEach(), count(), sum(), reduce()
최종 연산은 스트림의 자료를 소모하면서 연산을 수행하기 때문에 최종 연산이 수행되고 나면 해당 스트림은 더 이상 사용할 수 없다. 최종 연산은 결과를 만드는 데 주로 사용한다. forEach()는 요소를 하나씩 꺼내는 기능을 한다. sum()은 배열 요소의 합계를 구하는 기능을 한다. count()는 배열 요소의 개수를 구하는 연산을 수행한다. count()의 반환 값이 long형이다.
sum(), count() 이외에 max(), min(), average() 등 통계 연산을 위한 메서드도제공한다.

public class IntArrayTest {
	public static void main(String[] args) {
		int[] arr = {1, 2, 3, 4, 5};
		
		int sumVal = Arrays.stream(arr).sum();
		int count = (int)Arrays.stream(arr).count();
		
		System.out.println(sumVal);
		System.out.println(count);
	}
}




Collection에서 스트림 생성하고 사용하기

Collection 인터페이스의 메서드에는 다음과 같은 메서드가 있다.
Stream<E> stream() : 스트림 클래스를 반환한다.

ex
List<String> sList = new ArrayList<String>();
sList.add("Tomas");
sList.add("Edward");
sList.add("Jack");

Collection에서 stream() 메서드를 사용하면 이 클래스는 제네릭형을 사용해 다음과 같이 자료형을 명시할 수 있다.
Stream<String> stream = sList.stream();
이렇게 생성된 스트림은 내부적으로 ArrayList의 모든 요소를 가지고 있다.
모든 요소를 하나씩 가져와서 처리할 때 스트림의 forEach() 메서드를 활용한다.

Stream<String> stream = sList.stream();
stream.forEach(s -> System.out.println(s));

forEach() 메서드는 내부적으로 반복문이 수행된다. forEach 메서드가 수행되면 요소가 하나씩 차례로 변수 s에 대입되고 이를 매개변수로 받아 출력문이 호출된다.

이번에는 ArrayList에 저장된 이름을 정렬하여 그 결과를 출력해 보자. 앞에서 stream 변수에 스트림을 생성했지만 forEach() 메서드가 수행되면서 자료가 소모되었다. 따라서 스트림을 새로 생성해야 한다.

Stream<String> stream2 = sList.stream()
stream2.sorted().forEach(s -> System.out.println(s));

sorted() 메서드를 사용하려면 정렬 방식에 대한 정의가 필요하다. 따라서 사용하는 자료 클래스가 Comparable 인터페이스를 구현해야 한다. 만약 구현되어 있지 않다면 sorted() 메서드의 매개변수로 Comparator 인터페이스를 구현한 클래스를 지정할 수 있다. Arraylist 이외에 다른 Collection의 자료도 같은 방식으로 정렬하고 출력할 수 있다. 이것이 스트림을 사용하는 장점이다.


스트림의 특징
1. 자료의 대상과 관계없이 동일한 연산을 수행한다.
스트림은 컬렉션의 여러 자료 구조에 대해 작업을 일관성 있게 처리할 수 있는 메서드를 제공한다.

2. 한 번 생성하고 사용한 스트림은 재사용할 수 없다.
어떤 자료에 대한 스트림을 생성하고 이 스트림에 메서드를 호출하여 연산을 수행했다면 해당 스트림을 다시 다른 연산에 사용할 수 없다. 다른 기능을 호출하려면 스트림을 새로 생성해야 한다.

3. 스트림의 연산은 기존 자료를 변경하지 않는다.
스트림 연산을 위해 사용하는 메모리 공간이 별도로 존재하므로, 스트림의 여러 메서드를 호출하더라도 기존 자료에는 영향을 미치지 않는다.

4. 스트림의 연산은 중간 연산과 최종 연산이 있다.
스트림에서 사용하는 메서드는 크게 중간 연산과 최종 연산 두 가지로 나뉜다. 스트림에 중간 연산은 여러 개가 적용될 수 있고, 최종 연산은 맨 마지막에 한 번 적용된다. 만약 중간 연산이 여러 개 호출되었더라도 최종 연산이 호출되어야 스트림의 중간 연산이 모두 적용된다. 예를 들어 자료를 정렬하거나 검색하는 중간 연산이 호출되어도 최종 연산이 호출되지 않으면 정렬이나 검색한 결과를 가져올 수 없다. 이를 지연 연산(lazy evaluation)이라고 한다.


프로그래머가 기능을 지정하는 reduce() 연산
reduce() 연산은 내부적으로 스트림의 요소를 하나씩 소모하면서 프로그래머가 직접 지정한 기능을 수행한다.

JDK에서 제공하는 reduce() 메서드의 정의는 다음과 같다.
T reduce(T identity, BinaryOperator<T> accumulator)
첫 번째 매개변수 T identity는 초깃값을 의미하고 두 번째 매개변수 BinaryOperator<T> accumulator는 수행해야 할 기능이다. BinaryOperator 인터페이스는 두 매개변수로 람다식을 구현하며 이 람다식이 각 요소가 수행해야 할 기능이 된다. 이때 BinaryOperator 인터페이스를 구현한 람다식을 직접 써도 되고, 람다식이 길면 인터페이스를 구현한 클래스를 생성하여 대입해도 된다. 또한 BinaryOperator는 함수형 인터페이스로 apply() 메서드를 반드시 구현해야 한다.
apply()메서드는 두 개의 매개변수와 한 개의 반환 값을 가지는 데, 세 개 모두 같은 자료형이다. reduce() 메서드가 호출될 때 BinaryOperator의 apply() 메서드가 호출된다.

reduce() 메서드를 사용해 모든 요소의 합을 구할 때, 두 번째 매개변수에 람다식을 직접 쓰는 경우는 다음과 같다.
Arrays.stream(arr).reduce(0, (a, b) -> a + b);

초깃값은 0이고, 스트림 요소가 매개변수로 전달되면서 합을 구한다. 내부적으로는 반복문이 호출되면서 람다식에 해당하는 부분이 리스트 요소만큼 호출되는 것이다. 
따라서 reduce() 메서드에 어떤 람다식이 전달되느냐에 따라 다양한 연산을 수행할 수 있다. reduce()는 처음부터 마지막까지 모든 요소를 소모하면서 람다식을 반복해서 수행하므로 최종 연산이다.

스트림은 많은 데이터 속에서 우리가 원하는 데이터를 추출하고 적용하고 계산하고 출력하는 등의 기능을 제공한다.

class CompareString implements BinaryOperator<String> {

	@Override
	public String apply(String s1, String s2) {
		if(s1.getBytes().length >= s2.getBytes().length) return s1;
		else return s2;
	}
	
}

public class ReduceTest {
	public static void main(String[] args) {
		String[] greetings = {"안녕하세요~~~", "hello", "Good morning", "반값습니다^^"};
		System.out.println(Arrays.stream(greetings).reduce("",(s1, s2) -> {
							if(s1.getBytes().length >= s2.getBytes().length) return s1;
							else return s2;}));
		
		String str = Arrays.stream(greetings).reduce(new CompareString()).get();
		System.out.println(str);
	}
}



System.out.println("== 고객 명단 추가된 순서대로 출력 ==");
		customerList.stream().map(c -> c.getName()).forEach(s -> System.out.println(s));
		
		int total = customerList.stream().mapToInt(c -> c.getPrice()).sum();
		System.out.println("총 여행 비용은 :" + total + "입니다.");
		
		System.out.println("== 20세 이상 고객 명단 정렬하여 출력 ==");
		customerList.stream().filter(c -> c.getAge() >= 20)
		.map(c -> c.getName()).sorted().forEach(s -> System.out.println(s));






지역 내부 클래스에서 외부 클래스 메서드의 지역 변수를 사용할 수 있지만 그 값을 변경하면 오류가 발생한다. 이때 사용하는 지역 변수는 final변수가 되기 때문이다.

내부 클래스 중 클래스 이름 없이 인터페이스나 추상 클래스 자료형에 직접 대입하여 생성하는 클래스를 익명 내부 클래스라고 한다.

자바에서 제공하는 함수형 프로그래밍 방식으로 인터페이스의 메서드를 직접 구현하는 코드를 람다식이라고 한다.

람다식으로 구현할 수 있는 인터페이스는 메서드를 하나만 가져야 한다. 이러한 인터페이스를 함수형 인터페이스라고 한다.

자바에서 자료를 처리를 추상화하여 여러 자료형의 자료를 동일하게 처리할 수 있도록 제공하는 클래스를 스트림이라고 한다.

public interface Calc {
	public int add(int num1, int num2);
}


Calc calc = (num1, num2) -> num1 + num2
Calc calc = (x, y) -> x + y

calc.add(1,2);





alt + shift + s
생성자와 getter, setter 자동생성 단축키

ctrl + space
만들 수 있는 메서드 목록보여줌??
hashCode, equals, toString등을 오버라이딩할 때 쓰면 좋음


내부클래스
클래스를 넘어가면 변수는 상수가 된다.

함수 오버로딩에서 반환형은 영향을 미치지 않는다.
-> 반환형은 같든 다르든 상관 없다.














Runnable 인터페이스는 자바에서 스레드를 만들 때 사용하는 인터페이스로 java.lang 패키지에 선언되어 있으며 반드시 run() 메서드를 구현해야 한다.


메서드나 변수가 무엇인지 궁금할 때???
ctrl을 누른 상태에서 클릭하면 된다.


private 생성자를 쓰는 경우
외부에서 객체를 생성하지 못하도록 할 때

