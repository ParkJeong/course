제네릭

어떤 값이 하나의 참조 자료형이 아닌 여러 참조 자료형을 사용할 수 있도록 프로그래밍 하는 것
여러 참조 자료형이 쓰일 수 있는 곳에 특정한 자료형을 지정하지 않고, 클래스나 메서드를 정의한 후 사용하는 시점에 어떤 자료형을 사용할 것이지 지정하는 방식이다.

public class GenericPrinter<T>{
	private T material;

	public void setMaterial(T material){
		this.material = material;
	}

	public T getMaterial(){
		return material;
	}
}
T를 자료형 매개변수라고 부른다.


<>
다이아몬드 연산자


static 변수의 자료형이나 static 매서드 내부 변수의 자료형으로 T(자료형 매개변수)를 사용할 수 없다.
-> T의 자료형생성보다 static의 생성이 빠르기때문이다.
T의 자료형이 정해지는 순간은 제네릭 클래스의 인스턴스가 생성되는 순간이다. static변수와 static 메서드는 인스턴스가 생성되기 전에 클래스가 선언된 순간에 생성된다. 

자료형 매개변수로 T외에 다른 문자도 사용한다. E는 Element, K는 Key, V는 Value를 의미한다. 아무 문자나 사용가능하나 의미 있는 문자를 쓰도록 하자.


제네릭 메서드
메서드 선어부나 메서드의 매개변수로 자료형 매개변수 T를 사용한 메서드
static 메서드에서도 활용할 수 있다.


T 자료형에 사용할 자료형을 제한하는 <T extends 클래스>
public class GenericPrinter<T extends Material>{
	private T material;
	...
}
Material을 상속받은 class만 T에 사용할 수 있다.
T가 상속받은 상위 클래스를 GenericPrinter클래스 안에서 사용할 수 있다.


public class Point<T, V> {
	...
}

public class GenericMethod {
	public static <T, V> double makeRectangle(Point<T, V> p1, Point<T, V> p2){
}

	public static void main(String[] args) {
		double rect = GenericMethod.<Integer, Double>makeRectangle(p1, p2);
	}
}

GenericMethod클래스는 제네릭 클래스가 아니다. 제네릭 클래스가 아니라도 내부에 제네릭 클래스를 구현할 수 있다. makeRectangle에서 사용하는 T와 V는 makeRectangle() 메서드 내부에서만 유효하게 사용할 수 있다.

class Shape<T> {
	public static <T, V> double makeRectangle(Point<T, V> p1, Point<T, V> p2){
	...
	}
}
이때 Shape<T>에서 사용한 T와 makeRectangle()에서 사용한 T는 전혀 다른 의미다. 위에서 설명했듯이 makeRectangle() 메서드에서 사용한 T는 메서드 내에서만 유효하다.




컬렉션 프레임워크
자바에서 제공하는 자료 구조 라이브러리이다.
자바에서는 필요한 자료구조를 미리 구현하여 java.util 패키지에서 제공하고 있는데, 이를 컬렉션 프레임워크라고 한다.
자료 구조(data structure)는 프로그램 실행 중 메모리에 자료를 유지, 관리하기 위해 사용한다.

컬렉션 프레임워크의 전체 구조는 Collection 인터페이스와 Map 인터페이스를 기반으로 이루어져 있다.
Collection 인터페이스는 하나의 자료를 모아서 관리하는 데 필요한 기능을 제공하고, Map 인터페이스는 쌍으로 된 자료들을 관리하는 데 유용한 기능을 제공한다.


Collection 인터페이스
Collection 인터페이스 하위에 List 인터페이스와 Set 인터페이스가 있다.
List를 구현한 클래스는 순차적인 자료를 관리하는 데 사용하는 클래스이고, Set 인터페이스는 집합을 생각하면 된다. 집합은 순서와 상관없이 중복을 허용하지 않는다. 따라서 Set 계열의 클래스는 아이디처럼 중복되지 않는 객체를 다루는 데 사용한다.

List 인터페이스
순서가 있는 자료관리, 중복 허용. List 인터페이스를 구현한 클래스는 ArrayList, Vector, LinkedList, Stack, Queue 등이 있다.

Set 인터페이스
순서가 정해져 있지 않음, 중복을 허용하지 않음.
Set 인터페이스를 구현한 클래스는 HashSet, TreeSet 등이 있다.

Collection 인터페이스에 선언된 메서드 중 자주 사용하는 메서드
boolean add(E e)
void clear()
Iterator<E> iterator : Collection을 순환할 반복자(Iterator)를 반환한다.
boolean remove(Object o)
int size()


Map 인터페이스
하나가 아닌 쌍으로 되어 있는 자료를 관리하는 메서드들이 선언되어 있다.
key-value 쌍이라고 표현하는데 이 때 키 값은 중복될 수 없고 유일하게 딱 하나이다. key 값에 대응하는 value 값은 여러 개일 수도 있고 중복될 수도 있다.
Map은 기본적으로 검색용 자료 구조다. 즉 어떤 key 값을 알고 있을 대 value를 찾기 위한 자료 구조다.

Map 인터페이스에 선언된 메서드 중 주요 메서드
V put(K key, V value)
V get(K key)
boolean isEmpty()
boolean containsKey(Object key)
boolean containsValue(Object value)
Set keySet()
Collection values()
V remove(key)
boolean remove(Object key, Object value)


List 인터페이스
순차 자료 구조의 대표적인 예는 배열이다.

ArrayList 클래스
객체 배열을 구현한 클래스 

Vector 클래스
ArrayList처럼 배열을 구현한 클래스이다.

ArrayList와 Vector의 가장 큰 차이는 동기화 지원여부이다.
동기화란 두 개 이상의 스레드가 동시에 Vector를 사용할 때 오류가 나지 않도록 실행 순서를 보장하는 것이다.

스레드란 간단히 말하면 작업 단위이다. 프로그램이 메모리에서 수행되려면 스레드 작업이 생성되어야 한다. 이때 하나의 스레드만 수행되면 단일 스레드라고 하고 두 개 이상의 스레드가 동시에 실행되는 경우를 멀티스레드라고 한다. 두 개 이상의 스레드가 동시에 실행되면 같은 메모리 공간에 접근하기 때문에 변수 값이나 메모리 상태에 오류가 생길 수 있다. 이때 메모리에 동시에 접근하지 못하도록 순서를 맞추는 것이 동기화이다.

두 작업이 동시에 실행되는 멀티스레드 환경이 아닌 경우에는 ArrayList를 사용. Vector보다 빠르다.
왜냐하면 동기화를 구현하기 위해서는 동시에 작업이 이루어지는 자원에 대해 잠금을 수행하기 때문이다.
ArrayList를 사용해서 구현했는데 나중에 프로그램에서 동기화가 필요하다면 Vector로 바꾸지 않고 다음과 같이 ArrayList 생성 코드를 쓰면 된다.
Collections.synchronizedList(new ArrayList<String>());


LinkedList 클래스
배열은 처음 배열을 생성할 때 정적 크기로 선언하고, 물리적 순서와 논리적 순서가 동일하다. 배열은 중간에 자료를 삽입하거나 삭제할 때 나머지 자료를 이동시켜 빈 공간을 만들지 않고 연속된 자료를 구현한다. 또한 처음 선언한 배열 크기 이상으로 요소가 추가되는 경우에는 크기가 더 큰 배열을 새로 생성하여 각 요소를 복사해야 하는 번거로움이 있다.
링크드 리스트의 각 요소는 다음 요소를 가리키는 주소 값을 가진다. 따라서 물리적인 메모리는 떨어져 있어도 논리적으로는 앞뒤 순서가 있다. 같은 List 인터페이스를 구현한 ArrayList에 비해 중간에 자료를 넣고 제거하는 데 시간이 적게 걸린다는 장점이 있고, 크기를 동적으로 증가시킬 수 있다.
링크드 리스트의 각 요소는 요소의 자료와 다음 요소의 주소를 저장하는 부분으로 구현된다.

배열은 생성할 때 용량을 지정하고, 용량보다 더 많은 요소가 추가된 경우에 용량을 늘려 가며 수행한다. 그러나 링크드 리스트는 요소를 추가할 때마다 동적으로 요소의 메모리를 생성하기 때문에 배열처럼 용량을 늘리고 요소 값을 복사하는 번거로움이 없다. 또한 링크드리스트는 자료를 중간에 추가하거나 삭제할 때 자료의 이동이 배열보다 적다. 이런 면에서 링크드 리스트가 배열에 비해 더 편리한 자료 구조라 생각할 수 있다. 하지만 배열이 링크드 리스트보다 효율적인 경우도 있다.
어떤 요소의 위치를 찾을 때를 생각해 보자. 배열은 물리적으로 연결된 자료 구조 이므로 i 번째 요소 메모리 위치를 바로 계산할 수 있어 접근이 빠르다. 예를 들어 int형 배열의 두 번째 자료는 처음 주소부터 8바이트 떨어진 위치라고 바로 알 수 있다. 그리고 배열이 링크드 리스트보다 구현하기도 쉽다.
따라서 사용하는 자료의 변동(삽입,삭제)이 많은 경우에는 링크드 리스트를, 자료 변동이 거의 없는 경우에는 배열을 사용하는 것이 효율적이다.


Collection 요소를 순회하는 Iterator
순서가 없는 Set 인터페이스를 구현한 경우에는 get(i) 메서드를 사용할 수 없다. 이때 Iterator를 사용한다. Iterator는 Collection 인터페이스를 구현한 객체에서 미리 정의되어 있는 Iterator()메서드를 호출하여 참조한다.
Iterator ir = 인스턴스.iterator();
Iterator를 사용하여 모든 요소를 순회할 때 다음 두 가지 메서드를 사용한다.
boolean hasNext()
E next()

Iterator<Member> ir = arrayList.Iterator();
while(ir.hasNext()){
	Member member = ir.next();
}
Iterator<Member>와 같이 제네릭 자료형으로 Iterator가 순회할 요소의 자료형을 지정한다.



Set 인터페이스
순서와 상관없이 중복을 허용하지 않는 경우에는 Set 인터페이스를 구현한 클래스를 사용한다.

HashSet 클래스
집합 자료 구조를 구현하며 중복을 허용하지 않는다.

boolean remove(Object o)


객체가 동일함을 구현하기
기본적으로 인스턴스 주소가 같으면 같은 객체다. 논리적으로 같음을 구현하기 위해 equals()와 hashCode()를 재정의해야한다.

@Override
public int hashCode(){
	return memberId;
}

@Override
public boolean equals(Object obj){
	if(obj instanceof Member){
		Member member = (Member)obj;
		if(this.memberId == member.memberId)
			return true;
		
		else
			return false;
	}
	return false;
}


TreeSet 클래스
Tree로 시작하는 클래스는 데이터를 추가한 후 결과를 출력하면 결과 값이 정렬된다. TreeSet는 자료의 중복을 허용하지 않으면서 출력 결과 값을 정렬하는 클래스이다.
이 정렬을 구현하기 위해 자바는 이진 트리(binary tree)를 사용한다.

이진 검색 트리
트리는 자료 사이의 계층 구조를 나타내는 자료 구조이다.
트리 자료 구조에서 각 자료가 들어가는 공간을 노드라고 한다. 그리고 위 아래로 연결된 노드의 관계를 부모-자식 노드(parent-child node)라고 한다. 이진 검색 트리는 노드에 저장되는 자료의 중복을 허용하지 않고, 부모가 가지는 자식 노드의 수가 2개 이하이다. 또한 왼쪽에 위치한 자식 노드는 부모 노드보다 항상 작은 값을 가지고 오른쪽에 위치한 자식 노드는 부모 노드보다 큰 값을 가진다.

따라서 TreeSet의 요소로 추가할 때 어떤 기준으로 노드를 비교하여 트리를 형성해야 하는지를 구현해야한다. 이때 사용하는 인터페이스가 Comparable 또는 Comparator이다.


Comparable 인터페이스

public class Member implements Comparable<Member> {
	...
}

자기 자신과 전달받은 매개변수를 비교하는 Comparable 인터페이스

Comparable 인터페이스에는 compareTo() 추상메서드가 포함되어 있다. 따라서 Comparable 인터페이스를 구현하는 Member 클래스에서 compareTo() 메서드를 구현해야 한다.
public class Member implements Comparable<Member>{
	@Override
	public int compareTo(Member member){
		return (this.memberId - member.memberId)
	}
}

	23
     10    48
	15

1. 7과 23을 비교하면 7이 더 작으므로 23의 왼쪽 자식 노드 쪽으로 이동한다.
2. 7을 10과 비교하면 이번에도 7이 더 작으므로 10의 왼쪽 자식 노드 쪽으로 이동한다.
3. 10의 왼쪽 자식 노드가 비어 있으므로(null) 그 자리에 7을 추가한다.

	23
     10    48
   7    15
  

compareTo()메서드에서는 새로 추가되는 값 7이 this이고 비교되는 값 23과 10이 매개변수로 전달된다.
compareTo()는 프로그래머가 호출하는 메서드가 아닌 객체가 TreeSet에 요소를 추가할 때 호출되는 메서드이다.
compareTo() 메서드처럼 프로그래머가 작성하지만 시스템이나 자바 컬렉션 프레임워크가 호출하는 메서드를 콜백(callback)메서드라고 한다.

내림차순으로 정렬하려면 Member 클래스의 compareTo()메서드를 다음과 같이 수정하면 된다. 반환 값을 음수로 만들면 내림차순으로 정렬된다.
@Override
public int compareTo(Member member) {
	return (this.memberId - member.memberId)*(-1);
}


두 매개변수를 비교하는 Comparator 인터페이스
Comparator 인터페이스는 compare() 메서드를 구현해야 한다.
public class Member2 implements Comparator<Member2>{

	@Override
	public int compare(Member2 mem1, Member2 mem2){
		return mem1.getMemberId() - mem2.getMemberId();
	}
}
첫 번째 매개변수가 더 클 때 양수를 반환하여 오름차순으로 정렬된다.

Comparator를 사용할 때 유의할 점은 TreeSet 생성자에 Comparator를 구현한 객체를 매개변수로 전달한다는 것이다. 즉 다음과 같이 코드를 구현해야 한다.
TreeSet<Member> treeSet = new TreeSet<Member>(new Member());

일반적으로 Comparator 인터페이스보다 Comparable 인터페이스를 더 많이 쓴다. 다만 어떤 클래스가 이미 Comparable 인터페이스를 구현한 경우에 이 클래스의 정렬 방식을 정의할 때 Comparator 인터페이스를 사용할 수 있다.
예를 들어 String 클래스는 Comparable 인터페이스를 이미 구현했다. 그리고 Comparable 인터페이스의 compareTo() 메서드는 오름차순 정렬을 구현하고 있다. 만약 정렬 방식을 내림차순으로 바꾸고 싶은 경우에는 어떻게 해야하나?? String 클래스의 경우는 final로 선언되어 있어서 상속받아 compareTo() 메서드를 재정의할 수도 없다. 이러한 경우에 Comparator 인터페이스를 사용한다.

class MyCompare implements Comparator<String> {
	@Override
	public int compare(String s1, String s2){
		return (s1.compareTo(s2)) * -1;
	}
}
public class CompareTest {
	public static void main(String[] args){
		Set<String> set = new TreeSet<String>(new MyCompare());
	}
}




Map 인터페이스
자료를 쌍으로 관리하는 데 필요한 메서드가 정의되어 있다. key-value 쌍으로 이루어진 객체의 key 값은 유일하며 value 값은 중복될 수 있다. Map 인터페이스를 구현한 클래스는 내부적으로 해시 알고리즘에 의해 구현되어 있다.


HashMap 클래스
Map 인터페이스를 구현한 클래스 중 가장 많이 사용한다. HashMap에서 자료를 관리하는 방식은 해시 방식이다. 해시 방식의 자료를 저장하는 공간을 해시 테이블이라고 한다. key값이 정해지면 그에 대응하는 해시 테이블의 저장 위치가 정해지는데 이런 위치를 계산하는 함수가 '해시 함수'이다. 아래와 같이 해시 함수를 표현할 수 있다.
index = hash(key);

서로 다른 key 값에 같은 index가 반환되는 충돌(collision)이 발생하는 경우도 있다. 따라서 해시 테이블에 데이터를 꽉 채우지 않고 적정 수준이 되면 테이블을 확장해 충돌 발생 확률을 낮춘다. 또한 Map 인터페이스에서 사용하는 key 값은 중복될 수 없으므로 equals() 메서드와 hashCode() 메서드를 재정의하여 사용하는 것이 좋다.
자바는 해시 테이블의 75%까지만 사용하고 컴파일러가 자동으로 메모리를 확장한다.

public boolean removeMember(int memberId){
	if(hashMap.containsKey(memberId)){
		hashMap.remove(memberId);
		return true;
	}
	System.out.println(memberId + "가 존재 하지 않습니다".);
	return false;
}

public void showAllMember(){
	Iterator<Integer> ir = hashMap.keySet().Iterator();
	while(ir.hasNext()){
		int key = ir.next();
		Member member = hashMap.get(key);
		System.out.println(member);
	}
}

HashMap과 Hashtable
Hashtable 클래스는 Vector 클래스와 마찬가지로 멀티스레드를 위한 동기화를 제공한다. 멀티스레드 환경이 아니라면, Hashtable보다는 HashMap을 사용하는 것이 낫다.


TreeMap 클래스
Map 인터페이스를 구현한 클래스 중 key 값으로 자료를 정렬하려면 TreeMap을 사용할 수 있다. TreeMap은 TreeSet와 마찬가지로 이진 검색 트리로 구현되었다. key 값으로 정렬하므로 key 값에 해당하는 클래스에 Comparable이나 Comparator 인터페이스를 구현해야 한다.

자료 구조를 사용하기 편리하도록 자바에서 제공하는 라이브러리를 컬렉션프레임워크라고 한다.

클래스에서 여러 자료형을 사용할 때 자료형을 명시하지 않고 자료형을 의미하는 문자로 선언한 후 실제 인스턴스를 생성할 때 자료형을 명시하는 프로그래밍 방식을 제네릭프로그래밍이라고 한다.

Collection 인터페이스를 구현한 클래스를 순회하기 위해 사용하는 인터페이스는 Iterator이다.

TreeSet을 사용할 때 Comparable 인터페이스를 구현해야 하는 이유는??
TreeSet에 객체가 추가될 때 정렬되는 방식을 구현해야 하기 때문이다.



String str1 = "ab";
String str2 = "cd";
str1 = "test";
System.out.println(str1 + str2); // testcd




오버로딩
매개변수를 다르게 해서 같은 이름의 메서드를 2개이상 만들 때 메서드가 오버로딩되었다고 한다.
매개변수의 개수, 타입, 순서중 1개라도 다르면 된다.
반환형은 오버로딩에 영향을 미치지 않는다. 즉 반환형은 메서드를 구분할 때 고려대상이 아니다. 메서드를 구분할 때는 메서드 이름과 매개변수(개수, 타입, 순서)로 구분한다.

/*
	 * 오버로딩 - 같은 이름의 메서드를 여러개 생성하는 것
	 * 규칙
	 * 1. 이름이 같음
	 * 2. 반환유형은 오버로딩에 영향을 미치지 않습니다.
	 * 3. 매개변수 타입이 달라야 한다.
	 * 4. 매개변수 개수가 달라야 한다.
	 * 5. 매개변수 순서가 달라야 한다.
	 * -> 즉 완전히 동일하지 않으면 된다.
	 */



