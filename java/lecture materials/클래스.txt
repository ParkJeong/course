
객체지향 프로그래밍 OOP Object-Oriented Programming
컴퓨터 프로그램을 여러 개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고, 데이터를 처리할 수 있다.
좀 더 나은 프로그램을 만들기 위한 프로그래밍 패러다임으로 로직을 상태와 행위로 이루어진 객체로 만드는 것이다.
이 객체들을 마치 레고 블럭처럼 조립해서 하나의 프로그램을 만든느 것이 객체지향 프로그래밍이라고 할 수 있다.
객체는 변수와 메소드를 그룹핑(묶은 것)한것이다.




멤버 변수(속성 property, 특성 attribute)
member variable
클래스 내부에 선언하여 객체 속성을 나타내는 변수


클래스형이란 다른 말로 객체 자료형 또는 참조 자료형이라고 한다.

멤버 함수 또는 메서드
클래스 내부에서 멤버 변수를 사용하여 클래스 기능을 구현한 것


패키지
클래스 파일의 묶음
패키지의 계층 구조를 만드는 작업은 소스코드를 어떠한 계층 구조로 관리할지 구성하는 것이다.
계층 구조를 잘 구성해야 소스 코드 관리와 유지 보수가 편리하다.

클래스의 전체 이름은 패키지이름.클래스이름이다.
클래스 이름이 같다고 해도 패키지 이름이 다르면 클래스 전체 이름(class full name)이 다른 것이므로 다른 클래스가 된다.
aaa 패키지 하위의 Student 클래스의 실제 이름은 aaa.Student이고, bbb 패키지 하위의 Student 클래스의 실제 이름은 bbb.Student이다.


클래스 내부에서 사용하는 멤버함수가 있다. 이를 메서드라고 하는데 메서드는 멤버 변수를 사용하여 클래스의 기능을 구현한다.
메서드는 함수에 객체 지향 개념이 포함된 용어로 이해하면 된다.
메서드 이름은 해당 클래스를 사용하는 코드의 입장에서 짓는 것이 좋다.

자바에는 이름 짓기 규약(naming convention)이 딱히 있는 것이 아니다. 코딩 컨벤션(coding convention)이다.
1.클래스 이름은 대문자로 시작
2.패키지 이름은 모두 소문자로 만든다.
3.하나의 자바 파일에 클래스가 여러 개 있을 수도 있지만, public 클래스는 단 하나이고 
이 public 클래스 이름과 자바 파일 이름은 같아야 한다.
4.변수와 메서드 이름은 소문자로 시작하며, 낙타표기법(camel notation)을 이용한다.

클래스는 멤버 변수와 메서드로 구성되어 있다.
멤버 변수는 클래스 속성을 나타내고, 메서드는 멤버 변수를 이용하여 클래스 기능을 구현한다.
멤버 변수를 인스턴스 변수라고도 부른다.

public static void main(String[] args)함수
main()함수는 자바 가상 머신(Java Virtual Machine; JVM)이 프로그램을 시작하기 위해 호출하는 함수다.
클래스 내부에 만들지만 클래스의 메서드는 아니다.

main함수에서 클래스를 사용하는 방법
1. 우리가 만든 클래스 내부에 main()함수를 만드는 것
2. 외부에 테스트용 클래스를 만들어 사용하는 것

클래스 내부에 main()함수를 만들면 이 클래스가 프로그램의 시작 클래스가 된다.

사용하려는 클래스가 같은 패키지에 있다면 바로 사용할 수 있다. 만약 다른 패키지에 있다면 import문을 사용해서 사용하려는 클래스를 불러와야 한다.


인스턴스를 생성하는 코드
클래스형 변수_이름 = new 생성자;

클래스 자료형 변수를 선언하고 new 예약어로 생성자를 호출하여 대입하면 새로운 클래스가 생성된다. 인스턴스가 생성된다는 것은 클래스를 실제 사용할 수 있도록 메모리 공간(힙 메모리)에 올리다는 뜻이다. 그리고 인스턴스를 가리키는 클래스형 변수를 '참조 변수'라고 한다.
Student studentAhn = new Student();
위 코드는 Student 클래스 자료형으로 studentAhn 변수를 선언하고 new Student();로 Student 클래스를 생성하여 studentAhn에 대입한다는 뜻이다. 이때 studentAhn을 참조 변수라고 하고, 이 변수가 생성된 인스턴스를 가리킨다.


객체란 '의사나 행위가 미치는 대상'이며 이를 코드로 구현한 것이 클래스이다. 그리고 클래스가 메모리 공간에 생성된 상태를 인스턴스라고 한다. 생성된 클래스의 인스턴스를 객체라고도 한다.
클래스란 객체를 추상화시킨 것이다. 객체의 속성과 기능을 코드로 만든 것이 클래스이다. 객체의 속성을 멤버변수로 기능을 메서드로서 코딩한 것이 클래스이다.

클래스의 생성자를 호출하면 인스턴스가 만들어진다. 

. <- 도트연산자라 부른다.
참조변수를 사용하면 인스턴스의 멤버변수와 메서드를 참조하여 사용할 수 있다. 이때 도트(.) 연산자를 사용한다.

new Student()를 선언하면 Student 하나가 생성되는데 Student는 studentID, studentName 등의 멤버 변수를 가지고 있다.
이들 변수를 저장할 공간이 필요한데 이때 사용하는 메모리가 힙 메모리(heap memory)이다. 클래스 생성자를 하나 호출하면 인스턴스가 힙 메모리에 생성되는 것이다.
Student studentAhn = new Student();
위와 같이 생성된 클래스를 studentAhn 변수에 대입하면, 인스턴스가 저장된 메모리를 studentAhn 변수가 가리킨다.
studentAhn 변수는 지역 변수이다. 지역변수는 스택 메모리에 생성된다. 그리고 인스턴스는 힙 메모리에 생성된다. 지역 변수 studentAhn에 생성된 인스턴스를 대입하는 것은 studentAhn에 인스턴스가 생성된 힙 메모리의 주소를 대입한다는 것과 같은 의미이다.

힙(heap)은 프로그램에서 사용하는 동적 메모리(dynamic memory)공간을 말한다. 일반적으로 프로그램은 스택, 힙, 데이터 이렇게 세 영역을 사용하는데, 객체가 생성될 때 사용하는 공간이 힙이다. 힙은 동적으로 할당되며 사용이 끝나면 메모리를 해제해 주어야 한다. C나 C++에서는 프로그래머가 직접 메모리를 해제해야 하지만, 자바에서는 가비지 컬렉터(garbage collector)가 자동으로 메모리를 해제해준다.

참조 변수는 힙 메모리에 생성된 인스턴스를 가리킨다. 
힙 메모리에 생성된 인스턴스의 메모리 주소는 참조 변수에 저장된다. 인스턴스의 메모리 주소는 '클래스이름@주소 값'이다.
여기에 나오는 주소 값은 다른 말로 해서 해시 코드(hash code)값이라고도 한다. 이 값은 자바 가상 머신에서 객체가 생성되었을 때 생성된 객체에 할당하는 가상 주소값이다.따라서 student1 변수를 사용하여 student1 인스턴스를 참조할 수 있다. 이때 student1을 참조 변수, 주소 값을 참조 값이라고 한다.

객체: 객체 지향 프로그램의 대상, 생성된 인스턴스
클래스: 객체를 프로그래밍하기 위해 코드로 만든 상태
인스턴스: 클래스가 메모리에 생성된 상태
멤버 변수: 클래스의 속성, 특성
메서드: 멤버 변수를 이용하여 클래스의 기능을 구현
참조 변수: 힙 메모리에 생성된 인스턴스를 가리키는 변수
참조 값: 생성된 인스턴스의 메모리 주소 값


생성자(constructor)
클래스를 처음 만들 때 멤버 변수나 상수를 초기화하는 역할을 한다.

디폴트 생성자
생성자는 클래스를 생성할 때만 호출한다. 생성자는 클래스 이름과 같고, 생성자는 반환값이 없다. 생성자가 없는 클래스는 클래스 파일을 컴파일할 때 자바 컴파일러에서 자동으로 생성자를 만들어 준다. 자동으로 만들어 주는 생성자를 디폴트 생성자(default constructor)라고 한다.
인스턴스가 생성됨과 동시에 멤버변수의 값을 지정하고 인스턴스를 초기화하기 위해 생성자를 직접구현하여 사용하기도 한다.
프로그래머가 생성자를 직접 추가하면 디폴트 생성자는 만들어 지지 않는다.


객체 지향 프로그램에서 메서드 이름이 같고 매개변수만 다른 경우를 '오버로드'라고 한다.

생성자 오버로드
클래스에 생성자가 두 개이상 제공되는 경우를 생성자 오버로드(constructor overload)라고 한다.

this는 생성된 인스턴스 스스로를 가리키는 예약어이다.


크기가 정해진 기본 자료형으로 선언하는 변수가 있고, 클래스 자료형으로 선언하는 참조 자료형 변수가 있다.
String은 JDK(Java Development Kit)에서 제공하는 참조 자료형이다.


객체 지향 프로그램에서는 예약어를 사용해 클래스 내부의 변수나 메서드, 생성자에 대한 접근 권한을 지정할 수 있다. 이러한 예약어를 '접근 제어자(access modifier)'라고 한다.
public이라고 선언한 변수나 메서드는 외부 클래스에서 접근이 가능하며 외부 클래스가 사용할 수 있다는 뜻이다. 반대로 접근 제어자를 private으로 선언한 변수나 메서드는 외부 클래스에서 사용할 수 없다.

public 메서드 get(), set()
값을 얻는 get() 메서드를 getter, 값을 지정하는 set() 메서드를 setter라고도 부른다.
private 멤버 변수의 값을 얻거나 수정할 때 사용한다.
이클립스에서는 모든 멤버 변수에 대해서 get 메서드와 set 메서드를 자동으로 만들 수 있는 기능을 제공한다.
Source -> Generate Getters and Setters에서 가능


정보 은닉
public으로 멤버 변수를 선언하면 접근이 제한되지 않으므로 정보의 오류가 발생할 수 있다.
클래스 내부에서 변수나 메서드는 private으로 선언해서 외부에서 접근하지 못하도록 하는 것을 객체 지향에서는 정보 은닉(information hiding)이라고 한다.
public: 외부 클래스 어디에서나 접근할 수 있다.
protected: 같은 패키지 내부와 상속 관계의 클래스에서만 접근할 수 있고 그 외 클래스에서는 접근 할 수 없다.
아무 것도 없는 경우: default이며 같은 패키지 내부에서만 접근할 수 있다.
private: 같은 클래스 내부에서만 접근할 수 있다.

클래스를 생성할 때 호출하는 생성자는 멤버 변수를 초기화하는 데 사용한다.
클래스를 생성하여 메모리에 있는 상태를 인스턴스라 하고 멤버 변수를 다른 말로 클래스 속성이라고 한다.
메서드는 일반 함수에 객체 지향의 개념을 추가하여, 클래스 내부에 선언하고 클래스 멤버 변수를 사용하여 클래스 기능을 구현한다.

this는 생성된 인스턴스 스스로를 가리키는 예약어이다.
this를 사용하여 생성된 인스턴스 자신의 주소 값을 반환할 수 있다.



static 변수
다른 말로 '정적 변수'라고도 한다. 자바에서는 다른 멤버 변수처럼 클래스 내부에 선언한다.
변수를 선언할 때 다음과 같이 자료형 앞에 static 예약어를 사용한다.
static 예약어 자료형 변수_이름
static	      int    serialNum;
static변수는 클래스 내부에 선언하지만, 다른 멤버 변수처럼 인스턴스가 생성될 때마다 새로 생성되는 변수가 아니다. static 변수는 프로그램이 실행되어 메모리에 올라갔을 때 딱 한 번 메모리 공간이 할당 된다. 그리고 그 값은 모든 인스턴스가 공유한다.
static 변수를 클래스에 기반한 변수라고 해서 클래스 변수(class variable)라고도 한다.
클래스 변수라 하는 이유는 인스턴스마다 생성되는 변수가 아니라 클래스에 속해 한 번만 생성되는 변수이고 이를 여러 인스턴스가 공유하기 때문이다.

클래스를 선언할 때 특정 메모리에 저장되어 모든 인스턴스가 공유하는 변수이다. static 변수는 인스턴스 생성과는 별개이므로 인스턴스보다 먼저 생성된다. 그러므로 인스턴스가 아닌 클래스 이름으로도 참조하여 사용할 수 있다. 보통은 클래스 이름과 함께 사용한다.(그냥 static변수를 이용할 경우 클래스 이름으로 직접 참조해라/)
인스턴스 간에 공통으로 사용할 값이 필요한 경우 유용하게 사용할 수 있다.
자바에서 static 변수, 정적 변수, 클래스 변수라는 세 가지 용어는 모두 static 변수를 의미한다.
static변수의 값은 데이터영역에 저장


클래스 메서드
static 변수를 위한 메서드이다. static 메서드 또는 클래스 메서드라고 한다. static 메서드 또한 static 변수처럼 인스턴스
참조 변수가 아닌 클래스 이름으로 직접 호출할 수 있다.

public class Student{
	private static int serialNum = 1000;
	String studentName;

	public static int getSerialNum() {
		int i = 10;
		//studentName = "이지원"; 에러 발생
		return serialNum;
	}
}
int i는 지역변수로 함수가 호출될 때 선언되어 사용가능
serialNum은 static변수이다. static 변수는 클래스를 선언할 때 특정 메모리에 저장되기 때문에 사용가능하다.
studentName은 사용 불가. 이 변수는 Student 클래스의 멤버 변수로 인스턴스가 생성될 때 만들어지는 인스턴스 변수이기 때문이다.
따라서 studentName처럼 인스턴스가 생성되어야 메모리가 할당되는 인스턴스 변수는 클래스 메서드에서 사용할 수 없다.
클래스 메서드 내부에서 지역 변수와 클래스 변수는 사용할 수 있지만, 인스턴스 변수는 사용할 수 없다.
반대로 일반 메서드에서 클래스 변수를 사용하는 것은 가능하다.
일반 메서드는 인스턴스가 생성될 때 호출되는 메서드이고, 클래스 변수는 이미 만들어진 변수이기 때문에 일반 메서드에서도 클래스 변수를 호출할 수 있기 때문이다.


변수 유효 범위(variable scope)
1.지역변수
함수나 메서드 안에서만 사용할 수 있는 지역변수(로컬 변수, local variable)
함수에서 기능 구현을 위해 잠시 사용하는 경우


2.멤버 변수
클래스 안에서 사용하는 멤버 변수(인스턴스 변수, instance variable)
클래스의 속성을 나타내고 각 인스턴스마다 다른 값을 가지는 경우

3.static 변수
여러 인스턴스에서 공통으로 사용할 수 있는 static 변수(클래스 변수, class variable)
여러 인스턴스에서 공유해서 사용하도록 한 번만 생성되는 경우

지역변수의 유효 범위
지역 변수는 함수나 메서드 내부에 선언하기 때문에 함수 밖에서는 사용할 수 없다. 지역변수가 생성되는 메모리를 스택(stack)이라고 한다. 스택에 생성되는 지역 변수는 함수가 호출될 때 생성되었다가 함수가 반환되면 할당되었던 메모리 공간이 해제되면서 함께 없어진다. 함수 내부에서만 사용.

멤버 변수의 유효 범위
멤버 변수는 인스턴스 변수라고도 한다. 클래스 멤버 변수로 선언한다. 클래스 내부에서 사용하고 private이 아니라면 참조 변수로 다른 클래스에서 사용가능하다. 인스턴스가 생성될 때 힙(heap)메모리에 생성되는 변수이다. 힙에 생성된 인스턴스가 가비지 컬렉터(garbage collector)에 의해 수거되면 메모리에서 사라진다.

static 변수의 유효 범위
static 예약어를 사용하여 클래스 내부에 선언한다. 클래스 내부에서 사용하고 private이 아니라면 클래스 이름으로 다른 클래스에서 사용가능하다. 사용자가 프로그램을 실행하면 메모리에 프로그램이 상주한다. 이때 프로그램 영역에 데이터 영역이 있다. 이 영역에는 상수나 문자열, static 변수가 생성된다. 
인스턴스 변수는 객체가 생성되는 문장 즉 new가 되어야 생성되지만, static 변수는 클래스 생성과 상관없이 처음부터 데이터 영역 메모리에 생성된다. 프로그램이 처음 시작할 때 상수와 함께 데이터 영역에 생성되고 프로그램이 끝나고 메모리를 해제할 때 소멸된다. 따라서 인스턴스 변수와 static 변수는 사용하는 메모리가 다르다. 이렇게 생성된 static 변수는 private이 아니라면 클래스 외부에서도 객체 생성과 무관하게 사용할 수 있다. 프로그램 실행이 끝난 뒤 메모리에서 내려가면(프로그램을 닫기 or 종료) static 변수도 소멸된다. static 변수는 프로그램이 시작할 때부터 끝날 때까지 메모리에 상주하므로 크기가 너무 큰 변수를 static으로 선언하는 것은 좋지 않다.
데이터 영역은 상수 영역 혹은 static 영역이라고 표현하는 경우도 있다.



프레임워크(framework)
프로그램을 쉽게 개발하기 위해 구체적인 기능 설계와 구현을 미리 만들어 놓은 도구를 말한다.

디자인 패턴
객체 지향 프로그램을 어떻게 구현해야 좀 더 유연하고 재활용성이 높은 프로그램을 만들 수 있는지를 정리한 내용
프로그램 특성에 따른 설계 유형을 이론화한 내용이며, 특정 알고리즘이나 프로그래밍 언어를 위한 라이브러리가 아니라 객체 지향으로 설계하는 방법을 설명한 것이다. 따라서 디자인 패턴은 자바뿐만 아니라 다른 객체 지향 언어에도 적용하여 구혈할 수 있다.

싱글톤 패턴
객체 지향 프로그램에서 인스턴스를 단 하나만 생성하는 디자인 패턴을 싱글톤 패턴(singleton pattern)이라고 한다. 
static을 사용하여 유일한 객체를 생성하는 싱글톤 패턴을 구현할 수 있다.

싱글톤 패턴 구현
1. 생성자를 private으로 만들기
컴파일러가 default로 만들어주는 생성자는 항상 public이다.
생성자가 public이면 외부 클래스에서 인스턴스를 여러 개 생성할 수 있다.
따라서 싱글톤 패턴에서는 생성자를 반드시 명시적으로 만들고 그 접근 제어자를 private으로 지정해야 한다.
그러면 생성자가 있으므로 컴파일러가 디폴트생성자를 만들지 않고, 접근 제어자가 private이므로 외부 클래스에서 마음대로 Company 인스턴스를 생성할 수 없게 된다. 즉 Company 클래스 내부에서만 이 클래스의 생성을 제어할 수 있다.
private Company(){}

2. 클래스 내부에 static으로 유일한 인스턴스 생성하기
프로그램에서 사용할 인스턴스 하나는 필요하다. 따라서 Company ㅋ르래스 내부에서 하나의 인스턴스를 생성한다. 이 인스턴스가 프로그램 전체에서 사용할 유일한 인스턴스가 된다. 또한 private으로 선언하여 외부에서 이 인스턴스에 접근하지 못하도록 제한해야 인스턴스 오류를 방지할 수 있다.
private static Company instance = new Company();

3. 외부에서 참조할 수 있는 public 메서드 만들기
private으로 선언한 유일한 인스턴스를 외부에서도 사용할 수 있도록 설정해야한다. 이를 위해 public 메서드를 생성한다. 그리고 유일하게 생성한 인스턴스를 반환해 준다. 이때 반환하는 메서드는 반드시 static으로 선언해야 한다. 왜냐하면 getInstance()메서드는 인스턴스 생성과 상관없이 호출할 수 있어야 하기 때문이다.(싱글톤 패턴은 인스턴스를 내부적으로 생성하기때문이다?)

public static Company getInstance() {
	if(instance == null){
		instance = new Company();
	}
	return instance;
}

4. 실제로 사용하는 코드 만들기
외부 클래스에서는 Company를 생성할 수 없으므로 static으로 제공되는 getInstance()메서드를 호출한다. Company.getInstance();와 같이 호출하면 반환 값으로 유일한 인스턴스를 받아온다. 

클래스 내부에서 자신의 주소를 가리키는 예약어를 this라고 한다.

클래스에 여러 생성자가 오버로드되어 있을 경우에 하나의 생성자에서 다른 생성자를 호출할 때 this를 사용한다.

클래스 내부에 선언하는 static 변수는 생성되는 인스턴스마다 만들어지는 것이 아닌 여러 인스턴스가 공유하는 변수이다. 따라서 클래스에 기반한 유일한 변수라는 의미로 클래스 변수라고도 한다.

지역변수는 함수나 메서드 내부엣만 사용할 수 있고 스택메모리에 생성된다. 멤버 변수 중 static 예약어를 사용하는 static 변수는 데이터영역 메모리에 생성된다.



