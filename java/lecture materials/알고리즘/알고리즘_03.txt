선형 검색: 무작위로 늘어놓은 데이터 모임에서 검색을 수행한다.
이진 검색: 일정한 규칙으로 늘어놓은 데이터 모임에서 아주 빠른 검색을 수행
해시법: 추가, 삭제가 자주 일어나는 데이터 모임에서 아주 빠른 검색을 수행
+ 체인법: 같은 해시 값의 데이터를 선형 리스트로 연결하는 방법
+ 오픈 주소버비 데이터를 위한 해시 값이 충돌할 때 재해시하는 방법


선형 검색
요소가 직선 모양으로 늘어선 배열에서의 검색은 원하는 키 값을 갖는 요소를 만날 때까지 맨 앞부터 순서대로 요소를 검색하면 되는데, 이것이 선형 검색(linear search) 또는 순차 검색(sequential search)이라는 알고리즘이다. 

배열 검색의 종료 조건은 2가지다.
1. 검색할 값을 발견하지 못하고 배열의 끝을 지나간 경우 최대 n+1회 검사
2. 검색할 값과 같은 요소를 발견한 경우 최대 n회 검사

static int seqSearch(int[] a, int n, int key) {
	int i = 0;
	
	while(true) {
		if(i == n) {
			return -1;
		}
		if(a[i] == key) {
			return i;
		}
		i++;
	}
}
	
static int seqSearch2(int[] a, int n, int key) {
	for(int i = 0; i < n; i++) {
		if(a[i] == key)
			return i;
	}
	return -1;
}


보초법
위의 종료 조건을 검사하는 비용을 반으로 줄이는 방법이 보초법(sentinel method)이다.
검색하는 배열의 끝에다가 찾으려는 값을 마지막에 추가하는 방법이다. 이때 추가하는 값을 보초(sentinel)이라고 한다.
그러면 찾으려는 값이 데이터에 존재하지 않아도 보초까지 검색하면 종료 조건 2가 성립한다. 이렇게 하면 원하는 키 값을 찾지 못했을 때를 판단하는 종료 조건 1이 없어도 된다. 보초는 반복문에서 종료 판단 횟수를 2회에서 1회로 줄이는 역할을 한다.


static int seqSearchSen(int[] a, int n, int key) {
	int i = 0;
	
	a[n] = key;
	
	while(true) {
		if(a[i] == key) {
			break;
		}
		i++;
	}
	return i == n ? -1 : i;
}

static int seqSearchSen(int[] a, int n, int key) {
	int i;

	a[n] = key; // 보초를 추가

	for (i = 0; a[i] != key; i++)
			;
	return i == n ? -1 : i;
}



위의 코드는 종료 조건1이 필요하지 않기 때문에 하나의 if문만 사용한다. 따라서 반복 종료에 대한 판단 횟수는 실제로 절반으로 줄어든다.




이진 검색
이진 검색을 적용하는 전제 조건은 데이터가 키 값으로 이미 정렬되어 있다는 것이다. 이진 검색은 선형 검색보다 더 빠르게 검색할 수 있다는 장점이 있다.

이진 검색(binary search)은 요소가 오름차순 또는 내림차순으로 정렬된 배열에서 검색하는 알고리즘이다.

이진 검색 알고리즘 종료 조건
1. a[pc]와 key가 일치하는 경우
2. 검색 범위가 더 이상 없는 경우

이진 검색은 검색을 반복할 때마다 검색 범위가 절반이 되므로 검색에 필요한 비교 횟수의 평균값은 log(n)이다.
[]는 천장 메서드(ceiling function)를 나타내는 기호이다.
[x]는 x의 천장 메서드이며, x보다 크거나 같으면서 가장 작은 정수이다.


static int binSearch(int[] a, int n, int key) {
	int pl = 0;
	int pr = n - 1;
	
	do {
		int pc = (pl + pr) / 2;
		if(a[pc] == key) {
			return pc;
		} else if(a[pc] < key) {
			pl = pc + 1;
		} else {
			pr = pc - 1;
		}
	} while(pl <= pr);
	
	return -1;
}


복잡도
알고리즘의 성능을 객관적으로 평가하는 기준을 복잡도(complexity)라고 한다. 복잡도는 아래의 두 가지 요소를 가지고 있다.
1. 시간 복잡도(time complexity): 실행에 필요한 시간을 평가한 것
2. 공간 복잡도(space complexity): 기억 영역과 파일 공간이 얼마나 필요한가를 평가한 것


EX 선형 검색의 시간 복잡도

static int seqSearch(int[] a, int n, int key) {
1번--	int i = 0;
	
2번--	while(i < n) {
3번--		if(a[i] == key) {
4번--			return i;
		}
5번--		i++;
	}
6번--	return -1;
}

변수 i에 0을 대입(1번)하는 횟수는 처음 한 번 실행한 이후에는 없다.(데이터 수 n과는 무관하다). 이렇게 한번만 실행하는 경우 복잡도는 O(1)로 표기한다.물론 메서드에서 값을 반환하는 4번과 6번도 한 번만 실행하기 때문에 O(1)로 표기한다. 배열의 맨 끝에 도달했는지를 판단하는 2번과 현재 검사하고 있는 요소와 찾고자 하는 값이 같은지를 판단하는 3번의 평균 실행 횟수는 n/2이다. 이처럼 n에 비례하는 횟수만큼 실행하는 경우의 복잡도를 O(n)으로 표기한다.
복잡도를 표기할 때 사용하는 O는 Order에서 따온 것으로 O(n)은 'O-n', 'Order n', 'n의 Order'라고 읽는다.

       실행횟수    복잡도
1번    	  1          O(1)
2번      n/2	     O(n)
3번      n/2	     O(n)
4번       1	     O(1)
5번      n/2	     O(n)
6번      1	     O(1)



n/2번 실행 했을 때 복잡도를 O(n/2)가 아닌 O(n)으로 표현하는 이유는 n의 값이 무한히 커진다고 가정했을 때, 그 값의 차이가 무의미해지기 때문이다. 마찬가지로 100번만 실행하는 경우에도 O(100)이 아닌 O(1)로 표기한다. 극한 개념을 생각하면 된다. n의 차수만 신경 쓴다.

일반적으로 O(f(n))과 O(g(n))의 복잡도를 계산하는 방법은 아래와 같다.
O(f(n)) + O(g(n)) = O(max(f(n), g(n)))

2개 이상의 복잡도로 구성된 알고리즘의 전체 복잡도는 차원이 더 높은 쪽의 복잡도를 우선시한다. 둘이 아니라 셋 이상의 계산으로 구성된 알고리즘도 마찬가지다.
즉, 전체 복잡도는 차원이 가장 높은 복잡도를 선택한다.
그러므로 선형 검색 알고리즘의 복잡도를 구하면 아래처럼 O(n)이 된다.

O(1) + O(n) + O(n) + O(1) + O(n) + O(1) = O(max(1, n, n, 1, n, 1)) = O(n)

복잡도의 대소 관계

작다                                         크다
1 < log(n) < n < nlog(n) < n^2 < n^3 < n^k < 2^n


+오버로딩은 같은 매서드 이름으로 매개변수만 다르게 정의하는 방법을 말한다.


Arrays.binarySearch에 의한 이진 검색
java는 배열에서 이진 검색을 하는 메서드를 표준 라이브러리로 제공한다. 이진 검색 표준 라이브러리의 메서드로는 java.util.Arrays 클래스의 binarySearch 메서드가 있다. binarySearch 메서드는 다음과 같은 장점이 있다.

1. 이진 검색 메서드를 직접 코딩할 필요가 없다.
2. 모든 자료형 배열에서 검색할 수 있다.

자세한 내용은 API문서 참조

라이브러리는 누군가 작성한 코드이고 API 문서는 라이브러리를 사용하는 방법을 작성해 놓은 것이다.

binarySearch 메서드는 오름차순으로 정렬된 배열 a를 가정하고, 키 값이 key인 요소를 이진 검색한다.

검색에 성공한 경우
key와 일치하는 요소의 인덱스를 반환한다. 일치하는 요소가 여러 개 있다면 무작위의 인덱스를 반환한다. 맨 앞의 인덱스나 어떤 특정한 인덱스를 반환하는 것이 아니다.

검색에 실패한 경우
반환값은 삽입 포인트를 x라고 할 때 -x-1을 반환한다. 삽입 포인트는 검색하기 위해 지정한 key보다 큰 요소 중 첫 번째 요소의 인덱스이다. 만약 배열의 모든 요소가 key보다 작다면 배열의 길이를 삽입 포인트로 정한다.


자연 정렬(natural ordering)
사람이 보기에 자연스러운 정렬


자연 정렬로 정렬되지 않은 배열에서 검색하기(binarySearch)
자연 정렬로 정렬되지 않은 배열에서의 검색은 제네릭 메서드로 하면 된다. 제네릭 메서드의 첫번째 매개변수 a는 검색 대상이고, 두번째 매개변수 key는 키 값이다. 배열의 요소가 어떤 순서로 줄지어 있는지, 각 요소의 대소 관계를 어떻게 판단할 것인지에 대해서는 binarySearch 메서드에 알려주어야 한다. 이 정보는 세 번째 매개변수 c에 전달한다.

static <T> int binarySearch(T[] a, T key, Comparator<? super T> c)
Comparator의 근원은 java.util.Comparator 인터페이스이다.

pacakge java.util;

public interface Comparator <T> {
	int compare(T o1, T o2);
	boolean equals(Object obj);
}

객체의 대소 관계를 판단하는 comparator를 직접 구현하려면 Comparator 인터페이스를 구현한 클래스를 정의하고 그 클래스형의 인스턴스를 생성해야 한다. 그런 다음 매개변수로 전달된 두 객체의 대소 관계를 비교하여 그 결과를 다음과 같이 반환하는 compare 메서드를 구현하면 된다.

public int compare(T d1, T d2) {
	if(d1 > d2) return 양수;
	if(d1 < d2) return 음수;
	if(d1 == d2) return 0;	
}

클래스 X에 대한 comparator

class X {
--1번	public static final Comparator<T> COMPARATOR = new Comp();

--2번	private static class Comp implements Comparator {
--		public int compare(T d1, T d2) {
--
--		}
--	}
}

Comparator 인터페이스와 compare 메서드를 구현한 클래스를 먼저 작성한다.(2번) 그 후에 클래스의 인스턴스를 생성한다.(1번) 즉, 1번에서 생성한 인스턴스를 comparator라고 부른다. comparator를 클래스 외부에서 정의해도 된다.

comparator의 사용방법


