입출력은 장치에 따라 다르게 구현해야 한다. 자바는 장치에 따라 독립적이고 효율적인 입출력 기능을 제공한다.


스트림이란?
자바에서 모든 입출력은 스트림을 통해 이루어진다. 스트림이란 네트워크에서 유래된 용어이다. 자료 흐름이 물의 흐름과 같다는 의미에서 사용되었다. 입출력 장치는 매우 다양하기 때문에 장치에 따라 입출력 부분을 일일이 다르게 구현을 하면 프로그램 호환성이 떨어질 수 밖에 없다. 이런 문제를 해결하기 위해 자바는 입출력 장치와 무관하고 일관성 있게 프로그램을 구현할 수 있도록 일종의 가상 통로인 스트림을 제공하는 것이다. 자료를 읽어들이려는 소스(source)와 자료를 쓰려는 대상(target)에 따라 각각 다른 스트림 클래스를 제공한다.

     자바     --------------------------------  입출력
응용 프로그램         스트림(가상 통로)          자료
              --------------------------------

자바에서 입출력을 하려면 여러 스트림 클래스에 대해 알아야 한다. 하지만, 구현 방식이 서로 비슷하다. 스트림을 세 가지 기준에 따라 분류해보자.


1.입력 스트림과 출력 스트림
어떤 대상으로부터 자료를 읽어 들일 때 사용하는 스트림이 입력 스트림이다. 예를 들어 입력 스트림은 어떤 동영상을 재생하기 위해 동영상 파일에서 자료를 읽을 때 사용한다. 편집화면에 사용자가 쓴 글을 파일에 저장할 때는 출력 스트림을 사용한다. 스트림은 단방향으로 자료가 이동하기 때문에 입력과 출력을 동시에 할 수 없다. 따라서 어떤 스트림이 있다고 하면 그 스트림은 입력 스트림이거나 출력 스트림이다.

스트림의 이름을 보면 입력용인지 출력용인지 알 수 있다. InputStream이나 Reader로 끝나는 이름의 클래스는 입력 스트림이다. 반면에 OutputStream이나 Writer로 끝나는 이름의 클래스는 출력 스트림이다.

입력 스트림 
FileInputStream, FileReader, BufferedInputStream, BufferedReader 등
FileOutputStream, FileWriter, BufferedOutputStream, BufferedWriter 등


2. 바이트 단위 스트림과 문자 단위 스트림
원래 자바의 스트림은 바이트 단위로 자료의 입출력이 이루어진다. 그러므로 그림, 동영상, 음악 파일 등 대부분 파일은 바이트 단위로 읽거나 쓰면 된다. 그런데 자바에서 하나의 문자를 나타내는 char형은 2바이트이기 때문에 1바이트만 읽으면 한글 같은 문자는 깨진다. 따라서 입출력 중 가장 많이 사용하는 자료인 문자를 위해 문자 스트림을 별도로 제공한다. 즉 읽어 들이는 자료형에 따라 바이트용과 문자용 스트림이 있다.

     자바     --------------------------------  입출력
응용 프로그램       바이트 스트림(가상 통로)     자료
              --------------------------------


     자바     --------------------------------  입출력
응용 프로그램        문자 스트림(가상 통로)      자료
              --------------------------------

스트림 클래스의 이름이 Stream으로 끝나는 경우는 바이트 단위를 처리하는 스트림이다. Reader나 Writer로 끝나는 이름은 문자를 위한 스트림 클래스이다.

바이트 스트림
FileInputStream, BufferedInputStream
FileOutputStream, BufferedOutputStream

문자스트림
FileReader, BufferedReader
FileWriter, BufferedWriter


3. 기반 스트림과 보조 스트림












정적 초기화자 static initializer
정적 초기화자는 static 변수들의 초기화에 사용한다. static 변수는 객체 생성 없이도 사용해야 하므로 생성자를 통해 초기화할 수 없다.

그래서 static 변수는 정적 초기화자를 통해 초기화를 한다.

정적 초기화자는 클래스가 로딩될 때 생성자와 main() 메서드에 앞서 오직 단 한번만 실행되기 때문에 애플리케이션 실행 중 반드시 한번만 실행되어야 할 로직이 있다면 이곳에 기술하여 사용될 수 있다.

public class Computer {
	public static String company;
	public static String model;
	public int price;
	
	// static 변수는 정적 초기화자에서 초기화
	static {
		company = "LG";
		model = "gram";
	}
	
	// 일반 멤버 변수만 생성자에서 초기화
	Computer(int price) {
		this.price = price;
	}
}

싱글톤패턴 : 객체가 1개만 생성되도록 클래스를 구성하는 방법












