스택은 데이터를 일시적으로 저장하기 위해 사용하는 자료구조로, 데이터의 입력과 출력 순서는 후입선출(LIFO, Last In First Out)이다. 가장 나중에 넣은 데이터를 가장 먼저 꺼낸다. 스택에 데이터를 넣는 작업을 푸시라 하고, 스택에서 데이터를 꺼내는 작업을 팝이라고 한다. 푸시와 팝을 하는 위치를 top이라 하고, 스택의 가장 아랫부분을 bottom이라고 한다.

자바 프로그램에서 메서드를 호출하고 실행할 때 프로그램 내부에서는 스택을 사용한다.

클래스 IntStack의 생성자와 메서드를 사용하여 스택 작업을 수행하면 스택 포인터 ptr 값은 반드시 0이상 max 이하가 된다. 따라서 스택이 가득 찼는지에 대한 검사는 관계 연산자(>=)가 아니라 등가 연산자(==)를 사용하여 다음과 같이 수행할 수 있다.

if(ptr == max)

그러나 프로그래밍 실수와 같은 원인으로 인하여 ptr 값이 잘못 입력되면 max를 초과할 수도 있다. 하지만 코드에서와 같이 if(ptr >= max)처럼 부등호로 판단하면 스택 본체 배열의 상한과 하한을 벗어나서 접근하는 것을 막을 수 있다. 간단한 코드 수정이지만 이런 것으로 프로그램의 안정성을 높일 수 있다.


public class IntStack {
	private int max;
	private int ptr;
	private int[] stk;
	
	public class EmptyIntStackException extends RuntimeException {
		public EmptyIntStackException(String message) {
			super(message);
		}
	}
	
	public class OverFlowIntStackException extends RuntimeException {
		public OverFlowIntStackException(String message) {
			super(message);
		}
	}
	
	public IntStack(int capacity) {
		ptr = 0;
		max = capacity;
		try {
			stk = new int[max];
		} catch (OutOfMemoryError e) {
			max = 0;
		}
	}
	
	public int push(int x) throws OverFlowIntStackException {
		if(ptr >= max) {
			throw new OverFlowIntStackException("스택이 가득 찼습니다.");
		}
		return stk[ptr++] = x;
	}
	
	public int pop() throws EmptyIntStackException {
		if(ptr <= 0) {
			throw new EmptyIntStackException("스택이 비었습니다.");
		}
		return stk[--ptr];
	}
	
	public int peek() throws EmptyIntStackException {
		if(ptr <= 0) {
			throw new EmptyIntStackException("스택이 비었습니다.");
		}
		return stk[ptr - 1];
	}
	
	public int indexOf(int x) {
		for(int i = ptr - 1; i >= 0; i--) {
			if(stk[i] == x) {
				return i;
			}
		}
		return -1;
	}
	
	public int capacity() {
		return max;
	}
	
	public void clear() {
		for(; ptr > 0; ) {
			stk[--ptr] = 0;
		}
	}
	
	public int size() {
		return ptr;
	}
	
	public boolean isEmpty() {
		return ptr <= 0;
	}
	
	public boolean isFull() {
		return ptr >= max;
	}
	
	public void dump() {
		if(ptr <= 0) {
			System.out.println("스택이 비어 있다.");
		}
		else {
			for(int i = 0; i < ptr; i++) {
				System.out.println(stk[i] + " ");
			}
			System.out.println();
		}
	}
}

public class Gstack_04_02<E> {
	private int max; // 스택의 용량
	private int ptr; // 스택 포인터
	private E[] stk; // 스택 본체

	// 실행할 때 예외：스택이 비어 있음
	public static class EmptyGstackException extends RuntimeException {
		public EmptyGstackException() {
		}
	}

	// 실행할 때 예외：스택이 가득 참
	public static class OverflowGstackException extends RuntimeException {
		public OverflowGstackException() {
		}
	}

	// 생성자
	public Gstack_04_02(int capacity) {
		ptr = 0;
		max = capacity;
		try {
			stk = (E[]) new Object[max]; // 스택 본체용 배열을 생성
		} catch (OutOfMemoryError e) { // 생성할 수 없습니다.
			max = 0;
		}
	}

	// 스택에 x를 푸시
	public E push(E x) throws OverflowGstackException {
		if (ptr >= max) // 스택이 가득 참
			throw new OverflowGstackException();
		return stk[ptr++] = x;
	}

	// 스택에서 데이터를 팝 (꼭대기의 데이터를 꺼냄)
	public E pop() throws EmptyGstackException {
		if (ptr <= 0) // 스택이 비어 있음
			throw new EmptyGstackException();
		return stk[--ptr];
	}

	// 스택에서 데이터를 피크(꼭대기의 데이터를 살펴 봄)
	public E peek() throws EmptyGstackException {
		if (ptr <= 0) // 스택이 비어 있음
			throw new EmptyGstackException();
		return stk[ptr - 1];
	}

	// 스택에서 x를 검색하여 index(찾지 못하면 -1)를 반환
	public int indexOf(E x) {
		for (int i = ptr - 1; i >= 0; i--) // 꼭대기쪽부터 선형 검색
			if (stk[i].equals(x))
				return i; // 검색성공
		return -1; // 검색실패
	}

	// 스택을 비움
	public void clear() {
		ptr = 0;
	}

	// 스택의 용량을 반환
	public int capacity() {
		return max;
	}

	// 스택에 쌓여있는 데이터 수를 반환
	public int size() {
		return ptr;
	}

	// 스택이 비어 있는가?
	public boolean isEmpty() {
		return ptr <= 0;
	}

	// 스택이 가득 찼는가?
	public boolean isFull() {
		return ptr >= max;
	}

	// 스택 안의 데이터를 바닥→꼭대기의 차례로 출력함
	public void dump() {
		if (ptr <= 0)
			System.out.println("스택이 비었습니다.");
		else {
			for (int i = 0; i < ptr; i++)
				System.out.print(stk[i] + " ");
			System.out.println();
		}
	}
}






enum

public enum Type {
    WALKING, RUNNING, TRACKING, HIKING
}



열거된 순서에 따라 0 부터 순서값을 가짐. 차례대로 증가함.
enum 열거형으로 지정된 상수는 대문자 사용.
마지막 끝에 세미콜론(;)을 붙이지 않음.




큐

스택과 마찬가지로 데이터를 일시적으로 쌓아 두기 위한 자료구조이다. 선입선출 구조이다.(FIFO, First In First Out) 대기열이 대표적인 예다.

큐에 데이터를 넣는 작업을 인큐(enqueue)라 하고, 데이터를 꺼내는 작업을 디큐(dequeue)라 한다.
데이터를 꺼내는 쪽을 프런트(front)라 하고, 데이터를 넣는 쪽을 리어(rear)라고 한다.

배열로 큐 만들기
인큐의 처리 복잡도는 O(1)이다.

디큐의 처리 복잡도는 O(n)이다. 요소 이동을 수행하기 때문이다. 프런트에 있는 요소를 빼고 다음 두 번째 이후의 요소를 모두 한 칸씩 앞으로 옮긴다.


링 버퍼(ring buffer)로 큐 만들기
배열 요소를 앞쪽으로 옮기지 않는 큐
배열이 처음이 끝과 연결되었다고 보는 자료구조. 여기서 논리적으로 어떤 요소가 첫 번째 요소이고, 어떤 요소가 마지막 요소인지 식별하기 위한 변수가 프런트(front)와 리어(rear)이다.

프런트(front): 맨 처음 요소의 인덱스
리어(rear): 맨 끝 요소의 하나 뒤의 인덱스(다음 요소를 인큐할 위치를 미리 지정)

프런트와 리어 값을 업데이트하며 인큐와 디큐를 수행하기 때문에 앞에서 발생한 요소 이동 문제를 해결할 수 있다. 처리의 복잡도는 O(1)이다.

현재 데이터 수
큐에 쌓아 놓은 데이터 수를 나타내는 필드이다. front와 rear의 값이 같은 경우 큐가 비어 있는지, 가득 찼는지 구별할 수 없는 상황을 피하기 위해 이 변수가 필요하다. 큐가 비어있을 때 num은 0이고, 가득 찼을 때는 num과 max값이 같다.


public void clear()
스택이나 큐에서 포인터 값을 초기화하면 요솟값까지 초기화할 필요는 없다.


덱(deck)은 양방향 대기열이다. 시작과 끝 지점에서 양쪽으로 데이터를 인큐하거나 디큐하는 자료구조이다. 양방향 대기열이다.


public class Gqueue_04_06<E> {
	// 실행할 때 예외：큐가 비어 있음
	public static class EmptyGqueueException extends RuntimeException {
		public EmptyGqueueException() {
		}
	}

	// 실행할 때 예외：큐가 가득 참
	public static class OverflowGqueueException extends RuntimeException {
		public OverflowGqueueException() {
		}
	}

	private int max; // 큐의 용량
	private int num; // 현재의 데이터 수
	private int front; // 맨 앞 커서
	private int rear; // 맨 뒤 커서
	private E[] que; // 큐의 본체

	// 생성자
	public Gqueue_04_06(int capacity) {
		num = front = rear = 0;
		max = capacity;
		try {
			que = (E[]) new Object[max]; // 큐 본체용 배열을 생성
		} catch (OutOfMemoryError e) {   // 생성할 수 없습니다.
			max = 0;
		}
	}

	// 큐에 데이터를 인큐
	public E enque(E x) throws OverflowGqueueException {
		if (num >= max)
			throw new OverflowGqueueException(); // 큐가 가득 참
		que[rear++] = x;
		num++;
		if (rear == max)
			rear = 0;
		return x;
	}

	// 큐에서 데이터를 디큐
	public E deque() throws EmptyGqueueException {
		if (num <= 0)
			throw new EmptyGqueueException(); // 큐가 비어 있음
		E x = que[front++];
		num--;
		if (front == max)
			front = 0;
		return x;
	}

	// 큐에서 데이터를 피크(머리데이터를 살펴봄)
	public E peek() throws EmptyGqueueException {
		if (num <= 0)
			throw new EmptyGqueueException(); // 큐가 비어 있음
		return que[front];
	}

	// 큐에서 x를 검색하여 index(찾지 못하면 -1)를 반환
	public int indexOf(E x) {
		for (int i = 0; i < num; i++)
			if (que[(i + front) % max] == x) // 검색성공
				return i + front;
		return -1; // 검색실패
	}

	// 큐에서 x를 검색하여 머리부터 몇 번 째인가(찾지 못하면 -1)를 반환
	public int search(E x) {
	      for (int i = 0; i < num; i++)
	         if (que[(i + front) % max].equals(x))   // 검색 성공
	            return i + 1;
	      return -1;                            	 // 검색 실패
	}

	// 큐를 비움
	public void clear() {
		num = front = rear = 0;
	}

	// 큐의 용량을 반환
	public int capacity() {
		return max;
	}

	// 큐에 쌓인 데이터 수를 반환
	public int size() {
		return num;
	}

	// 큐가 비어 있는가?
	public boolean isEmpty() {
		return num <= 0;
	}

	// 큐가 가득 찼는가?
	public boolean isFull() {
		return num >= max;
	}

	// 큐 안의 데이터를 머리→꼬리의 차례로 나타냄
	public void dump() {
		if (num <= 0)
			System.out.println("큐가 비었습니다.");
		else {
			for (int i = 0; i < num; i++)
				System.out.print(que[(i + front) % max].toString() + " ");
			System.out.println();
		}
	}
}




링 버퍼는 오래된 데이터를 버리는 용도로 사용할 수 있다.
요소의 개수가 n인 배열에 계속해서 데이터가 입력될 때 가장 최근에 들어온 데이터 n개만 저장하고 오래된 데이터는 버리는 용도로 사용한다.








