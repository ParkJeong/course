[문항1]  다음 설명은 무엇에 관한 내용인가?

통합 개발 환경(Integrated Development Environment, IDE)은 코딩, 디버깅, 컴파일, 배포 등 프로그램 관련된 모든 작업을 하나의 프로그램 안에서 처리하는 환경을 제공하는 소프트웨어 이다.



[문항2]  자바의 실행 영역에 관련된 내용이다. (1, 2, 3 ,4, 5)에 알맞은 영역을 순서대로 적으세요.

클래스 로더(Class Loader)은 class파일을 메모리에 올려 실행하는 부분을 담당한다.
Run-Time Area는 static키워드를 저장하는 데이터영역, 변수를 저장하는 스택영역, 객체를 저장하는 힙영역으로 나뉜다.
자바는 다수의 class파일이 실행되면서 힙영역에 남아 있는 데이터를 효율적으로 삭제하고, 관리해주는
가비지 콜렉터(Garbage Collector)가 존재한다.


	
[문항3]  다음에 대한 설명은 무엇인가?
네트워크로 연결되어 있는 컴퓨터 통신의 접점에 위치한다.
네트워크 통신을 위한 프로그램들은 소켓을 생성해서 데이터를 교환한다.
소켓은 TCP프로토콜, IP 주소에 대한 정보를 가지고 있다.


[문항4]  아래 그림과 같은 귓속말 기능이 가능한 채팅 프로그램에 필요한 코드를 추가해서 제출합니다. 1) 서버에서는 접속한 Client를 관리하는데 적절한 컬렉션을 사용합니다. 2) socket.getPort() 를 사용해서 접속된 port를 사용합니다.
ex) /w id hello?


public class MainServer {
	public static HashMap<String, PrintWriter> clients = new HashMap<>();
	
	public static void main(String[] args) {
		/*
		 * 채팅은, 클라이언트와 클라이언트 간의 대화이다.
		 * 즉 서버의 역할은 클라이언트의 채팅글을 전달만하고,
		 * 채팅에 참여하지 않는다.
		 * 그래서 서버는 여러 클라이언트를 서로 연결할 수 있게 하고,
		 * 클라이언트에게 받은 데이터를 모든 클라이언트에게 전달하도록 처리한다.
		 * 
		 */
		try {
			ServerSocket serverSocket = new ServerSocket(8383);
			
			while(true) {
				System.out.println("------연결 대기-------");
				Socket socket = serverSocket.accept();
				System.out.println("------연결 성공-------");
				
				// 연결이 들어올 때마다, 클라이언트관리 클래스를 생성하고,
				// 연결된 소켓의 outputStream을 리스트에 저장
				
				ClientManage client = new ClientManage(socket);
			
				client.start();
			}
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}




public class ClientManage extends Thread{
	private Socket socket;
	private String userId;
	private Iterator<String> ir;

	public ClientManage(Socket socket) {
		this.socket = socket;
		userId = null;
	}

	@Override
	public void run() {
		// 클라이언트로부터 받아온 입력스트림을 받는다.
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"));

			while(true) {
				String message = br.readLine();
				//1. message가 null인 경우 연결이 끊어졌다는 의미
				//2. 넘어온 메시지가 id인지 확인하는 부분
				String[] split = message.split(":", 2);
				if(split.length == 2 && split[0].equals("ID")) {

					// id가 중복된 경우
					if(MainServer.clients.containsKey(split[1])) {
						String idErrorMessage = "동일한 아이디가 존재합니다.\n";
						socket.getOutputStream().write(idErrorMessage.getBytes());
						socket.close();
						break;
					}

					this.userId = split[1];

					// 연결된 모든 소켓에 메시지를 전달.
					ir = MainServer.clients.keySet().iterator();					
					while(ir.hasNext()) {
						PrintWriter pw = MainServer.clients.get(ir.next());
						pw.println(this.userId + "님이 입장했습니다.");
						pw.flush();
					}
					System.out.println(this.userId + "님이 입장했습니다.");					
					MainServer.clients.put(userId, new PrintWriter(socket.getOutputStream()));
					continue;
				}

				/*
				 * 귓속말인경우
				 */
				split = message.split(" ");
				if(split[0].equals("/w") && MainServer.clients.containsKey(split[1]) && split[1] != this.userId) {
					PrintWriter pw = MainServer.clients.get(split[1]);
					pw.println(this.userId + "님의 귓속말입니다.");

					message = message.split(split[0] + " " + split[1] + " ")[1];
					pw.println(this.userId + ">" + message);
					pw.flush();
					continue;
				}

				/*
				 *  message가 null도 아니고, id를 넘겨준 형태가 아니라면 
				 *  일반 메시지를 모든 소켓에 전달
				 */
				ir = MainServer.clients.keySet().iterator();					
				while(ir.hasNext()) {
					PrintWriter pw = MainServer.clients.get(ir.next());
					pw.println(this.userId + ">" + message);
					pw.flush();
				}
			}

		} catch(SocketException e) {
			// 유저가 나간경우
			if(MainServer.clients.containsKey(this.userId)) {
				// 연결된 모든 소켓에 메시지를 전달.
				ir = MainServer.clients.keySet().iterator();					
				while(ir.hasNext()) {
					PrintWriter pw = MainServer.clients.get(ir.next());
					pw.println(this.userId + "님이 퇴장했습니다.");
					pw.flush();
				}
				System.out.println(this.userId + "님이 퇴장했습니다.");
			}
		}
		catch (Exception e) {
			//e.printStackTrace();
		} finally {
			// 종료시점에 실행되는  finally문
			if(MainServer.clients.containsKey(this.userId)) {
				MainServer.clients.get(this.userId).close();
				MainServer.clients.remove(this.userId);
			}
			try {
				socket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}



	
[문항5]  네트워크프로그램에서, List에 서버에 접속된 소켓의 PrintWriter객체만 저장했더니, 소켓 연결이 해제됬을 때, 소켓을 지워지지 않고 있는 상황이다. 이를 해결할 방안에 대해 간략히 기술하고, 프로그램 코드로 문제를 해결하세요.

HashMap에 아이디와 PrintWriter객체 쌍을 저장합니다. 아이디가 키값입니다. 소켓 연결이 해제될 때 해당 유저의 아이디값을 통해 HashMap에서 PrintWriter객체를 찾아서 해제합니다.

위의 코드와 동일합니다.
