정규표현식

/*
 * 주요 정규표현 형식
 * \\d  - 숫자를 찾음
 * \\d+ - 숫자 1개이상 찾음
 * \\w  - 문자(_와 영소문자와 숫자)를 찾음
 * \\w+ - 문자(_와 영소문자와 숫자) 1개 이상 찾음
 * \\W  - 문자(_와 영소문자와 숫자를 제외한 문자)를 찾음
 * \\W+ - 문자(_와 영소문자와 숫자를 제외한 문자) 1개이상 찾음
 * 
 * \\d{3}   - 숫자 3개
 * \\d{3,4} - 숫자 3개이상 4개이하
 * [0-9]    - 0~9까지 문자 1개 찾음
 * [A-Z]    - A~Z까지 문자 1개 찾음
 * [a-z]    - a~z까지 문자 1개 찾음
 * [가~힣]  - 한글 1개 찾음
 * [가~힣]+  - 한글 1개 이상 찾음 
 * [가~힣]*  - 한글 0개 이상 찾음 
 * [가~힣]?  - 한글 0개 or 1개 
 * 
 * 
 * [A-Za-z] - 알파벳 중 1개
 * 
 * 특수문자\는 그 자체를 의미함
 * \\. \\[ \\? \\( - .[?(등 특정 문자를 찾음 (정규표션식에서 쓰이는 특수문자를 찾고 싶을 때 \\를 붙여서 찾는다.)
 */



public static void main(String[] args) {
	String str = "헠4,500원 헿~1,200원 엏? 6000원윀 120000원";
		
//	String pattern = "\\d{0,3},?\\d{1,3}원?"; 
	String pattern = "[0-9]+,*[0-9]+원"; 
	Pattern p = Pattern.compile(pattern);
	Matcher m = p.matcher(str);
		
	while(m.find()) {
		System.out.println("시작인덱스:" + m.start());
		System.out.println("찾은 값:" + m.group());
		System.out.println("끝인덱스:" + m.end());
	}
		
}




public static void main(String[] args) {

	ArrayList<String> products = new ArrayList<>();

	String product = "123123-4564564 GS25(치킨도시락) 4,400원";
	products.add(product);

	product = "111111-2222222 GS25(마늘햄쌈) 5,500원";
	products.add(product);

	product	 = "222222-3333333 MINISTOP(제육볶음) 5,500";
	products.add(product);
		
	String numberPattern = "\\d{6}-\\d{7}";
	String companyPattern = "[A-Z]+[0-9]*";
	String lunchBoxPattern = "\\([가-힣]+\\)";
	String pricePattern = "\\d{0,3},\\d{1,3}원?";

	for(String str : products) {
		System.out.println(str);
		Matcher numberMatcher = Pattern.compile(numberPattern).matcher(str);
		Matcher companyMatcher = Pattern.compile(companyPattern).matcher(str);
		Matcher lunchBoxMatcher = Pattern.compile(lunchBoxPattern).matcher(str);
		Matcher priceMatcher = Pattern.compile(pricePattern).matcher(str);

		numberMatcher.find();
		System.out.println("상품번호: " + numberMatcher.group());

		companyMatcher.find();
		System.out.println("회사이름: " + companyMatcher.group());

		lunchBoxMatcher.find();
		System.out.println("도시락명: " + lunchBoxMatcher.group());

		priceMatcher.find();
		System.out.println("가격: " + priceMatcher.group());
	}
}

find()를 써야 정규표현식이 적용된다.

|를 이용하면  여러 패턴을 적용할 수 있다.(or를 의미)
항목들 중 하나를 선택하기 위해 구분한다. "gray|grey"는 "gray"또는 "grey"와 일치한다.





라이브러리추가하는 방법

1. 해당 프로젝트에 폴더를 만든다.
lib폴더를 만든다.

2. lib폴더에 원하는 라이브러리를 추가한다.

3. 해당 프로젝트에 우클릭 후 Build Path -> Configure Build Path를 클릭한다.

4. Java Build Path를 클릭하고 오른쪽에서 3번째 텝에 있는 Libraries를 누른다. 그 후에 Add External JARs를 클릭후에 추가한다. 삭제도 가능하다.




public class RegexQuiz03 {
	
	// 엑셀 생성
	public static void excel(List<Product> list) {
		XSSFWorkbook workbook = new XSSFWorkbook();
		
		// 워크시트 생성
		XSSFSheet sheet = workbook.createSheet();
		
		// 행 생성
		XSSFRow row = sheet.createRow(0);
		
		// 셀 생성
		XSSFCell cell;
		
		cell = row.createCell(0);
		cell.setCellValue("날짜");
		
		cell = row.createCell(1);
		cell.setCellValue("지점");

		cell = row.createCell(2);
		cell.setCellValue("등급");

		cell = row.createCell(3);
		cell.setCellValue("상세정보");

		cell = row.createCell(4);
		cell.setCellValue("가격");
		
		
		// 데이터 정보 구성
		Product vo;
		for(int i = 0; i < list.size(); i++) {
			vo = list.get(i);
			
			row = sheet.createRow(i + 1);
			cell = row.createCell(0);
			cell.setCellValue(vo.getDay());
			
			cell = row.createCell(1);
			cell.setCellValue(vo.getStore());
			
			cell = row.createCell(2);
			cell.setCellValue(vo.getGrade());
			
			cell = row.createCell(3);
			cell.setCellValue(vo.getDetail());

			cell = row.createCell(4);
			cell.setCellValue(vo.getPrice());
		}
		
		try(FileOutputStream fos = new FileOutputStream("test2.xlsx")){
			workbook.write(fos);
		} catch(IOException e) {
			
		}
	}
	
	public static void main(String[] args) {
		/*
		 * 1. day, store, grade, detail, price를 멤버로 갖는 Product클래스를 생성
		 * 2. Product 클래스는 getter, setter를 생성
		 * 3. BufferedReader를 사용해서 건담.txt파일을 읽어들인다.
		 * 4. 패턴별로 Product에 저장훈 후에 리스트에 추가
		 * 
		 * 5. 외부 라이브러리를 사용해서 xlsx엑셀파일로 추출하면 된다.
		 */

		try(BufferedReader br = new BufferedReader(new InputStreamReader(
				new FileInputStream("건담.txt"), "UTF-8"));
				FileOutputStream fos = new FileOutputStream("test.xlsx")){
			
			String dayPattern = "[0-9]{8}-[0-9]{2}-[0-9]+";
			String storePattern = "건담[ㄱ-힣]* [ㄱ-힣]+점?";
			String gradePattern = "\\[[A-Z]*[ㄱ-힣]*\\]";
			String pricePattern = "[0-9]*,?[0-9]+원";
			
			String line;
			String day;
			String store;
			String grade;
			String detail;
			String price;
			
			ArrayList<Product> products = new ArrayList<>();

			while((line = br.readLine()) != null) {
				Product product = new Product();
				Matcher dayMatcher = Pattern.compile(dayPattern).matcher(line);
				Matcher storeMatcher = Pattern.compile(storePattern).matcher(line);
				Matcher gradeMatcher = Pattern.compile(gradePattern).matcher(line);
				Matcher priceMatcher = Pattern.compile(pricePattern).matcher(line);
//				detail = line.split("\\[[A-Z]*[ㄱ-힣]*\\]")[1].split(pricePattern)[0].trim();
				
				if(dayMatcher.find() && storeMatcher.find() && gradeMatcher.find() && priceMatcher.find()) {
					day = dayMatcher.group();
					store = storeMatcher.group();
					grade = gradeMatcher.group();
					price = priceMatcher.group();
					detail = line.substring(gradeMatcher.end() + 1, priceMatcher.start() - 1);
	
					product.setDay(day);
					product.setStore(store);
					product.setGrade(grade);
					product.setDetail(detail);
					product.setPrice(price);
					
					products.add(product);
				}

			}
			// 엑셀 생성 호출
			excel(products);
			
			XSSFWorkbook workbook = new XSSFWorkbook();
			XSSFSheet sheet = workbook.createSheet("건담");
			XSSFRow curRow;
			XSSFCell cell = null;
			int row = products.size();
			
			// Title
			curRow = sheet.createRow(0);
			cell = curRow.createCell(0);
			cell.setCellValue("건담 정보");
			
			// Head
			curRow = sheet.createRow(1);
			cell = curRow.createCell(0);
			cell.setCellValue("day");
			
			cell = curRow.createCell(1);
			cell.setCellValue("store");
			
			cell = curRow.createCell(2);
			cell.setCellValue("grade");
			
			cell = curRow.createCell(3);
			cell.setCellValue("detail");
			
			cell = curRow.createCell(4);
			cell.setCellValue("price");
			
			//Body
			for(int i = 2; i < row + 2; i++) {
				curRow = sheet.createRow(i);
				
				cell = curRow.createCell(0);
				cell.setCellValue(products.get(i-2).getDay());
				

				cell = curRow.createCell(1);
				cell.setCellValue(products.get(i-2).getStore());
				

				cell = curRow.createCell(2);
				cell.setCellValue(products.get(i-2).getGrade());
				

				cell = curRow.createCell(3);
				cell.setCellValue(products.get(i-2).getDetail());
				

				cell = curRow.createCell(4);
				cell.setCellValue(products.get(i-2).getPrice());
			}
			
			workbook.write(fos);
			System.out.println("끝");
			
			
		} catch(IOException e) {
			System.out.println(e);
		}
			
	}
}


멀티 스레드

멀티 태스킹이란 두가지 작업을 동시에 처리하는 것을 뜻한다.
한 프로그램에서 멀티 태스킹을 하는 애플리케이션들이 있다.
ex 메신저
스레드는 프로그램의 실행흐름이다.
프로그램 내에 스레드가 2개라면 두 개의 코드 흐름이 생긴다는 뜻이다.


스레드 기본 메서드
start() - 스레드 클래스를 실행
static currentThread() - 현재 스레드를 반환
getName() - 스레드 이름 반환
static sleep() - 스레드를 잠시 멈춤
yield() - 스레드 실행을 다른 스레드에게 양보
join() - 해당 스레드를 우선 실행




스레드 사용 방법

방법 1
1. Runnable인터페이스를 상속받아 run() 추상메서드를 재정의하고
2. Thread객체의 생성자의 매개값으로 전달한다.
3. 그 다음 start() 메서드를 통해 실행시킨다.


public class MainClass {
	public static void main(String[] args) {
		//Runnable을 상속받은 클래스는 직접 Thread클래스에 전달해서 실행한다.
		ThreadTest t = new ThreadTest();
		
		Thread thread = new Thread(t, "쓰레드1"); // 동작시킬 클래스, 이름
		thread.start(); // 쓰레드 시작
		
		System.out.println("메인종료~~~");
	}
}

public class ThreadTest implements Runnable{

	// Runnable 인터페이스 구현
	// 쓰레드의 기능을 사용하고 싶다면,
	// Thread 클래스의 static메서드 사용
	
	@Override
	public void run() {
		// 현재 실행중인 쓰레드의 이름
		System.out.println(Thread.currentThread().getName());
		
		System.out.println("쓰레드 시작1");
		
		for(int i = 1; i <= 10; i++) {
			System.out.println(i);
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
			} // ms단위이다. 1000ms = 1s
		}
		
		System.out.println("쓰레드 종료1");
	}
	
}




방법 2
1. Thread 클래스를 상속받아 run() 추상메서드를 재정의하고
2. Thread 객체 생성자의 매개값으로 전달한다.
3. 그 다음 start() 메서드를 통해 실행시킨다.


public class MainClass {
	public static void main(String[] args) {
		ThreadTest t = new ThreadTest();
		t.setName("쓰레드1"); // 쓰레드 이름 지정
					// 이름을 지정안하면 디폴트로 Thread-0(숫자)가 주어진다.
		t.start(); // 쓰레드 실행
		
		System.out.println("메인 종료");
	}
}


public class ThreadTest extends Thread{

	@Override
	public void run() {
		System.out.println(getName());
		System.out.println("쓰레드 시작1");
		
		for(int i = 0; i <= 10; i++) {
			try {
				sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		System.out.println("쓰레드 종료1");
	}
	
}



두 방법의 차이는?
Runnable은 인터페이스이므로, 스레드 실행의 기능만 정의되어 있으므로 클래스 내부에서 사용할 수 있는 메서드가 한정적이다.(스레드의 static 메서드는 전부 사용가능)
Thread클래스의 기능을 전부 받아서 사용할 수 있다.



동기화 메서드 synchronized

스레드가 사용중인 객체를 다른 스레드가 변경할 수 없도록 할 때
객체에 lock을 걸어 다른 스레드가 건들 수 없도록 할 수 있다.
메소드의 선언에 synchronized를 붙이면 된다.(일반 메서드, static 메서드 모두 적용 가능)

@Override
public synchronized void run() {
	...
}

synchronized가 선언되면 해당 객체가 사용될 때, 다른 곳에서 호출할 수 없다.






