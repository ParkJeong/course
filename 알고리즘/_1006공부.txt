서버 - 사용자가 채팅 내용을 치면 결과를 다른 사용자한테 전달해주는 전달자

클라이언트 - 사용자가 사용하는 환경


TCP/IP(Transmission Control Protocol)
다른 컴퓨터와 통신을 하기 위한 통신 규약
컴퓨터 프로그램간 데이터를 안정적으로 전달할 수 있게 해준다.


---------------------------------------------------------

//Client
public class MainClient {
	public static void main(String[] args) {
		try {
			// 컴퓨터의 IP주소를 아는 법
			// CMD 실행후 ipconfig 명령어 실행
			// IPv4 주소를 확인
			// 첫번째 생성자의 매개변수 IP주소, PORT번호
			Socket socket = new Socket("192.168.104.61", 8383);
			
			// 소켓 클래스의 inputStream으로 서버로부터 데이터를 받는다.
			InputStream is = socket.getInputStream();
			
			// 서버로부터 받은 데이터를 문자열 데이터로 변경
			BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
			String result = br.readLine();
			
			System.out.println(result);
			
			socket.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


// Server
public class MainServer {
	public static void main(String[] args) {
		
		try {
			// 서버 소켓 생성(8383)
			ServerSocket serverSocket = new ServerSocket(8383);
			
			/*
			 * 클라이언트의 연결 요청을 대기하는 메서드 accept()
			 * 즉, 클라이언트에서 해당 8383포트로 연결요청이 들어오면, accept가 대기를 해제하고
			 * 클라이언트와 연결시키는 Socket클래스 생성해서 반환
			 */
			System.out.println("연결 대기");
			Socket socket = serverSocket.accept();
			
			// Socket클래스에 있는 출력스트림을 얻는 코드
			OutputStream os = socket.getOutputStream();
			
			// 메시지를 바이트 형태로 바꿔서 접속한 클라이언트에 전달
			String msg = "서버에서 보낸 메시지";
			os.write(msg.getBytes());
			
			serverSocket.close();
			socket.close();
			System.out.println("연결 해제");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}


----------------------------------------------------
//Server
public class MainServer {
	public static void main(String[] args) {
		try {
			ServerSocket serverSocket = new ServerSocket(8385);
			
			System.out.println("연결대기");
			Socket socket = serverSocket.accept();
			
			System.out.println("Welcome to My Server");
			
			// 연결된 소켓을 메시지를 수신받는 클래스한테 전달한다.
			Receive receive = new Receive(socket);
			
			receive.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

ublic class Receive extends Thread{
	
	/*
	 * 클라이언트에서 넘어온 메시지를 수신 받는 클래스
	 * 생성자에서 연결된 소켓타입을 하나 받는다.
	 */
	private Socket socket;
	
	public Receive(Socket socket){
		this.socket = socket;
	}
	
	@Override
	public void run() {
		try {
			/*
			 * 1. 전송받은 데이터는 socket 클래스 안에 inputStream에 저장되고,
			 * 그 데이터를 꺼내오는 코드
			 */
			
			BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"));
			
			/*
			 * 2. client에서 메시지가 넘어올 때마다 서버측에 출력.
			 * message가 null이라는 것은 클라이언트측에서 연결이 끊겼다는 뜻이므로 탈출.
			 */
			while(true) {
				String message = br.readLine();				
				
				if(message == null) {
					System.out.println("연결을 종료합니다.");
					break;
				} else {
					System.out.println("상대방:" + message);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}





------------------------------------------------
//Client
public class MainClient {
	public static void main(String[] args) {
		try {
			Socket socket = new Socket("192.168.104.61", 8385);
			
			// 메시지 전송 클래스
			Sender sender = new Sender(socket);
			
			sender.start();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


public class Sender extends Thread{
	private Socket socket;

	public Sender(Socket socket) {
		this.socket = socket;
	}

	@Override
	public void run() {
		try {
			// 사용자한테 키보드를 통해 값을 입력받음.
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in, "UTF-8"));

			// 출력스트림을 통해서 연결된 socket에 outputStream을 통해 출력
			PrintWriter pw = new PrintWriter(socket.getOutputStream());
			
//			Scanner stdIn = new Scanner(System.in);
			while(true) {
				String message = br.readLine();
//				String message = stdIn.nextLine();
				if(message.equals("/exit")) {
					break;
				} else {
					// pw가 가리키는 socket에 메시지 전달
//					socket.getOutputStream().write((message+"\n").getBytes());
					pw.println(message);
					pw.flush();
				}
			}
			
			pw.close();
			br.close();
			socket.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}


-------------------------------------------------------------------------




