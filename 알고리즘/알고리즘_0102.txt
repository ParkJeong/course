여러 문장(프로세스)이 순차적으로 실행되는 구조를 순차적(concatenation) 구조라고 한다.

()안에 있는 식의 평가 결과에 따라 프로그램의 실행 흐름을 변경하는 if문을 선택 구조라고 한다.


+키보드로 숫자와 문자열 입력하기
impor java.util.Scanner;

Scanner stdIn = new Scanner(System.in);
stdIn.nextInt(); // 키보드로 입력한 값을 정수 값으로 리턴
stdIn.next(); // 문자열을 반환한다. 스페이스, 줄 바꿈 문자로 구분한다.
stdIn.nextLine(); // 문자열을 반환한다. 줄 바꿈 문자로 구분한다.


알고리즘
문제를 해결하기 위한 것으로, 명확하게 정의되고 순서가 있는 유한 개의 규칙으로 이루어진 집합


결정 트리 decision tree
왼쪽 끝에서 시작하여 오른족으로 이동한다. 타원 안의 조건이 성립하면 윗가지로, 성립하지 않으면 아랫가지로 이동한다.



순서도

프로그램의 흐름은 검은 실선을 따라 위에서 아래로 향한다.
그 과정에서 직사각형 안에 작성한 처리 과정이 실행된다.
마름모를 지날 때는 그 안에 작성된 조건(제어식)을 평가한 결과에 따라 Yes, No 중 하나를 따라 간다.
기울어진 평행사변형은 데이터의 입력과 출력을 나타낸다.

a->max의 의미는 a의 값을 max에 대입하라는 뜻이다.




if(a >= b) {
	if(b >= c) {
		return b;
	}else if (a <= c) {
		return a;
	} else {
		return c;
	}
} else if (a > c) {
	return a;
} else if (b > c) {
	return c;
} else {
	return b;
}
아래 코드가 위의 코드보다 효율이 떨어지는 이유는?
if((b >= a && c <= a) || (b <= a && c >= a)){
	return a;
} else if ((a > b && c < b) || (a < b && c > b)){
	return b;
} else {
	return c;
}

아래의 코드는 b >= a의 코드의 반대인 결과 a > b를 또 실행한다. 하나의 경우만 실행하더라도 알 수 있는 결과를 중복해서 수행하기 때문에 비효율적이다.


연산자 operator
피연산자 operand


단축 평가 short circuit evaluation
논리 연산의 식 전체를 평가한 결과가 왼쪽 피연산자의 평가 결과만으로 정확해지는 경우 오른쪽 피연산자의 평가를 수행하지 않는다.

드모르간 법칙
x && y와 !(!x || !y)는 같다.
x || y와 !(!x && !y)는 같다.




자료구조
데이터 단위와 데이터 자체 사이의 물리적 또는 논리적인 관계
자료를 효율적으로 이용할 수 있도록 컴퓨터에 저장하는 방법


배열
같은 자료형의 변수로 이루어진 구성 요소가 모인 것


import java.util.Random;

Random rand = new Random();
rand.nextInt(90); // 0부터 89까지의 난수 발생

rand.nextInt(n) // 0부터 n-1까지의 난수이다.

// Random 클래스의 다른 인스턴스와 겹치지 않도록 seed의 값을 자동으로 결정
Random rand = new Random(); 

// seed의 값을 주는 방법
Random rand = new Random(n);

난수는 seed라는 수의 값을 바탕으로 여러 연산을 수행하여 얻는다. seed의 값과 컴퓨터 환경이 같다면 그 결과값은 항상 같다. 결국 컴퓨터에 의해 생성된 모든 난수는 미리 컴퓨터가 계산해 둔 의사 난수이다. 컴퓨터는 계산된 결과만 가지고 난수를 생성하는데, 이 계산된 결과는 입력값에 의해 결정되므로 이 값으로 임의의 난수를 생성할 수는 없다.
따라서 프로그램에서 매번 같은 seed로 난수를 가져오면 처음 실행할 때 이외에는 난수라고 할 수 없다. 그래서 보통 seed 값을 매번 다르게 전달해 항상 다른 의사 난수를 생성한다. 이때 seed 값을 항상 다르게 주기 위해 현재 시간을 이용하는 것이 일반적이다.


temp없이 swap 방법 2가지
a,b
a = a + b; // a = a + b, b = b
b = a - b; // a = a + b, b = a
a = a - b; // a = b, b = a

xor 사용방법 종이에 써서 고민해보기
a = a xor b;
b = a xor b;
a = a xor b;


String 클래스
char charAt(int i) // 인덱스가 i인 곳의 문자를 가져온다.
int length() // 문자열의 문자 수를 가져온다.
boolean equals(String s) // 문자열 s와 같은가를 조사한다.

String s = "ABC";
String 클래스는 문자열을 넣어두기 위한 문자 배열, 문자 수를 나타내는 필드 등을 갖고 있는 클래스이다. 변수 s가 참조하는 곳은 단순한 '문자열'이 아니라 '문자열을 내부에 가진 인스턴스'임을 기억해라.




1.소수는  2부터 n-1 까지의 어떤 정수로도 나누어떨어지지 않는다.
-> 2.소수는 2부터 n-1 까지의 어떤 소수로도 나누어떨어지지 않는다.
+ 3이상의 소수에서는 홀수만 판단한다. 짝수인 소수는 2밖에 없기 때문이다.
-> 3.n의 제곱근 이하의 어떤 소수로도 나누어떨어지지 않는다.

counter 변수는 이 알고리즘이 처리 비용을 얼마나 요구하는지 저장하는 변수이다.

#2
public class PrimeNumber2 {
	public static void main(String[] args) {
		int counter = 0;
		int ptr = 0;
		int[] prime = new int[500];
		
		prime[ptr++] = 2;
		
		for(int n = 3; n <= 1000; n += 2) {
			int i;
			for(i = 1; i < ptr; i++) {
				counter++;
				if(n % prime[i] == 0)
					break;
			}
			if(ptr == i)
				prime[ptr++] = n;
		}
		
		for(int i = 0; i < ptr; i++) 
			System.out.println(prime[i]);
		
		System.out.println("나눗셈을 수행한 횟수: " + counter);
	}
}

같은 답을 얻는 알고리즘은 하나가 아니다.
빠른 알고리즘은 메모리를 많이 요구한다.


#3
 3.n의 제곱근 이하의 어떤 소수로도 나누어떨어지지 않는다.
이때 n의 제곱근을 구하는 것보다 제곱을 구하는 것이 훨씬 간단하고 빠르다. 제곱을 구할 때는 곱하기 연산을 사용하면 된다. 곱셈의 처리 비용은 나눗셈과 같다. 아래의 코드에서는 counter에 곱셈과 나눗셈 횟수의 합계를 저장한다.
1000까지의 소수를 저장하기 위한 배열로 500을 설정한 이유
-> 2 이외의 짝수는 소수가 아닌 것이 분명하고 적어도 절반을 준비하면 소수를 배열에 저장할 수 있기 때문이다.

public static void main(String[] args) {
	int counter = 0;
	int ptr = 0;
	int[] prime = new int[500];
	
	prime[ptr++] = 2;
	prime[ptr++] = 3;
	
	for(int n = 5; n <= 1000; n += 2) {
		boolean flag = false;
		for(int i = 1; prime[i] * prime[i] <= n; i++) {
			counter += 2;
			if(n % prime[i] == 0) {
				flag = true;
				break;
			}
		}
		if(!flag) {
			prime[ptr++] = n;
			counter++;
		}
	}
	
	for(int i = 0; i < ptr; i++) {
		System.out.println(prime[i]);
	}
	
	System.out.println("곱셈과 나눗셈을 수행한 횟수: " + counter);
}


다차원 배열(multi-dimensional array)
배열을 구성 요소로 하는 것이 2차원 배열, 2차원 배열을 구성 요소로 하는 것이 3차원 배열이다.
행이 다른 요소가 연속으로 놓이지 않는 것에 주의하하자. 
ex
int[][] x;
x = new int[2][];
x[0] = new int[4];
x[1] = new int[4];
x[0][3] 바로 뒤에 x[1][0]이 저장되지 않는다.

배열 초기화시에 마지막 요소의 뒤에도 쉼표를 붙여도 된다.
int[] a = {1, 2, 3, 4,};


static int[][] mdays = {
			{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
			{31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

// 윤년 4로 나누어떨어지고, 100으로 나누어 떨어지지 않고, 400으로 나누어 떨어지면 윤년
static int isLeap(int year) {
	return (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) ? 1: 0;
}

static int dayOfYear(int y, int m, int d) {
	int days = d;
	
	for(int i = 1; i < m; i++) {
		days += mdays[isLeap(y)][i-1];
	}
	return days;
}

static int dayOfYear(int y, int m, int d) {
	while (--m != 0)
		d += mdays[isLeap(y)][m - 1];
	return (d);
}
	

static int leftDayOfYear(int y, int m, int d) {
	int days = d; // 일수
	for (int i = 1; i < m; i++) // 1월~(m-1)월의 일 수를 더함
		days += mdays[isLeap(y)][i - 1];
	return 365 + isLeap(y) - days;
}



다차원 배열의 복제
다차원 배열의 복제(clone)는 최상위의 1레벨만 수행한다. 다음 예에서 a[0]과 a[1]만 복제되고 그 아래 레벨의 배열은 복제되지 않고 공유된다.
int[][] a = {{1, 2, 3, 4}, {5, 6, 7}};
int[][] b = a.clone();
a[0]과 b[0]은 값을 공유하지 않는다. 즉 a[0]의 값을 바꾸어도 b[0]에는 영향을 미치지 않는다.
a[0][0]과 b[0][0]은 값을 공유한다. 즉 a[0][0]의 값을 바꾸면 b[0][0]의 값도 바뀐다.


향상된 for문
for-in문, for-each문이라고도 한다.
for(double num : arr){
	sum += num;
}
배열의 모든 요소를 스캔하는 과정에서 인덱스 자체의 값이 필요하지 않으면 그 스캔은 확장 for문에 의해 구현하는 것이 좋다.













